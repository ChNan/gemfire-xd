<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mybuild [
 <!ENTITY localxml SYSTEM "./build.xml.local">
]>
<!-- This is the Ant build file for building GemFire.

     For more information about Ant see:

                    http://jakarta.apache.org/ant

     For more information about JUnit see:

                         http://www.junit.org

-->

<project name="gemfire" default="usage"  xmlns:bundlor="antlib:com.springsource.bundlor.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>Builds GemFire</description>
  
  <target name="help" depends="usage"/>

  <target name="usage">
    <description>Prints information about what can be built</description>


    <echo>
Commonly used targets:
  src                           Builds all GemFire product jars and libraries
  tests                         Builds all GemFire product jars, libraries, and
                                test code
  build-all                     Builds product into product tree and tests, does
                                not run tests
  precheckin                    Does an update-git, clean, build-all, run-gemfirexd-dunit-tests,
                                run-gfxd-dunit-tests and grep-tests-results.
  wan-precheckin                Does an update-git, clean, build-all, run-wan-dunit-tests,
                                gfxd-run-wan-dunit-tests and grep-test-results.
  usage (or help)               Prints this help information

Available targets:
  compile-gemfire      Compiles the GemFire Java source code
  shared-library       Compiles the C++ code and builds the shared libraries
  rebuild-shared-library32 Builds 32bit &quot;shared-library&quot; and then &quot;pack-core&quot;
  rebuild-shared-library64 Builds 64bit &quot;shared-library&quot; and then &quot;pack-core&quot;
  build-gemfire        Builds gemfire.jar (compiles all jared classes).
                       the gemfire.jar is written directly to the product tree

  build-templates      Builds the templates files using their own ant build file

  rebuild-gemfire      Builds &quot;build-gemfire&quot; and then
                       &quot;pack-core&quot;

  compile-examples     Compiles the GemFire examples and builds examples.jar

  compile-tests        Compiles the GemFire test code and builds tests.jar

  run-java-tests       Runs the GemFire Java unit tests
  run-java-tests64     Use "-Djunit.testcase=tClass" to run a single test
                       where "tClass" is the name of a class file.
                       -DsaveDiskStoreFiles=true will prevent cleanup of disk files
                       some tests don't always clean up on some platforms.
  parallel-junit       Runs java unit tests in 5 parallel sites by default 
  parallel-junit64     Same as parallel-junit except uses 64bit JVMs
  run-smoke-tests      Runs the GemFire Smoke tests without rebuilding src
  run-smoke-tests64    Same as run-smoke-tests except uses 64bit JVMs

  run-wan-dunit-tests  Runs the WAN 7.0 distributed unit tests
                       Use "-Dwan.dunit.testcase=tClass" to run a single test
                       where "tClass" is the name of a class file.
  run-wan-dunit-tests64        Runs same as run-wan-dunit-tests except uses 64bit JVMs
  run-gemfirexd-dunit-tests    Runs DUnits using gemfirexd-dunit-default-tests set
  run-gemfirexd-dunit-tests64  Same as run-gemfirexd-dunit-tests except uses 64bit JVMs
  run-dunit-tests      Runs the GFCache distributed unit tests
  run-dunit-tests64    Use "-Ddunit.testcase=tClass" to run a single test
                       where "tClass" is the name of a class file such as
                       "com/package/ClassName.class".
                       Use "-DdunitFromTestClass=com.package.ClassName" to cause
                       dunit to skip all dunit tests prior to the named test class.
                       local.conf may be specified with -Dlocal.conf.
                       -DmergeLogFiles=true will build a mergedLogs.txt file.
                       -DdunitSites=number may be used in conjuction with a
                       local.conf to run dunit tests in parallel.
                       -DuseIPv6=true will insert configuration to use
                       IPv6 instead of IPv4.
                       -DsaveDiskStoreFiles=true will prevent cleanup of disk files
                       some tests don't always clean up on some platforms.
  run-quickstart-tests Runs the GemFire QuickStart tests
                       Use "-Dquickstart.testcase=tClass" to run a single test
                       where "tClass" is the name of a class file.
  run-quickstart-tests64  Same as run-quickstart-tests except uses 64bit JVM
  run-container-tests  Runs the GemFire container integration tests
                       Use "-Dcontainer.testcase=tClass" to run a single test
                       where "tClass" is the name of a class file.

  gfxd-run-smoke-tests      Runs the gfxd-smoke tests
  gfxd-run-smoke-tests64    Same as gfxd-run-smoke-tests except uses 64bit JVM  
  gfxd-run-harness-tests    Runs gfxd derby harness tests
  gfxd-run-harness-tests64  Same as gfxd-run-harness-tests except uses 64bit JVM
  gfxd-run-junit-tests      Runs derby-junit-all and gfxd-internal-run-junit-tests
  gfxd-run-junit-tests64    Same as gfxd-run-junit-tests except uses 64bit JVM
  gfxd-parallel-junit       Runs derby-junit-all and GemFireXD junit tests in 5
                            parallel sites by default (except Derby junit tests
                              that are still run in a single site)
  gfxd-parallel-junit64     Same as gfxd-parallel-junit except uses 64bit JVM
  gfxd-run-dunit-tests      Runs DUnits using gfxd.dunit.testlist 
  gfxd-run-dunit-tests64    Same as gfxd-run-dunit-tests except uses 64bit JVM
  gfxd-run-integration-dunit-tests   Runs DUnits using gfxd.integration.dunit.testlist
  gfxd-run-integration-dunit-tests64 Same as above except uses 64bit JVM

  run-moresmoke-tests  Runs batterytest the ${moresmoke.bt} test configs.
  run-moresmoke-tests64  Same as run-moresmoke-tests except uses 64bit JVM

  run-perf-tests       Runs batterytest ${perf.bt}.  Use
  run-perf-tests64     "-Dhosts.perf=host_names" to use remote or multiple
                       hosts. -DuseIPv6=true will insert configuration to use
                       IPv6 instead of IPv4.

  execute-battery      Runs a bt file specified by property -Dbt.file.  The
                       default result directory is .../tests/results/battery,
                       but this may be overridden with -Dbt.result.dir.  Extra
                       arguments to battery test may be specified with -Dbt.args,
                       and local.conf may be specified with -Dlocal.conf.
                       -DmergeLogFiles=true will build a mergedLogs.txt file.
  execute-hydra-test   Runs a hydra test conf specified by property -Dhydra.conf.
                       The default result directory is .../tests/results/battery,
                       but this may be overridden with -Dbt.result.dir.
                       A local.conf may be specified with -Dlocal.conf.
                       -DmergeLogFiles=true will build a mergedLogs.txt file.
  external-javadocs    Builds the external javadocs
  internal-javadocs    Builds the internal javadocs
  tests-javadocs       Builds the javadocs for the tests
  examples-javadocs    Builds the javadocs for the examples
  glimpse              Builds a glimpse database for GemFire source code

  clean                Cleans all byproducts of building
  clean-tests          Cleans the byproducts of compile-tests
  clean-gemfire-library clean just the objs files in the gemfire so or dll.
  update-svn           Updates this gemfire SVN checkout
  update-git           Runs git pull and confirms latest
  import-docs          Svn export tagged docs from gemfireDocs Repository to build-artifacts
  build-product        Packs a product tree into build-artifacts
  quick-build-product  Same as &quot;build-product&quot; but does not check dependencies
  build-installer      Creates jarfile installer of product tree
  build-pvtl-installer   Creates a vFabric jarfile installer of product tree 
  build-pvtl-dist        Creates a vFabric zip distribution of product tree 
  build-pvtl-rpm         Creates a vFabric RPM installer for EL5 and EL6
  build-maven-dist     Creates maven and checksum artifacts for maven distribution
  build-gfmodules      Builds GemFireModules from gemfireModules SVN repository
  build-databrowser    Builds DataBrowser from tools SVN repository
  build-pulse          Builds Pulse from tools SVN repository
  contest-instrument   Instruments up to 10 classes with JavaConTest for multithreaded testing
  run-findbugs         Runs findbugs tool and saved the output to find-bugs.xml
  codecoverage-report  Creates code coverage report in ${osbuild.dir}/codecoverage-report


Command Line Defines:
  -Dcodecoverage=true  Turn on JaCoCo agent for code coverage
  -Dlocal.gcm.dir=dir  Copy all gcm dependencies required into this directory.
  -Dmax.memory=n       Max heap in MB to use for javadoc and javac tasks.
                       Default is 1024.
  -DdunitSites=n       Where n is the number of dunit slices to run
  -DuseIPv6=true       Use IPv6 instead of IPv4.
  -Dproduct.dir=yourProductDir  Causes &quot;unit-tests&quot; to compile and run using
                                yourProductDir.
  -Dbt.numTimesToRun=n Where n is the number of complete passes to make over
                       the unit tests. The default is 1. Test failures are
                       archived to a pass-c directory where c is the current
                       pass number.
  -DhaltOnFailure=true Causes ant halt on the first unit test failure rather
                       than finishing to execute the tests.
  -DNukeHungTests=false Causes hung tests to hang around to debug.  
                       default - true - kill test and continue on to next one.
  -DuseSSH=true        Causes hydra to use ssh instead of rsh, default is true.
  -DlogLevel=level     The log level the unit test system should default to.
                       One of: all, finest, finer, fine (default),
                       config, info, warning, severe, none
  -DdmVerbose=true     turns on DISTRIBUTION_MANAGER.VERBOSE output in dunits and junits
  -Donly32=true        Only test the 32 bit product
  -Donly64=true        Only test the 64 bit product
  -DdunitLogPerTest=true Causes the log and stat file to be named like TestClass-testName
  -DdunitRecordResults=true Saves dunit results in a database (for now, must be on beaverton network)
  -DdunitFromTestClass=com.gemstone.gemfire.FooDUnitTest skip all dunits until FooDUnitTest is run. Then run all tests after it.
  -DuseHTTP=true Causes the GemFire Management DUnit tests running TestableGfsh to connect to the Manager using HTTP instead of JMX.
    </echo>
  </target>

  <!-- Property reference to environment variables -->
  <property environment="myenv"/>

  <taskdef resource="com/gemstone/tools/ant/taskdefs/buildtasks.properties"
           classpath="${basedir}/buildfiles/taskdefsV12.jar"/>

  <!-- Define IF Task from ant-contrib --> 
  <condition property="antcontrib.taskfile" value="net/sf/antcontrib/antlib.xml">
    <antversion atleast="1.8"/>
  </condition>

  <!-- If antcontrib.taskfile is not set -->
  <property name="antcontrib.taskfile" value="net/sf/antcontrib/antcontrib.properties"/>

  <taskdef resource="${antcontrib.taskfile}"/>

  <!-- Set product property for determining which product to build. -->
  <property name="product" value="gemfire"/>
  
  <!-- Verify product property is correct -->
  <if>
    <not>
      <or>
        <equals arg1="${product}" arg2="gemfire" casesensitive="true"/>
        <equals arg1="${product}" arg2="gemfireXD" casesensitive="true"/>
      </or>
    </not>
    <then>
      <fail message="Property product not set to valid value. Must be 'gemfire' or 'gemfireXD"/>
    </then>
  </if>
  
  <!-- JDK, Java Compiler (javac) and Java Launcher (java) configuration properties -->
  <property name="jdk.dir" value="where/jdk"/>
  <property name="javac.primary.version" value="1.7.0_72"/>
  <property name="javac.secondary.version" value="1.7.0_72"/>
  <property name="java.test.version" value="1.7.0_72"/>

  <!-- determine machine and os, and if this is a 32 bit only or 64 bit only platform -->
  <import file="buildfiles/osplatform.xml"/>

  <property name="gcm.dir" value="${myenv.GCMDIR}"/>
  <property name="ant.opts" value="${myenv.ANT_OPTS}"/>
  <if>
    <!-- Win2K+ use "Path" but not making this check OS specific -->
    <equals arg1="${myenv.PATH}" arg2="$${myenv.PATH}"/>
    <then>
      <property name="env.path" value="${myenv.Path}"/>
    </then>
    <else>
      <property name="env.path" value="${myenv.PATH}"/>
    </else>
  </if>

  <!-- import any properties defined in a properties file -->
  <available file="${basedir}/build${gf.os}.properties" property="build.os.exists"/>
  <conditional if="build.os.exists">
    <echo message="Loading properties from ${basedir}/build${gf.os}.properties:" level="info"/>
    <property file="${basedir}/build${gf.os}.properties"/>
    <concat>
      <filelist dir="${basedir}" files="build${gf.os}.properties"/>
    </concat>
  </conditional>

  <available file="${basedir}/build.properties" property="build.props.exists"/>
  <conditional if="build.props.exists">
    <echo message="Loading properties from ${basedir}/build.properties:" level="info"/>
    <property file="${basedir}/build.properties"/>
    <concat>
      <filelist dir="${basedir}" files="build.properties"/>
    </concat>
  </conditional>

  <!-- Include external xml files here -->
  <import file="buildfiles/dependencies.xml"/>
  
  <import file="buildfiles/utilities.xml"/>
  <import file="sshAddons.xml"/>
  <import file="GemFireXD.xml"/>
  <import file="buildfiles/codecoverage.xml"/>
  <import file="buildfiles/tests.xml"/>
  <import file="buildfiles/container-tests.xml"/>

  <if>
    <istrue value="${sonar.scan}"/>
    <then>
      <import file="buildfiles/sonar.xml"/>
    </then>
    <else>
    </else>
  </if>

  <!-- Define the product version related properties -->
  <property name="gemfire.version" value="7.5.Beta"/>
  <property name="gemfire.osgi.version" value="7.0"/>
  <property name="native.version" value="6.5"/>
  <property name="product.formalname" value="vFabric_GemFire"/>
  <property name="releaseTag.name" value="Release70"/>

  <target name="-keep-going" depends="props">
    <keepgoing haltOnFailure="${haltOnFailure}"/>
  </target>

  <!-- Sets properties used in this build file -->
  <target name="props" depends="-custom-deps,setbat" unless="props.done">
    <property name="props.done" value="1"/>

    <!-- Normalize useIPv6 must true|1|false|0|"" -->
    <if>
      <or>
        <equals arg1="${useIPv6}" arg2="true" casesensitive="false"/>
        <equals arg1="${useIPv6}" arg2="1"/>
      </or>
      <then>
        <var name="useIPv6" value="true"/>
      </then>
      <elseif>
        <or>
          <equals arg1="${useIPv6}" arg2="false" />
          <equals arg1="${useIPv6}" arg2="0"/>
          <equals arg1="${useIPv6}" arg2="&#36;&#123;useIPv6&#125;"/>
        </or>
        <then>
          <var name="useIPv6" value="false"/>
        </then>
      </elseif>
      <else>
        <fail message="useIPv6 must be true|false, the  default is false"/>
      </else>
    </if>

    <condition property="library.path" value="DYLD_LIBRARY_PATH">
      <os family="mac"/>
    </condition>
    <property name="library.path" value="LD_LIBRARY_PATH"/>
    <!-- these two lines get hostname without requiring cygwin on windows -->
    <exec executable="hostname"
          failifexecutionfails="false"
          outputproperty="myenv.COMPUTERNAME"/>
    <property name="host.name" value="${myenv.COMPUTERNAME}"/>

    <property name="build.dir" value="${basedir}/build-artifacts"/>

    <property name="osbuild.dir" value="${build.dir}/${gf.os}"/>

    <echo message="osbuild.dir is ${osbuild.dir}" level="info"/>
    <echo message="Running on ${host.name}" level="info"/>

    <property name="compile-gemfire.deprecation" value="off"/>

    <!-- Do not allow build artifacts to be place on the filer -->
    <fail message="Build artifacts cannot reside on the filer (${osbuild.dir}).  Please use a build properties file">
      <condition>
        <and>
          <contains string="${osbuild.dir}" substring="shared_build"
                    casesensitive="false"/>
          <not>
            <contains string="${osbuild.dir}" substring="shared_build_wdc"
                      casesensitive="false"/>
          </not>
        </and>
      </condition>
    </fail>

    <mkdir dir="${osbuild.dir}"/>
    <property name="scripts.dir" value="${basedir}/release/scripts"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.out.dir" value="${osbuild.dir}/src"/>
    <property name="util.dir" value="${basedir}/src/util"/>
    <property name="internal.dir" value="${basedir}/src/com/gemstone/gemfire/internal"/>
    <property name="classes.dir" value="${osbuild.dir}/classes"/>


    <property name="tests.src.dir" value="${basedir}/tests"/>
    <property name="version1.tests.src.dir" value="${basedir}/testsVersions/version1"/>
    <property name="tests.bin.dir" value="${tests.src.dir}/bin"/>
    <property name="tests.lib.dir" value="${tests.src.dir}/lib"/>
    <property name="tests.out.dir" value="${osbuild.dir}/tests"/>
    <property name="tests.classes.dir" value="${tests.out.dir}/classes"/>
    <property name="tests.jar.dir" value="${tests.out.dir}/lib"/>
    <property name="generated.tests.src.dir" value="${tests.out.dir}/generated_src"/>
    <property name="versionBase.out.dir" value="${osbuild.dir}/testsVersions"/>
    <property name="version1.tests.out.dir" value="${versionBase.out.dir}/version1/classes"/>
    <property name="version2.tests.out.dir" value="${versionBase.out.dir}/version2/classes"/>
    <property name="extraJars.dir" value="${tests.out.dir}/extraJars"/>

    <!-- Use properties so they can be overriden from the commandline -->
    <property name="smoketest.bt"
              value="${tests.classes.dir}/smoketest/smoketest.bt"/>
    <property name="moresmoke.bt"
              value="${tests.classes.dir}/smoketest/newsmoke.bt"/>
    <property name="stats.smoke.bt"
              value="${tests.classes.dir}/smoketest/stats.bt"/>
    <property name="mem.bt" value="${tests.classes.dir}/smoketest/mem.bt"/>
    <property name="perf.bt" value="${tests.classes.dir}/smoketest/perf.bt"/>
    <property name="gfxdperf.bt" value="${tests.classes.dir}/smoketest/smokeperf/gfe.bt"/>
    <property name="cruisecontrol.bt" value="${tests.classes.dir}/smoketest/newsmoke.bt"/>
    <property name="memscale-suite.bt"
              value="${tests.classes.dir}/memscale/memscaleSmoke.bt"/>

    <property name="sharedLibraryTargets" value="all"/>

    <property name="tests.results.dir" value="${osbuild.dir}/tests/results"/>
    <property name="tests.results64.dir" value="${tests.results.dir}64"/>

    <property name="examples.src.dir" value="${basedir}/examples"/>
    <property name="examples.dist.src.dir" value="${basedir}/examples/dist"/>
    <property name="examples.dist.classes.dir" value="${osbuild.dir}/examples/dist/classes"/>
    <property name="hidden.dir" value="${osbuild.dir}/hidden"/>
    <property name="hiddenlib.dir" value="${hidden.dir}/lib"/>
    <property name="hiddenbin.dir" value="${hidden.dir}/bin"/>
    <property name="hiddenadonet.dir" value="${hidden.dir}/adonet_2008"/>

    <property name="glimpse.dir" value="glimpsefiles"/>

    <property name="test-mode-non-tx" value="true"/>
    <property name="product.dir" value="${osbuild.dir}/product"/>
    <property name="odbc.product.dir" value="${osbuild.dir}/product-odbc"/>
    <property name="product.lib.dir" value="${product.dir}/lib"/>
    <property name="packTargetDir" value="${product.dir}"/>
    <property name="templates.dir" location="${basedir}/templates/templates"/>
    <property name="templates.classes.dir" location="${osbuild.dir}/templates/classes"/>
    <property name="snapZip.dir" location="${build.dir}"/>

    <property name="quickstart.src.dir" value="${basedir}/quickstart"/>
    <property name="quickstart.hidden.dir" value="${hidden.dir}/quickstart"/>
    <property name="helloworld.src.dir" value="${basedir}/helloworld"/>
    <property name="helloworld.hidden.dir" value="${hidden.dir}/helloworld"/>
    <property name="tutorial.src.dir" value="${basedir}/tutorial"/>
    <property name="tutorial.hidden.dir" value="${hidden.dir}/tutorial"/>

    <property name="installer.dir" value="${osbuild.dir}/installer"/>
    <property name="maven_dist.dir" value="${osbuild.dir}/maven_dist"/>

    <property name="docs.dir" value="${osbuild.dir}/javadocs"/>
    <property name="last.update.file" value="lastUpdate.txt"/>
    <property name="date.pattern" value="MM/dd/yyyy HH:mm:ss z"/>
    <property name="junit.timeout" value="2400"/>
    <tstamp>
       <format pattern="yyyy-MM-dd-hh-mm-ss-SSS" property="sys.build.time"/>
       <format pattern="${date.pattern}" property="build.time"/>
    </tstamp>

    <property name="haltOnFailure" value="false"/>
    <property name="NukeHungTests" value="true"/>
    <property name="useSSH" value="true"/>

    <!-- GemFire system configuration properties -->
    <property name="logLevel" value="config"/>
    <property name="dmVerbose" value="false"/>
    <property name="defaultPort" value="10333"/>
    <!-- Set gemfire.debug to true to use the debug "_g" native code library -->
    <property name="gemfire.debug" value="false"/>

    <!-- ant.make properties -->
    <condition property="ant.make" value="gmake">
      <os name="SunOs"/>
    </condition>
    <condition property="ant.make" value="make">
      <os name="Linux"/>
    </condition>
    <condition property="ant.make" value="make">
      <os name="Mac OS X"/>
    </condition>
    <condition property="ant.make" value="make">
      <os name="AIX"/>
    </condition>
    <condition property="msbuild.skip" value="true">
        <and>
           <os family="windows"/>
           <not>
              <and>
                <available file="${basedir}/bin/vcvars.bat" property="vcvars.found"/>
                <isset property="vcvars.found"/>
              </and>
           </not>
           <isset property="useMono"/>
        </and>
    </condition>
    <condition property="ant.make" value="make">
       <isset property="msbuild.skip"/>
    </condition>
    <condition property="ant.make" value="${basedir}/bin/vcvars.bat">
       <os family="windows"/>
    </condition>
    
    <!-- more 32/64 bit conditional properties -->

    <conditional if="isSolaris">
      <property name="d32prop" value="-d32"/>
      <property name="d64prop" value="-d64"/>
    </conditional>
    <property name="d32prop" value="-Ddummy=0"/>
    <property name="d64prop" value="-Ddummy=0"/>

    <conditional if="testJVM">
      <echo message="testJVM is ${testJVM}" level="info"/>
      <property name="unittest.java32" value="${testJVM}"/>
      <property name="unittest.java64" value="${testJVM}"/>
    </conditional>

    <conditional if="isMac">
      <property name="unittest.java32" value="${default.testVM}/bin/java"/>
      <property name="unittest.java64" value="${default.testVM}/bin/java"/>
    </conditional>
    <!-- this 64 bit setting is for Solaris only -->
    <!-- we invoke the 64 bit java executable instead of trying to put -d64 on the java vm command line -->
    <condition property="unittest.java64" value="${default.testVM}/jre/bin/sparcv9/java">
      <os name="SunOs"/>
    </condition>
    <property name="unittest.java32" value="${default.testVM}/jre/bin/java"/>
    <property name="unittest.java64" value="${default.testVM64}/jre/bin/java"/>
    <property name="testJVM" value="${unittest.java32}"/>

    <!--
      Set this to run self-tests with JRockit VM in your product/jre
    <property name="jvm.jrockit" value="true"/>
    <echo message="jvm.jrockit is ${jvm.jrockit}" level="info"/>
    -->

    <property name="jvm.jrockit" value="false"/>
    <property name="dunitSites" value="1"/>
    <property name="max.memory" value="1024"/>
    <property name="gemfire.disableManagement" value="false"/>

    <conditional if="jvm.jrockit">
      <property name="dunit-extra-jvm-args" value=""/>
    </conditional>
    <conditional unless="jvm.jrockit">
      <property name="dunit-extra-jvm-args" value="-XX:+JavaMonitorsInStackTrace -XX:MaxDirectMemorySize=256M"/>
    </conditional>
  
    <antcall target="make-last-update"/>

    <!-- If svn was manually run then update lastUpdate.txt and build.number -->
    <uptodate property="makelastupdate.Required"
      srcfile="${build.dir}/${last.update.file}"
      targetfile="${basedir}/.svn/entries"/>

    <conditional if="makelastupdate.Required">
      <antcall target="make-last-update"/>
      <property name="skipLastUpdate"  value="true"/>
    </conditional>

    <property name="gemfire.jar.name"
              value="gemfire.jar"/>
    <property name="gemfire.war.name"
              value="gemfire.war"/>
    <property name="gemfire-web.jar.name"
              value="gemfire-web.jar"/>
    <property name="gfSecurityImpl.jar.name"
              value="gfSecurityImpl.jar"/>
    <property name="gfsh-dependencies.jar.name"
              value="gfsh-dependencies.jar"/>
    <property name="locator-dependencies.jar.name"
              value="locator-dependencies.jar"/>
    <property name="pulse-dependencies.jar.name"
              value="pulse-dependencies.jar"/>
    <property name="server-dependencies.jar.name"
              value="server-dependencies.jar"/>
    <property name="agent-dependencies.jar.name" 
              value="agent-dependencies.jar" />
    <!-- DO NOT SHIP WITH THIS IN THE PRODUCT LIB -->
    <property name="griddb-dependencies.jar.name"
              value="griddb-dependencies.jar"/>
  </target>

  <target depends="props" name="print-build-vars">
      <echo message="BUILDVAR: OSBUILDDIR=${osbuild.dir}" level="info"/>
      <echo message="BUILDVAR: BASEDIR=${basedir}" level="info"/>
      <echo message="BUILDVAR: ANTMAKE=${ant.make}" level="info"/>
      <echo message="BUILDVAR: PRODUCTDIR=${product.dir}" level="info"/>
  </target>

  <target name="import-docs" depends="props">
    <description>Checks out gemfireDocs from that repository.</description>
    <delete dir="${build.dir}/packDocs" quiet="true"/>
    <property name="svndocs.info.logfile" value="svn-docs-info.log"/>
    <delete file="${svndocs.info.logfile}" quiet="true"/>
    <echo message="Exporting the following revision from gemfireDocs repository"/>
    <echo message="" level="info"/>
    <exec executable="svn" failonerror="false" output="${svndocs.info.logfile}">
      <arg value="info"/>
      <arg value="https://svn.gemstone.com/repos/gemfiredocs/tags/releasedDocs/${releaseTag.name}"/>
    </exec>
    <concat>
      <fileset dir="." includes="${svndocs.info.logfile}"/>
    </concat>
    <property name="docs.logfile" value="svn-docs.log"/>
    <echo message="" level="info"/>
    <exec executable="svn" failonerror="true" output="${docs.logfile}">
      <arg value="export"/>
      <arg value="https://svn.gemstone.com/repos/gemfiredocs/tags/releasedDocs/${releaseTag.name}"/>
      <arg value="${build.dir}/packDocs"/>
    </exec>
    <delete dir="${product.dir}/docs/pdf"/>
    <delete dir="${product.dir}/docs/html"/>
  </target>

  <!-- ==============  CruiseControl targets   ================ -->

  <target name="cruisecontrol-build-and-test-gemfirexd" depends="clean, gfxd-clean, report-versions, gfxd-build-all-sanity, run-quickstart-tests, run-gemfirexd-dunit-tests, parallel-junit, run-smoke-tests, gfxd-run-smoke-tests, gfxd-run-junit-tests, gfxd-run-dunit-tests, gfxd-run-integration-dunit-tests, gfxd-run-wan-dunit-tests, find-hung-dunit-tests"/>

  <target name="cruisecontrol-build-and-test-gemfirexd64" depends="clean, gfxd-clean, report-versions, gfxd-build-all-sanity, run-quickstart-tests64, run-gemfirexd-dunit-tests64, parallel-junit64, run-smoke-tests64, gfxd-run-smoke-tests64, gfxd-run-junit-tests64, gfxd-run-dunit-tests64, gfxd-run-integration-dunit-tests64, gfxd-run-wan-dunit-tests64, find-hung-dunit-tests64"/>

  <target name="wincc-cruisecontrol-build-and-test-gemfirexd" depends="clean, gfxd-clean, report-versions, gfxd-build-java-product, gfxd-compile-all-tests, run-quickstart-tests, run-gemfirexd-dunit-tests, parallel-junit, run-smoke-tests, gfxd-run-smoke-tests, gfxd-run-junit-tests, gfxd-run-dunit-tests, gfxd-run-integration-dunit-tests, gfxd-run-wan-dunit-tests, find-hung-dunit-tests"/>

  <target name="wincc-cruisecontrol-build-and-test-gemfirexd64" depends="clean, gfxd-clean, report-versions, gfxd-build-java-product, gfxd-compile-all-tests, run-quickstart-tests64, run-gemfirexd-dunit-tests64, parallel-junit64, run-smoke-tests64, gfxd-run-smoke-tests64, gfxd-run-junit-tests64, gfxd-run-dunit-tests64, gfxd-run-integration-dunit-tests64, gfxd-run-wan-dunit-tests64, find-hung-dunit-tests64"/>

  <target name="cruisecontrol-run-all-gemfirexd-tests-parallel" depends="clean, gfxd-clean, report-versions, gfxd-clean, gfxd-build-all-sanity, run-all-gemfirexd-tests-parallel"/>

  <target name="cruisecontrol-run-all-gemfirexd-tests64-parallel" depends="clean, gfxd-clean, report-versions, gfxd-clean, gfxd-build-all-sanity, -keep-going, cc-run-all-gemfirexd-tests64-parallel"/>

  <target name="cc-run-all-gemfirexd-tests64-parallel" depends="props, define-test-groups, -keep-going">
    <parallel>
      <antcall target="run-all-gemfirexd-gfe-tests64"/>
      <antcall target="gfxd-run-all-tests64-parallel"/>
    </parallel>
  </target>

  <target name="cruisecontrol-build-and-bt-test-gemfirexd" depends="clean, gfxd-clean, report-versions, gfxd-build-all-sanity, run-cruisecontrolbt-test"/>

  <target name="cruisecontrol-build-and-test-gfxd-smokes" depends="clean, gfxd-clean, report-versions, build-all-gfe, gfxd-build-all-sanity, gfxd-run-smoke-tests, run-smoke-tests, run-moresmoke-tests"/>

  <target name="cruisecontrol-build-and-bt-test-gf" depends="clean, report-versions, build-all, run-cruisecontrolbt-test"/>

  <target name="cruisecontrol-build-and-test-gf" depends="clean, gfxd-clean, report-versions, build-all, gemfirexd-precheckin-tests, find-hung-dunit-tests"/>

  <target name="cruisecontrol-build-and-test-mgmt-gf" depends="define-management-tests, clean, gfxd-clean, report-versions, build-all-gfe, run-management-tests"/>

  <target name="cruisecontrol-build-and-wan-dunit-test" depends="clean, gfxd-clean, report-versions, build-all-gfe, gfxd-build-all-sanity, run-wan-dunit-tests, gfxd-run-wan-dunit-tests, find-hung-dunit-tests"/>

  <target name="run-cruisecontrolbt-test" depends="props, define-test-groups, -keep-going">
    <description>Runs the cruisecontrol bt tests. </description>
    <delete dir="${tests.results.dir}/cruisecontrolbt"/>
    <property name="bt.removePassedTest" value="true"/>
    <property name="provideXMLReport" value="true"/>
    <property name="bt.provideBugReportTemplate" value="true"/>
    <unitTest-battery type="cruisecontrolbt" bt.file="${cruisecontrol.bt}" resultsDir="${tests.results.dir}" threshold="${threshold.cruisecontrolbt}"/>
  </target>

  <!-- report-versions used only by cruisecontrol targets -->
  <target name="report-versions" depends="props">
    <description>Reports build number in CruiseControl Log</description>

    <!-- Make the manifest -->
    <property file="${build.dir}/build.number"/>
    <!-- Provide svn information and artifact path in cruisecontrol mail -->

    <property name="ccartifact.file" value="${build.dir}/ccpath.txt" />
    <touch file="${ccartifact.file}"/>
    <echo file="${ccartifact.file}" level="info">ccArtifactPath=${basedir}/${cctimestamp}
    </echo>

    <conditional if="isWindows">
      <replace file="${ccartifact.file}" token="\" value="/"/>
    </conditional>

    <replace file="${ccartifact.file}" token="/checkout/" value="/artifacts/"/>

    <conditional if="isWindows">
      <replace file="${ccartifact.file}" token="${cctimestamp}" value="${cctimestamp} on ${host.name}"/>
    </conditional>
    <property file="${build.dir}/ccpath.txt"/>

    <echo message="Running build ${build.number} "/>
    <echo message=""/>
    <echo message="========================================================================================="/>
    <echo message="View this CC's Dashboard for detailed results at:"/>
    <echo message="http://${host.name}:8080/dashboard/tab/dashboard"/>
    <echo message=""/>
    <echo message="If there are failures they can be found at:"/>
    <echo message="${ccArtifactPath}"/>
    <echo message="or click the failed build on the dashboard"/>
    <echo message="========================================================================================="/>
    <echo message=""/>

    <echo level="info" message="Note: the following svn info isnt accurate if you manually used svn to update specific files."/>
    <concat>
      <filelist dir="${build.dir}" files="${last.update.file}"/>
    </concat>
    <echo message=""/>
    <delete file="${ccartifact.file}"/>
  </target>

  <!-- ==============  Building GemStone Source Code  ================ -->

  <target name="build-gf" depends="build-product, compile-tests"/>

  <target name="build-all-gfe" depends="build-gf, internal-javadocs"/>

  <target name="build-all" depends="build-all-gfe, gfxd-build-all-cc"/>

  <target name="build-all-with-docs" depends="build-all, tests-javadocs" description="build product, all tests, plus test and internal javadocs"/>

  <!-- Compiles the GemFire source code -->
  <target name="compile-gemfire" depends="props">
    <description>Compile GemFire source code</description>

    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${hiddenlib.dir}"/>
    <mkdir dir="${product.lib.dir}"/>

    <!-- Copy product dependencies to $product.lib.dir -->
    <copy todir="${product.lib.dir}">
      <fileset file="${activation.jar}"/>
      <fileset file="${antlr.jar}"/>
      <fileset file="${commons-cli.jar}"/>
      <fileset file="${commons-codec.jar}"/>
      <fileset file="${commons-configuration.jar}"/>
      <fileset file="${commons-io.jar}"/>
      <fileset file="${commons-lang.jar}"/>
      <fileset file="${commons-logging.jar}"/>
      <fileset file="${commons-modeler.jar}"/>
      <fileset file="${guava.jar}"/>
      <fileset file="${jsr305.jar}"/>
      <fileset file="${hadoop-annotations.jar}"/>
      <fileset file="${hadoop-auth.jar}"/>
      <fileset file="${hadoop-common.jar}"/>
      <fileset file="${hadoop-hdfs.jar}"/>
      <fileset file="${hadoop-mapreduce-client-core.jar}"/>
      <fileset file="${hbase.jar}"/>
      <fileset file="${jackson.jar}"/>
      <fileset file="${jansi.jar}"/>
      <fileset file="${jetty9-http.jar}"/>
      <fileset file="${jetty9-io.jar}"/>
      <fileset file="${jetty9-security.jar}"/>
      <fileset file="${jetty9-server.jar}"/>
      <fileset file="${jetty9-servlet.jar}"/>
      <fileset file="${jetty9-servlet-api.jar}"/>
      <fileset file="${jetty9-util.jar}"/>
      <fileset file="${jetty9-webapp.jar}"/>
      <fileset file="${jetty9-xml.jar}"/>
      <fileset file="${jline-s2.jar}"/>
      <fileset file="${jna.jar}"/>
      <fileset file="${mail.jar}"/>
      <fileset file="${mx4j.jar}"/>
      <fileset file="${mx4j-remote.jar}"/>
      <fileset file="${mx4j-tools.jar}"/>
      <fileset file="${protobuf-java.jar}"/>
      <fileset file="${slf4j-api.jar}"/>
      <fileset file="${slf4j-jdk14.jar}"/>
      <fileset file="${snappy.jar}"/>
      <fileset file="${spring-beans.jar}"/>
      <fileset file="${spring-core.jar}"/>
      <fileset file="${spring-context.jar}"/>
      <fileset file="${spring-shell.jar}"/>
      <fileset file="${spring-web.jar}"/>
      <fileset file="${xom.jar}"/>
    </copy>
    
    <conditional if="enable-bundlor">
    <conditional unless="disable-bundlor">
    <echo level="info" message="Using Bundlor to generate MANIFEST.MF with OSGi headers for antlr.jar..."/>
    <bundlor:bundlor inputPath="${antlr.jar}"
                     outputPath="${product.lib.dir}/${antlr.jar.name}"
                     bundleVersion="${antlr.version}">
      <property name="gemfire.osgi.version" value="${gemfire.osgi.version}"/>
      <manifestTemplate>
Bundle-Vendor: Pivotal Software, Inc.
Bundle-Classpath: .
Bundle-ManifestVersion: 2
Bundle-Name: ANTLR
Bundle-SymbolicName: com.gemstone.antlr
Bundle-Description: ANTLR bundle distributed with Pivotal GemFire
Import-Package: com.gemstone.gemfire.cache.query.internal;version="${gemfire.osgi.version}";resolution:=optional, com.gemstone.gemfire.cache.query.internal.index;version="${gemfire.osgi.version}";resolution:=optional, com.gemstone.gemfire.cache.query.internal.parse;version="${gemfire.osgi.version}";resolution:=optional, com.gemstone.gemfire.cache.query.internal.types;version="${gemfire.osgi.version}";resolution:=optional
      </manifestTemplate>
    </bundlor:bundlor>
    </conditional>
    </conditional>

    <jar jarfile="${product.lib.dir}/${gfsh-dependencies.jar.name}">
      <manifest>
        <attribute name="Class-Path" value="${gemfire.jar.name} ${gemfire-web.jar.name} ${antlr.jar.name} ${commons-io.jar.name} ${commons-logging.jar.name} ${jansi.jar.name} ${jline-s2.jar.name} ${jna.jar.name} ${spring-core.jar.name} ${spring-shell.jar.name} ${spring-web.jar.name} ${xom.jar.name}"/>
        <attribute name="GfshDependencies-Version" value="${gemfire.version}" />
      </manifest>
    </jar>

    <jar jarfile="${product.lib.dir}/${pulse-dependencies.jar.name}">
      <manifest>
        <attribute name="Class-Path"
                   value="${commons-logging.jar.name} ${spring-core.jar.name} ${jetty9-http.jar.name} ${jetty9-io.jar.name} ${jetty9-security.jar.name} ${jetty9-server.jar.name} ${jetty9-servlet.jar.name} ${jetty9-servlet-api.jar.name} ${jetty9-util.jar.name} ${jetty9-webapp.jar.name} ${jetty9-xml.jar.name}"/>
        <attribute name="PulseDependencies-Version"
                   value="${gemfire.version}" />
      </manifest>
    </jar>

    <jar jarfile="${product.lib.dir}/${locator-dependencies.jar.name}">
      <manifest>
        <attribute name="Class-Path" value="${gemfire.jar.name} ${antlr.jar.name} ${commons-cli.jar.name} ${commons-codec.jar.name} ${commons-configuration.jar.name} ${commons-io.jar.name} ${commons-lang.jar.name} ${commons-logging.jar.name} ${guava.jar.name} ${jsr305.jar.name} ${hadoop-annotations.jar.name} ${slf4j-api.jar.name} ${slf4j-jdk14.jar.name} ${hadoop-auth.jar.name} ${hadoop-common.jar.name} ${hadoop-hdfs.jar.name} ${hbase.jar.name} ${jackson.jar.name} ${jansi.jar.name} ${jline-s2.jar.name} ${jna.jar.name} ${snappy.jar.name} ${spring-core.jar.name} ${spring-shell.jar.name} ${jetty9-http.jar.name} ${jetty9-io.jar.name} ${jetty9-security.jar.name} ${jetty9-server.jar.name} ${jetty9-servlet.jar.name} ${jetty9-servlet-api.jar.name} ${jetty9-util.jar.name} ${jetty9-webapp.jar.name} ${jetty9-xml.jar.name} ${xom.jar.name} ${protobuf-java.jar.name}"/>
        <attribute name="LocatorDependencies-Version" value="${gemfire.version}" />
      </manifest>
    </jar>

    <jar jarfile="${product.lib.dir}/${server-dependencies.jar.name}">
      <manifest>
        <attribute name="Class-Path" value="${gemfire.jar.name} ${antlr.jar.name} ${commons-cli.jar.name} ${commons-codec.jar.name} ${commons-configuration.jar.name} ${commons-io.jar.name} ${commons-lang.jar.name} ${commons-logging.jar.name} ${guava.jar.name} ${jsr305.jar.name} ${hadoop-annotations.jar.name} ${slf4j-api.jar.name} ${slf4j-jdk14.jar.name} ${hadoop-auth.jar.name} ${hadoop-common.jar.name} ${hadoop-hdfs.jar.name} ${hbase.jar.name} ${jackson.jar.name} ${jansi.jar.name} ${jline-s2.jar.name} ${jna.jar.name} ${snappy.jar.name} ${spring-core.jar.name} ${spring-shell.jar.name} ${jetty9-http.jar.name} ${jetty9-io.jar.name} ${jetty9-security.jar.name} ${jetty9-server.jar.name} ${jetty9-servlet.jar.name} ${jetty9-servlet-api.jar.name} ${jetty9-util.jar.name} ${jetty9-webapp.jar.name} ${jetty9-xml.jar.name} ${xom.jar.name} ${protobuf-java.jar.name}"/>
        <attribute name="ServerDependencies-Version" value="${gemfire.version}" />
      </manifest>
    </jar>
  	
    <jar jarfile="${product.lib.dir}/${agent-dependencies.jar.name}">
      <manifest>
        <attribute name="Class-Path" value="${gemfire.jar.name} ${antlr.jar.name} ${commons-logging.jar.name} ${commons-modeler.jar.name} ${jna.jar.name} ${mail.jar.name} ${mx4j.jar.name} ${mx4j-remote.jar.name} ${mx4j-tools.jar.name}"/>
        <attribute name="AgentDependencies-Version" value="${gemfire.version}" />
      </manifest>
    </jar>

    <!-- DO NOT SHIP WITH THIS IN THE PRODUCT LIB -->
    <jar jarfile="${product.lib.dir}/${griddb-dependencies.jar.name}"> <manifest>
        <attribute name="Class-Path" value="${commons-cli.jar.name} ${commons-codec.jar.name} ${commons-configuration.jar.name} ${commons-io.jar.name} ${commons-lang.jar.name} ${commons-logging.jar.name} ${guava.jar.name} ${hadoop-auth.jar.name} ${hadoop-common.jar.name} ${hadoop-hdfs.jar.name} ${hbase.jar.name} ${jsr305.jar.name} ${hadoop-annotations.jar.name} ${protobuf-java.jar.name} ${slf4j-api.jar.name} ${slf4j-jdk14.jar.name}"/>
        <attribute name="GridDBDependencies-Version" value="${gemfire.version}" />
      </manifest>
    </jar>

    <echo level="info" message="begin: compile all classes using internal proprietary SUN APIs"/>

    <!-- begin: compile all classes using internal proprietary SUN APIs -->
    <javac executable="${javac.primary}/bin/javac" fork="yes"
           memoryMaximumSize="${max.memory}m"
           debug="on" deprecation="${compile-gemfire.deprecation}"
           destdir="${classes.dir}" includeAntRuntime="true" nowarn="off"
           optimize="off" srcdir="${src.dir}" verbose="off" listfiles="yes">
      <compilerarg value="-Werror"/>
      <compilerarg value="-XDignore.symbol.file"/>
      <include name="com/gemstone/gemfire/pdx/internal/unsafe/UnsafeWrapper.java"/>
      <include name="com/gemstone/gemfire/management/internal/cli/shell/unsafe/GfshSignalHandler.java"/>
      <include name="com/gemstone/gemfire/distributed/internal/unsafe/RegisterSignalHandlerSupport.java"/>
      <include name="com/gemstone/gemfire/internal/concurrent/unsafe/Unsafe*.java"/>
      <include name="com/gemstone/gemfire/internal/shared/unsafe/*Unsafe*.java"/>
    </javac>
    <!-- end: compile all classes using internal proprietary SUN APIs -->

    <echo level="info" message="begin: compile all other classes"/>

    <javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes"
           memoryMaximumSize="${max.memory}m" debug="on"
           deprecation="${compile-gemfire.deprecation}" destdir="${classes.dir}"
           includeAntRuntime="true" nowarn="off" optimize="off"
           srcdir="${src.dir}" verbose="off" encoding="UTF-8">
      <compilerarg value="-Werror"/>
      <include name="com/gemstone/gemfire/**/*.java"/>
      <include name="com/gemstone/java/**/*.java"/>
      <include name="com/gemstone/org/**/*.java"/>
      <exclude name="com/gemstone/**/doc-files/*.java"/>

      <!-- begin: include bp.edu.emory.mathcs.backport because it now references GemFire code -->
      <include name="com/gemstone/bp/**"/>
      <!-- end: include bp.edu.emory.mathcs.backport because it now references GemFire code -->

      <!-- begin: include gnu.trove because it now references GemFire code -->
      <!-- Compile at least TFloatArrayList explicitly since is used in tests -->
      <include name="com/gemstone/gnu/trove/TFloatArrayList.java"/>
      <!-- Compile TLongArrayList explicitly for GemFireXD -->
      <include name="com/gemstone/gnu/trove/TLongArrayList.java"/>
      <include name="com/gemstone/gnu/trove/TIntIntHashMap.java"/>
      <include name="com/gemstone/gnu/trove/THashMap.java"/>
      <include name="com/gemstone/gnu/trove/PrimeFinder.java"/>
      <include name="com/gemstone/gnu/trove/TIntArrayList.java"/>
      <include name="com/gemstone/gnu/trove/TLongObjectHashMap.java"/>
      <include name="com/gemstone/gnu/trove/TLongHashSet.java"/>
      <include name="com/gemstone/gnu/trove/TLongObjectIterator.java"/>
      <include name="com/gemstone/gnu/trove/TLongIntHashMap.java"/>
      <include name="com/gemstone/gnu/trove/TObjectHash.java"/>
      <include name="com/gemstone/gnu/trove/TObjectLongHashMap.java"/>
      <include name="com/gemstone/gnu/trove/TObjectHashIterator.java"/>

      <!-- end: include gnu.trove because it now references GemFire code -->

      <!-- begin: include org.jgroups because it references GemFire code -->
      <include name="com/gemstone/org/jgroups/**"/>
      <exclude name="com/gemstone/org/jgroups/**/obsolete/**"/>
      <!-- end: include org.jgroups because it references GemFire code -->

      <!-- Requires JDK 1.4 to compile
      <exclude name="com/gemstone/org/jgroups/**/*1_4*"/>
      -->

      <!-- begin: exclude all classes using internal proprietary SUN APIs -->
      <exclude name="com/gemstone/gemfire/pdx/internal/unsafe/UnsafeWrapper.java"/>
      <exclude name="com/gemstone/gemfire/management/internal/cli/shell/unsafe/GfshSignalHandler.java"/>
      <exclude name="com/gemstone/gemfire/distributed/internal/unsafe/RegisterSignalHandlerSupport.java"/>
      <exclude name="com/gemstone/gemfire/internal/concurrent/unsafe/Unsafe*.java"/>
      <exclude name="com/gemstone/gemfire/internal/shared/unsafe/*Unsafe*.java"/>
      <!-- end: exclude all classes using internal proprietary SUN APIs -->

      <!-- Need to exclude the GemFire Management and Monitoring REST API classes; these classes will be packaged
           in the 'gemfire' web application WAR file (WEB-INF/classes) dir -->
      <exclude name="com/gemstone/gemfire/management/internal/web/**/*.java"/>

      <classpath>
        <pathelement location="${commons-cli.jar}"/>
        <pathelement location="${commons-codec.jar}"/>
        <pathelement location="${commons-configuration.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="${commons-modeler.jar}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${guava.jar}"/>
        <pathelement location="${jsr305.jar}"/>
        <pathelement location="${hadoop-annotations.jar}"/>
        <pathelement location="${hadoop-auth.jar}"/>
        <pathelement location="${hadoop-common.jar}"/>
        <pathelement location="${hadoop-hdfs.jar}"/>
        <pathelement location="${hadoop-mapreduce-client-core.jar}"/>
        <pathelement location="${hbase.jar}"/>
        <pathelement location="${jackson.jar}"/>
        <pathelement location="${jetty9-http.jar}"/>
        <pathelement location="${jetty9-io.jar}"/>
        <pathelement location="${jetty9-security.jar}"/>
        <pathelement location="${jetty9-server.jar}"/>
        <pathelement location="${jetty9-servlet.jar}"/>
        <pathelement location="${jetty9-servlet-api.jar}"/>
        <pathelement location="${jetty9-util.jar}"/>
        <pathelement location="${jetty9-webapp.jar}"/>
        <pathelement location="${jetty9-xml.jar}"/>
        <pathelement location="${jna.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${mx4j.jar}"/>
        <pathelement location="${mx4j-remote.jar}"/>
        <pathelement location="${mx4j-tools.jar}"/>
        <pathelement location="${protobuf-java.jar}"/>
        <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gfsh-dependencies.jar.name}"/>
        <pathelement location="${product.lib.dir}/${pulse-dependencies.jar.name}"/>
        <pathelement location="${slf4j-api.jar}"/>
        <pathelement location="${slf4j-jdk14.jar}"/>
        <pathelement location="${snappy.jar}"/>
        <pathelement location="${spring-aop}"/>
        <pathelement location="${spring-aspects.jar}"/>
        <pathelement location="${spring-beans.jar}"/>
        <pathelement location="${spring-context.jar}"/>
        <pathelement location="${spring-context-support.jar}"/>
        <pathelement location="${spring-core.jar}"/>
        <pathelement location="${spring-expression.jar}"/>
        <pathelement location="${spring-shell.jar}"/>
        <pathelement location="${spring-web.jar}"/>
        <pathelement location="${spring-web-servlet.jar}"/>
        <pathelement location="${xom.jar}"/>      
      </classpath>
    </javac>

    <!-- Copy DTDs and other files for gemfire.jar -->
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}">
        <include name="com/gemstone/gemfire/**/mbeans-descriptors.xml"/>
        <include name="com/gemstone/gemfire/**/*-stats.xml"/>
        <include name="com/gemstone/gemfire/admin/doc-files/ds5_0.dtd"/>
        <include name="com/gemstone/gemfire/statisticsType.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache3_0.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache4_0.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache4_1.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache5_0.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache5_1.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache5_5.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache5_7.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache5_8.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache6_0.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache6_1.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache6_5.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache6_6.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache7_0.dtd"/>
        <include name="com/gemstone/gemfire/cache/doc-files/cache7_5.dtd"/>
        <include name="com/gemstone/gemfire/**/*.properties"/>
        <include name="com/gemstone/gemfire/internal/publickey.ser"/>
        <include name="com/gemstone/gemfire/internal/privatekey.ser"/>
        <include name="com/gemstone/gemfire/distributed/internal/MessageQueue.xml"/>
        <include name="com/gemstone/gemfire/distributed/internal/javagroups*.txt"/>
        <!-- see bug 42751 for why the resource files are excluded -->
        <exclude name="com/gemstone/gemfire/internal/i18n/StringIdResourceBundle_*.txt"/>
        <include name="com/gemstone/gemfire/internal/gui/**/*.gif"/>
        <include name="com/gemstone/gemfire/internal/gui/**/*.jpg"/>
        <include name="com/gemstone/gemfire/internal/gui/**/*.txt"/>
        <include name="com/gemstone/gemfire/internal/gui/**/*.html"/>
        <include name="com/gemstone/gemfire/internal/gui/**/*.properties"/>
        <include name="com/gemstone/org/jgroups/conf/*.xml"/>
        <include name="com/gemstone/org/jgroups/conf/*.dtd"/>
        <include name="com/gemstone/gemfire/admin/jmx/internal/doc-files/mbeans-descriptors.dtd"/>
        <include name="com/gemstone/gemfire/management/internal/cli/commands/support/gfmon.html"/>

        <!-- need to explicitly set the logging implementation for commons-logging -->
        <include name="commons-logging.properties"/>
      </fileset>
    </copy>

    <copy file="${src.dir}/com/gemstone/gemfire/cache/doc-files/cache5_7.dtd" preservelastmodified="true" tofile="${classes.dir}/com/gemstone/gemfire/cache/doc-files/cache5_7.dtd"/>

    <echo level="info" message="copy EULA and open_source"/>
    <copy file="${basedir}/release/3rdparty_licenses/open_source_licenses-VMware_vFabric_GemFire_7.0.1.txt" todir="${classes.dir}"/>
    <copy file="${basedir}/release/installer/Pivotal_EULA.txt" tofile="${classes.dir}/EULA.txt"/>

    <!-- Make the text version the JavaGroups magic number file -->
    <java classname="com.gemstone.org.jgroups.conf.MagicNumberReader" failonerror="true" fork="true" output="${classes.dir}/com/gemstone/org/jgroups/conf/jg-magic-map.txt" logError="true">
      <classpath>
        <pathelement path="${classes.dir}"/>
      </classpath>
      <arg line="${src.dir}/com/gemstone/org/jgroups/conf/jg-magic-map.xml"/>
    </java>

    <antcall target="-remove-managed-entity-controller"/>
  </target>
    
  <target if="disable-managed-entity-controller" name="-remove-managed-entity-controller">
    <!-- remove functional ManagedEntityController for bug #47909 -->
    <delete>
      <fileset dir="${classes.dir}" includes="**/EnabledManagedEntityController.class"/>
    </delete>
  </target>

  <target name="build-templates" depends="props">
    <macrodef name="template-module">
      <attribute name="module" default="NOT SET"/>
      <attribute name="target" default="jar"/>
      <attribute name="destination" default="${osbuild.dir}/templates"/>
      <sequential>
        <exec executable="${ant.home}/bin/ant${bat}" dir="${templates.dir}/@{module}" failonerror="true">
          <env key="JAVA_HOME" value="${javac.primary}"/>
          <arg value="${ant.noconfig.arg}"/>
          <arg value="@{target}"/>
          <arg value="-Dgemfire.artifacts=@{destination}"/>
          <arg value="-Dgemfire.jar=${product.lib.dir}/${gemfire.jar.name}"/>
        </exec>
      </sequential>
    </macrodef>
    <template-module module="security" destination="${templates.classes.dir}"/>
    <copy file="${templates.classes.dir}/${gfSecurityImpl.jar.name}" todir="${product.lib.dir}"/>
  </target>

  <target name="-versioned-props" depends="props">
    <property name="versioned.root" value="${gcm.dir}/where/gemfireXD/releases"/>
    <!-- define default osbuild.dirs for all the test versions
         property names must follow the convention osbuild.dir.<directory name>
      -->
    <property name="osbuild.dir.tests100"
              value="${versioned.root}/GemFireXD1.0.0-all"/>
    <property name="osbuild.dir.tests130"
              value="${versioned.root}/GemFireXD1.3.0-all/Linux"/>
    <property name="osbuild.dir.tests131"
              value="${versioned.root}/GemFireXD1.3.1-all/Linux"/>
  </target>

  <target name="-compile-versioned-tests" depends="-versioned-props">
    <subant genericantfile="${basedir}/buildfiles/versionedTests.xml"
            inheritall="true"
            failonerror="true">
      <dirset dir="." includes="tests*" excludes="tests"/>
    </subant>
  </target>

  <target name="clean-versioned-tests" depends="props">
    <subant genericantfile="${basedir}/buildfiles/versionedTests.xml"
            inheritall="true"
            failonerror="true"
            target="-clean-tests">
      <dirset dir="." includes="tests*" excludes="tests"/>
    </subant>
  </target>

  <target name="compile-tests" 
          depends="-compile-current-tests,-compile-versioned-tests,-compile-memcached"
          description="Compiles all the test code for GemFire"/>

  <!-- Compiles the test code for the current GemFire being developed -->
  <target name="-compile-current-tests" depends="props">
    <description>Compiles the GemFire test code and creates the tests
        jar.  It does not build any GemFire product code.</description>

    <mkdir dir="${tests.classes.dir}"/>
    <mkdir dir="${generated.tests.src.dir}"/>
    <!-- Copy junit.jar into test classes directory -->
    <copy file="${junit.jar}" todir="${tests.classes.dir}"/>

    <copy todir="${osbuild.dir}/SwarmWebContent">
      <fileset dir="${basedir}/tests/swarm/WebContent">
        <include name="*.css"/>
        <include name="*.jsp"/>
        <include name="*.html"/>
        <include name="*.js"/>
        <include name="*.png"/>
        <include name="*.jpg"/>
      </fileset>
    </copy>

    <!-- Copy template artifacts into classes directory -->
    <copy todir="${tests.classes.dir}/lib" file="${templates.dir}/security/authz5_5.dtd"/>
    <copy todir="${tests.classes.dir}/lib" file="${templates.dir}/security/authz6_0.dtd"/>
    <copy todir="${tests.classes.dir}">
      <fileset dir="${templates.classes.dir}"/>
      <fileset dir="${tests.src.dir}">
        <include name="util/ssh/keystore"/>
      </fileset>
    </copy>

    <!-- test source files must be compiled as UTF-8 encoding. There are query tests that test field names with unicode chars in them -->
    <javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes"
           memoryMaximumSize="${max.memory}m" debug="on" deprecation="off"
           destdir="${tests.classes.dir}" includeAntRuntime="true"
           nowarn="off" optimize="off" encoding="UTF-8">
      <compilerarg value="-XDignore.symbol.file"/>

      <src path="${tests.src.dir}"/>
      <src path="${generated.tests.src.dir}"/>

      <exclude name="**/BshServlet.java"/>
      <exclude name="hydra/gemfirexd/**"/>
      <exclude name="hydraconfig/gemfirexd/**"/>
      <exclude name="hydratest/version/gemfirexd/**"/>
      <exclude name="sql/**"/>
      <exclude name="gfxdperf/**"/>
      <exclude name="cacheperf/comparisons/gemfirexd/**"/>
      <exclude name="cacheperf/poc/hitachi/**"/>
      <exclude name="objects/query/largeobject/**"/>
      <exclude name="objects/query/sector/**"/>

      <include name="**/*.java"/>

      <!-- required to be handled by the compile-proprietary-tests target -->
      <exclude name="cacheperf/poc/citi/*.java"/>

      <!-- this test is obsolete?? it does not compile -->
      <exclude name="com/gemstone/gemfire/internal/jta/ManagedPoolCacheTest.java"/>

      <!-- @todo quarantine begin -->
      <exclude name="com/gemstone/gemfire/internal/cache/CapacityMaintainerImpl.java"/>
      <exclude name="cacheperf/comparisons/queryScalability/**"/>
      <!-- @todo quarantine end -->
      <!-- as of 3.5.1 *LRUEntriesMap* no longer exists -->
      <exclude name="com/gemstone/gemfire/internal/cache/UnsharedLRUEntriesMapTestHelper.java"/>
      <!-- TODO refactor this classpath to use a classpath REF defined in tests.xml -->
      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${bcel.jar}"/>
        <pathelement location="${commons-cli.jar}"/>
        <pathelement location="${commons-codec.jar}"/>
        <pathelement location="${commons-configuration.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${cglib-nodep.jar}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${guava.jar}"/>
        <pathelement location="${jsr305.jar}"/>
        <pathelement location="${hadoop-annotations.jar}"/>
        <pathelement location="${hadoop-auth.jar}"/>
        <pathelement location="${hadoop-common.jar}"/>
        <pathelement location="${hadoop-common-test.jar}"/>
        <pathelement location="${hadoop-hdfs.jar}"/>
        <pathelement location="${hadoop-hdfs-test.jar}"/>
        <pathelement location="${hadoop-mapreduce-client-core.jar}"/>
        <pathelement location="${hamcrest-core.jar}"/>
        <pathelement location="${hamcrest-library.jar}"/>
        <pathelement location="${hbase.jar}"/>
        <pathelement location="${hidden.dir}/quickstart/classes"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <path refid="jetty.classpath"/>
        <pathelement location="${jmock.jar}"/>
        <pathelement location="${jmock-legacy.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${multithreadedTC.jar}"/>
        <pathelement location="${mx4j.jar}"/>
        <pathelement location="${mx4j-remote.jar}"/>
        <pathelement location="${mx4j-tools.jar}"/>
        <pathelement location="${objenesis.jar}"/>
        <pathelement location="${oracle.jdbc.jar}"/>
        <pathelement location="${osbuild.dir}/examples/dist/classes"/>
        <pathelement location="${osgi.core.jar}"/>
        <pathelement location="${product.dir}/examples/dist/classes"/>
        <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${jna.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gfsh-dependencies.jar.name}"/>
        <pathelement location="${product.lib.dir}/${pulse-dependencies.jar.name}"/>
        <pathelement location="${protobuf-java.jar}"/>
        <pathelement location="${slf4j-api.jar}"/>
        <pathelement location="${slf4j-jdk14.jar}"/>
        <pathelement location="${snappy.jar}"/>
        <pathelement location="${spring-aop.jar}"/>
        <pathelement location="${spring-aspects.jar}"/>
        <pathelement location="${spring-beans.jar}"/>
        <pathelement location="${spring-context.jar}"/>
        <pathelement location="${spring-context-support.jar}"/>
        <pathelement location="${spring-core.jar}"/>
        <pathelement location="${spring-expression.jar}"/>
        <pathelement location="${spring-shell.jar}"/>
        <pathelement location="${spring-test.jar}"/>
        <pathelement location="${spring-web-servlet.jar}"/>
        <pathelement location="${spymemcached-client.jar}"/>
        <pathelement location="${tests.lib.dir}/${dom4j.jar.name}"/>
        <pathelement location="${tests.lib.dir}/${jdom.jar.name}"/>
        <pathelement location="${tests.lib.dir}/${vijava.jar.name}"/>
        <pathelement location="${xom.jar}"/>
      </classpath>
    </javac>

    <!-- Compile alternate versions of classes for PDX testing -->
    <mkdir dir="${versionBase.out.dir}"/>

    <!-- Compile version 1 tests -->
    <mkdir dir="${version1.tests.out.dir}"/>
    <javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes"
           memoryMaximumSize="${max.memory}m" debug="on" deprecation="off"
           destdir="${version1.tests.out.dir}" includeAntRuntime="true"
           nowarn="off" optimize="off" encoding="UTF-8">
      <compilerarg value="-XDignore.symbol.file"/>
      <src path="${basedir}/testsVersions/version1"/>
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${hidden.dir}/quickstart/classes"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <path refid="jetty.classpath"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${mx4j.jar}"/>
        <pathelement location="${mx4j-remote.jar}"/>
        <pathelement location="${mx4j-tools.jar}"/>
        <pathelement location="${oracle.jdbc.jar}"/>
        <pathelement location="${osbuild.dir}/examples/dist/classes"/>
        <pathelement location="${product.dir}/examples/dist/classes"/>
        <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${jna.jar.name}"/>
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${tests.src.dir}/lib/${jdom.jar.name}"/>
      </classpath>
    </javac>

    <!-- Compile version 2 tests -->
    <mkdir dir="${version2.tests.out.dir}"/>
    <javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes"
           memoryMaximumSize="${max.memory}m" debug="on" deprecation="off"
           destdir="${version2.tests.out.dir}" includeAntRuntime="true"
           nowarn="off" optimize="off" encoding="UTF-8">
      <compilerarg value="-XDignore.symbol.file"/>
      <src path="${basedir}/testsVersions/version2"/>
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${hidden.dir}/quickstart/classes"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <path refid="jetty.classpath"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${mx4j.jar}"/>
        <pathelement location="${mx4j-remote.jar}"/>
        <pathelement location="${mx4j-tools.jar}"/>
        <pathelement location="${oracle.jdbc.jar}"/>
        <pathelement location="${osbuild.dir}/examples/dist/classes"/>
        <pathelement location="${product.dir}/examples/dist/classes"/>
        <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${jna.jar.name}"/>
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${tests.src.dir}/lib/${jdom.jar.name}"/>
      </classpath>
    </javac>

    <!-- Create jars -->
    <echo message="deleting jars ${extraJars.dir}/*.jar" level="info"/>
    <delete dir="${extraJars.dir}" quiet="true"/>
    <mkdir dir="${extraJars.dir}"/>
    <jar destfile="${extraJars.dir}/CliHelper.jar"
         basedir="${tests.out.dir}/classes"
         includes="management/test/cli/CliHelperFunction.class"/>
    <jar destfile="${extraJars.dir}/jar1.jar"
         basedir="${version1.tests.out.dir}"
         includes="util/ValueHolder1.class cli/DeployFcn1.class"/>
    <jar destfile="${extraJars.dir}/jar2.jar"
         basedir="${version1.tests.out.dir}"
         includes="util/ValueHolder1.class util/ValueHolder2.class cli/DeployFcn1.class cli/DeployFcn2.class"/>
    <jar destfile="${extraJars.dir}/jar3.jar"
         basedir="${version2.tests.out.dir}"
         includes="cli/DeployFcn1.class"/>
    <jar destfile="${extraJars.dir}/jar3.jar"
         basedir="${version1.tests.out.dir}"
         update="true"
         includes="util/ValueHolder1.class"/>
    <jar destfile="${extraJars.dir}/mapreduce.jar">
         <fileset dir="${tests.out.dir}/classes">
           <include name="hydra/*.class"/>
           <include name="util/*.class"/>
           <include name="hdfs/mapreduce/*.class"/>
           <include name="sql/hdfs/mapreduce/*.class"/>
         </fileset>
    </jar>     

    <!-- Compile these classes specially -->
    <mkdir dir="${tests.out.dir}/other"/>

    <!-- Run rmic on IFs -->
    <rmic base="${tests.classes.dir}" classname="hydra.GemFireLocatorAgent"/>
    <rmic base="${tests.classes.dir}" classname="hydra.HostAgent"/>
    <rmic base="${tests.classes.dir}" classname="hydra.MasterProxy"/>
    <rmic base="${tests.classes.dir}" classname="hydra.BootstrapperProxy"/>
    <rmic base="${tests.classes.dir}" classname="hydra.RemoteTestModule"/>
    <rmic base="${tests.classes.dir}" classname="hydra.blackboard.RmiSharedCountersImpl"/>
    <rmic base="${tests.classes.dir}" classname="hydra.blackboard.RmiSharedLockImpl"/>
    <rmic base="${tests.classes.dir}" classname="hydra.blackboard.RmiSharedMapImpl"/>
    <rmic base="${tests.classes.dir}" classname="perffmwk.RemotePerfStatMgrImpl"/>
<!-- @todo quarantine
    <rmic classname="com.gemstone.gemfire.internal.cache.distribution.RMIMessagingPerf$MessageHolderImpl" classpath="${classes.dir}" base="${tests.classes.dir}"/>
-->
    <rmic base="${tests.classes.dir}"
          classname="hydra.training.RemoteBlockingQueueImpl">
      <classpath>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
      </classpath>
    </rmic>

    <!-- Copy some files -->
    <copy todir="${tests.classes.dir}">
      <fileset dir="${tests.src.dir}">
        <include name="lib/${jdom.jar.name}"/>
        <include name="lib/*.dll"/>
        <include name="lib/*.xml"/>
        <include name="lib/**/publickeyfile"/>
        <include name="sendsigbreak/*.exe"/>
        <include name="xform/schema/classes.dtd"/>
        <include name="com/gemstone/gemfire/xml-files/*.xml"/>
        <include name="com/gemstone/gemfire/xml-files/*.dtd"/>
        <include name="com/gemstone/gemfire/cache30/**/*.xml"/>
        <include name="com/gemstone/gemfire/internal/cache/*.xml"/>
        <include name="com/gemstone/gemfire/cache/client/*.xml"/>
        <include name="com/gemstone/gemfire/internal/cache/tier/sockets/*.xml"/>
        <include name="com/gemstone/gemfire/internal/cache/57GatewayQueue.zip"/>
        <include name="com/gemstone/gemfire/internal/cache/corruptHTree.zip"/>
        <include name="com/gemstone/gemfire/cache/query/data/*.txt"/>
        <include name="com/gemstone/gemfire/cache/query/**/*.xml"/>
        <include name="com/gemstone/gemfire/pdx/jsonStrings/*.txt"/>
        <include name="com/gemstone/gemfire/pdx/jsonStrings/unquoteJsonStrings/*.txt"/>
        <include name="regions/validate/*.xml"/>
        <include name="cacheServer/*.xml"/>
        <include name="regions/validate/*.xml"/>
        <include name="cacheServer/*.xml"/>
        <include name="query/**/*.xml"/>
        <include name="query/**/*.csv"/>
        <include name="cacheperf/gemfire/dataPolicy/*.xml"/>
        <include name="cacheperf/poc/citi2/run.sh"/>

        <include name="hct/brserver*.xml"/>
        <include name="hct/parRegServer*.xml"/>
        <include name="hct/jpmc*.xml"/>
        <include name="hyperictest/*.xml"/>
        <include name="hyperictest/lib/*.jar"/>
        <include name="hyperictest/config/*.properties"/>
        <include name="jta/*.xml"/>
        <include name="junit/runner/excluded.properties"/>
        <include name="**/*.bt"/>
        <include name="**/*.conf"/>
        <include name="**/*.inc"/>
        <include name="**/*.prop"/>
        <include name="**/*.spec"/>
        <include name="**/*.gold"/>
        <include name="**/*.properties"/>
        <include name="**/*.keystore"/>
        <include name="**/*.ts"/>
        <include name="**/*.pl"/>
        <include name="hydra/*.sh"/>
        <include name="hydra/hadoop/conf/*.cfg"/>
        <include name="hydra/hadoop/conf/*.properties"/>
        <include name="hydra/hadoop/conf/*.xml"/>
        <include name="hydra/hadoop/conf/*.xsl"/>
        <include name="hydratest/hydracheck/*.sh"/>
        <include name="hydratest/reboot/*.txt"/>
        <include name="wan/ml/data/*.*"/>
        <include name="bin/testManagerLogWriter.sh"/>
        <include name="bin/scaleperf/cleandirs"/>
        <include name="bin/scaleperf/compareperf.sh"/>
        <include name="bin/scaleperf/dfs"/>
        <include name="bin/scaleperf/frees"/>
        <include name="bin/scaleperf/genvsd"/>
        <include name="bin/scaleperf/killpids"/>
        <include name="bin/scaleperf/listhosts"/>
        <include name="bin/scaleperf/lsdirs"/>
        <include name="bin/scaleperf/pids"/>
        <include name="bin/scaleperf/run.sh"/>
        <include name="bin/scaleperf/uptimes"/>
        <include name="bin/scaleperf/whopids"/>
        <include name="largeScale/newedge/gemfire-server.xml.template"/>
        <include name="largeScale/newedge/gemfire-client.xml.template"/>
        <include name="**/*.gfs"/>
        <include name="regression/functionalTestList.xml"/>
        <include name="regression/gfxdFunctionalTestList.xml"/>
       </fileset>
    </copy>
    <chmod file="${tests.classes.dir}/hydratest/hydracheck/*.sh" perm="a+x"/>
    <chmod file="${tests.classes.dir}/lib/*.dll" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/testManagerLogWriter.sh" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/cleandirs" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/compareperf.sh" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/dfs" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/frees" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/genvsd" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/killpids" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/listhosts" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/lsdirs" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/pids" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/run.sh" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/uptimes" perm="a+x"/>
    <chmod file="${tests.classes.dir}/bin/scaleperf/whopids" perm="a+x"/>
    <chmod file="${tests.classes.dir}/cacheperf/poc/citi2/run.sh" perm="a+x"/>

    <!-- build object sizing agent -->
    <mkdir dir="${tests.jar.dir}"/>
    <jar destfile="${tests.jar.dir}/sizeagent.jar">
        <fileset dir="${classes.dir}" includes="com/gemstone/gemfire/internal/size/InstrumentationSingleObjectSizer.class"/>
        <manifest>
            <attribute name="Premain-Class" value="com.gemstone.gemfire.internal.size.InstrumentationSingleObjectSizer"/>
        </manifest>
    </jar>
    <jar destfile="${tests.jar.dir}/sequencediagram.jar">
        <manifest>
            <attribute name="Main-Class" value="com.gemstone.sequence.gemfire.GemfireSequenceDisplay"/>
            <attribute name="Class-Path" value="${product.lib.dir}/${gemfire.jar.name}"/>
        </manifest>
        <fileset dir="${classes.dir}" includes="com/gemstone/gemfire/internal/sequencelog/**"/>
        <fileset dir="${tests.classes.dir}" includes="com/gemstone/sequence/**"/>
    </jar>

    <!-- build ssh jar -->
    <jar destfile="${tests.jar.dir}/ssh.jar">
       <fileset dir="${tests.classes.dir}" includes="util/ssh/*.class"/>
       <manifest>
          <attribute name="Main-Class" value="util.ssh.SSHD"/>
       </manifest>
    </jar>

    <copy todir="${tests.jar.dir}/faultyDiskXMLsForTesting">
      <fileset dir="${tests.lib.dir}/faultyDiskXMLsForTesting">
          <include name="*.xml"/>
      </fileset>
    </copy>

    <!-- Copy jars required for VI Java APIs -->
    <copy file="${tests.lib.dir}/${dom4j.jar.name}" todir="${tests.jar.dir}"/>
    <copy file="${tests.lib.dir}/${vijava.jar.name}" todir="${tests.jar.dir}"/>

    <!-- Connection pool jars -->
    <copy file="${tests.lib.dir}/c3p0-0.9.5-pre6.jar" todir="${tests.jar.dir}"/>
    <copy file="${tests.lib.dir}/mchange-commons-java-0.2.6.3.jar" todir="${tests.jar.dir}"/>
    <copy file="${tests.lib.dir}/commons-dbcp-1.4.jar" todir="${tests.jar.dir}"/>
    <copy file="${tests.lib.dir}/commons-pool-1.4.jar" todir="${tests.jar.dir}"/>
    <!-- tomcat version 7.0.52 -->
    <copy file="${tests.lib.dir}/tomcat-jdbc.jar" todir="${tests.jar.dir}"/>
    <copy file="${tests.lib.dir}/tomcat-juli.jar" todir="${tests.jar.dir}"/>

  </target>

  <!-- Compiles the test code for the current GemFire being developed -->
  <target name="compile-proprietary-tests" depends="compile-tests">
    <description>Compiles GemFire test code that relies on confidential customer code </description>
    <!-- Copy citi poc jar into test classes directory -->
    <copy file="${citi-rdsmodel.jar}" todir="${tests.classes.dir}"/>
    <javac executable="${javac.primary}/bin/javac" fork="yes"
           memoryMaximumSize="${max.memory}m" debug="on" deprecation="off"
           destdir="${tests.classes.dir}" includeAntRuntime="true"
           nowarn="off" optimize="off" encoding="UTF-8">
      <compilerarg value="-XDignore.symbol.file"/>
      <src path="${tests.src.dir}"/>
      <include name="cacheperf/poc/citi/*.java"/>
      <classpath>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${jna.jar.name}"/>
        <!-- citi poc jar -->
        <pathelement location="${tests.classes.dir}/${citi-rdsmodel.jar.name}"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-memcached" depends="props" if="hydraExt.memcached.dir">
    <description>
      Optionally compiles the test code for the memcached module
      This module must be checked out:
      https://svn.gemstone.com/repos/utilities/trunk/hydraExt
      And the ant property -DhydraExt.memcached.dir="path to checkout"
    </description>
    <subant failonerror="true">
      <property name="javac.primary" value="${javac.primary}"/>
      <property name="javac.secondary" value="${javac.secondary}"/>
      <property name="tests.classes.dir" value="${tests.classes.dir}"/>
      <property name="product.dir" value="${product.dir}"/>
      <fileset dir="${hydraExt.memcached.dir}" includes="build.xml"/>
    </subant>
  </target>

  <!-- test-env is for debugging only, echoes all enviroment variables -->
  <target name="test-env">
    <exec executable="bash" osfamily="unix">
      <arg value="-c"/>
      <arg value="set"/>
    </exec>
    <exec executable="cmd.exe" osfamily="windows">
      <arg value="/c"/>
      <arg value="set"/>
    </exec>
  </target>

  <target name="tests" depends="props, src, compile-tests">
    <description>Builds the GemFire src along with the GemFire tests</description>
  </target>

  <target name="rebuild-gemfire" depends="src">
    <description>Rebuilds gemfire.jar and packs it into product tree</description>
  </target>

  <macrodef name="generateVersionResourceFile">
    <attribute name="resourcepath" default="NOT SET"/>
    <attribute name="resourcefile" default="NOT SET"/>
    <attribute name="productname" default="NOT SET"/>
    <attribute name="productversion" default="NOT SET"/>
    <attribute name="gemfireversion" default="NOT SET"/>
    <attribute name="classesdir" default="NOT SET"/>
    <sequential>
      <echo level="info" message="Generating version resource file @{resourcepath}/@{resourcefile}"/>
      <property file="${build.dir}/${last.update.file}"/> <!-- load property file to define source.date property -->
      <!--property name="version.resource.file" value="@{classesdir}/@{resourcepath}/@{resourcefile}"/-->
      <mkdir dir="@{classesdir}/@{resourcepath}"/>
      <!--delete file="${version.resource.file}" quiet="true"/-->
      <!--propertyfile file="${version.resource.file}" comment="Properties that control what version @{productname} will think it is. Changing these values may cause @{productname} to no longer function."-->
      <delete file="@{classesdir}/@{resourcepath}/@{resourcefile}" quiet="true"/>
      <propertyfile file="@{classesdir}/@{resourcepath}/@{resourcefile}" comment="Properties that control what version @{productname} will think it is. Changing these values may cause @{productname} to no longer function.">
          <entry key="Product-Name" value="@{productname}"/>
          <entry key="Product-Version" value="@{productversion}"/>
          <entry key="Build-Id" value="${user.name} ${build.number}"/>
          <entry key="Build-Date" value="${build.time}"/>
          <entry key="Build-Platform" value="${os.name} ${os.version} ${os.arch}"/>
          <entry key="Build-Java-Version" value="${javac.primary.version}"/>
          <entry key="Source-Date" value="${source.date}"/>
          <entry key="Source-Revision" value="${source.revision}"/>
          <entry key="Source-Repository" value="${source.branch}"/>
      </propertyfile>
      <condition property="needs-gemfireversion" value="1">
          <not> <equals arg1="@{gemfireversion}" arg2="NOT SET"/> </not>
      </condition>
      <conditional if="needs-gemfireversion">
          <propertyfile file="@{classesdir}/@{resourcepath}/@{resourcefile}" comment="Underlying GemFire version property for @{productname}. Changing this values may cause @{productname} to no longer function.">
              <entry key="GemFire-Version" value="@{gemfireversion}"/>
          </propertyfile>
      </conditional>
    </sequential>
  </macrodef>

  <target name="build-gemfire" depends="props, compile-gemfire">
    <description>Builds gemfire.jar</description>

    <!-- Make the manifest -->
    <property file="${build.dir}/build.number"/>

    <mkdir dir="${build.dir}"/>

    <conditional if="enable-bundlor">
    <conditional unless="disable-bundlor">
    <echo level="info" message="Using Bundlor to generate MANIFEST.MF with OSGi headers for gemfire.jar (this may take a few minutes)..."/>
    <!-- Update com.gemstone.gemfire.internal.SimpleOsgiJUnitTest to match changes here -->
    <bundlor:bundlor inputPath="${classes.dir}"
                     outputPath="${classes.dir}"
                     bundleVersion="${gemfire.osgi.version}">
      <manifestTemplate>
Built-By: Pivotal Software, Inc.
Main-Class: com.gemstone.gemfire.internal.GemFireVersion
Bundle-Vendor: Pivotal Software, Inc.
Bundle-Classpath: .
Bundle-ManifestVersion: 2
Bundle-Name: GemFire
Bundle-SymbolicName: com.gemstone.gemfire;singleton:=true;fragment-attachment:=always
Bundle-Description: Pivotal GemFire bundle
Excluded-Exports: javax.*, com.gemstone.gnu.*, com.gemstone.java.*, com.gemstone.joptsimple.*, com.gemstone.org.*, com.gemstone.gemfire.admin.internal.*, com.gemstone.gemfire.admin.jmx.internal.*, com.gemstone.gemfire.cache.asyncqueue.internal.*, com.gemstone.gemfire.cache.client.internal.*, com.gemstone.gemfire.cache.execute.internal.*, com.gemstone.gemfire.cache.hdfs.internal.*, com.gemstone.gemfire.cache.server.internal.*, com.gemstone.gemfire.distributed.internal.*, com.gemstone.gemfire.internal.*, com.gemstone.gemfire.management.internal.*, com.gemstone.gemfire.pdx.internal.*
Excluded-Imports: com.gemstone.gemfire.internal, com.gemstone.gemfire.management.internal.*
Import-Template: antlr.*;version="[2.7.4, 2.7.5)";resolution:=optional, javax.*;resolution:=optional, jline*;resolution:=optional, mx4j.*;resolution:=optional, org.apache.catalina.*;resolution:=optional, org.apache.commons.io*;resolution:=optional, org.apache.commons.lang;resolution:=optional, org.apache.commons.modeler;resolution:=optional, org.slf4j.*;resolution:=optional, org.apache.hadoop.*;resolution:=optional, org.apache.tomcat.*;resolution:=optional, org.apache.tools.ant;resolution:=optional, org.codehaus.jackson.*;resolution:=optional, org.mortbay.*;resolution:=optional, org.springframework*;resolution:=optional, org.w3c.dom*;resolution:=optional, org.xerial.snappy.*;resolution:=optional, nu.xom.*;resolution:=optional, org.xml.sax*;resolution:=optional, com.sun.tools.attach;resolution:=optional, com.sun.jna*;resolution:=optional, org.apache.commons.cli.*;resolution:=optional, org.apache.commons.codec.*;resolution:=optional, com.google.protobuf.*;resolution:=optional, com.pivotal.org.apache.hadoop.*;resolution:=optional, com.google.common.util.*;resolution:=optional, org.slf4j.*;resolution:=optional
    </manifestTemplate>
  </bundlor:bundlor>
  </conditional>
  </conditional>

  <conditional if="enable-bundlor">
  <conditional unless="disable-bundlor">
  <echo level="info" message="Using Bundlor to generate MANIFEST.MF with OSGi headers for antlr.jar..."/>
  <bundlor:bundlor inputPath="${commons-io.jar}"
                   outputPath="${product.lib.dir}/${commons-io.jar.name}"
                   bundleVersion="${commons-io.version}">
  <property name="gemfire.osgi.version" value="${gemfire.osgi.version}"/>
  <manifestTemplate>
Bundle-Vendor: Pivotal Software, Inc.
Bundle-Classpath: .
Bundle-ManifestVersion: 2
Bundle-Name: APACHE-COMMONS-IO
Bundle-SymbolicName: org.apache.commons.io
Bundle-Description: Apache APACHE-COMMONS-IO bundle distributed with Pivotal GemFire
  </manifestTemplate>
  </bundlor:bundlor>
  </conditional> 
  </conditional> 
   <generateVersionResourceFile
        resourcefile="GemFireVersion.properties"
        resourcepath="com/gemstone/gemfire/internal"
        productname="GemFire"
        productversion="${gemfire.version}"
        classesdir="${classes.dir}"/>

    <mkdir dir="${product.lib.dir}"/>

    <fileset id="gemfireJar.files" dir="${classes.dir}">
      <exclude name="com/gemstone/gemfire/management/internal/web/**/*.class"/>
    </fileset>

    <delete file="${product.lib.dir}/${gemfire.jar.name}" quiet="true"/>

    <jar jarfile="${product.lib.dir}/${gemfire.jar.name}" manifest="${classes.dir}/META-INF/MANIFEST.MF">
      <fileset refid="gemfireJar.files"/>
    </jar>

    <mkdir dir="${hiddenlib.dir}"/>

    <runtarget target="build-gemfire-webapp"/>
  </target>

  <target name="src" depends="build-gemfire, pack-core">
    <description>Builds all of the GemFire product source code</description>
  </target>

  <!-- Compiles the GemFire example code -->
  <target name="compile-examples" depends="props, examples-javadocs">
    <description>Compiles the GemFire example  code and creates the examples
        jar.  It does not build any GemFire product code.</description>
    <mkdir dir="${examples.dist.classes.dir}"/>

    <javac executable="${javac.primary}/bin/javac"
           source="1.7"
           fork="yes"
           memoryMaximumSize="${max.memory}m"
           debug="on"
           deprecation="on"
           destdir="${examples.dist.classes.dir}"
           includeAntRuntime="true"
           optimize="off"
           srcdir="${examples.dist.src.dir}">
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${mx4j.jar.name}"/>
        <pathelement location="${product.lib.dir}/${mx4j-remote.jar.name}"/>
      </classpath>
    </javac>

    <mkdir dir="${osbuild.dir}/examples/osgi"/>
    <copy todir="${osbuild.dir}/examples/osgi" preservelastmodified="true">
      <fileset dir="${basedir}/examples/osgi"/>
    </copy>
    <mkdir dir="${osbuild.dir}/examples/osgi/cacheWorker/lib"/>
    <copy file="${osgi.core.jar}"
          tofile="${osbuild.dir}/examples/osgi/cacheWorker/lib/${osgi.core.jar.name}"/>

    <conditional if="enable-bundlor">
    <conditional unless="disable-bundlor">
    <ant antfile="build.xml"
         dir="${osbuild.dir}/examples/osgi/cacheWorker"
         target="all"
         inheritAll="false">
      <property name="env.GEMFIRE_HOME" value="${product.dir}"/>
      <property name="env.BUNDLOR_HOME" value="${bundlor.dir}"/>
      <property name="http.proxyHost" value="${http.proxyHost}"/>
      <property name="http.proxyPort" value="${http.proxyPort}"/>
    </ant>

    <ant antfile="build.xml"
         dir="${osbuild.dir}/examples/osgi/cacheWorkerFragment"
         target="all"
         inheritAll="false">
      <property name="env.BUNDLOR_HOME" value="${bundlor.dir}"/>
      <property name="http.proxyHost" value="${http.proxyHost}"/>
      <property name="http.proxyPort" value="${http.proxyPort}"/>
    </ant>
    </conditional>
    </conditional>

    <mkdir dir="${hidden.dir}/examples"/>

    <copy todir="${hidden.dir}/examples" preservelastmodified="true">
      <fileset dir="${examples.src.dir}">
          <exclude name="**/CVS"/>
          <exclude name="**/*64/**"/>
          <exclude name="**/*.html"/>
          <exclude name="**/GNUmakefile"/>
          <exclude name="**/*.dox"/>
          <exclude name="classes/**"/>
          <exclude name="**/dbq/**"/>
          <exclude name="osgi/**"/>
      </fileset>
    </copy>

    <copy todir="${hidden.dir}/examples/osgi" preservelastmodified="true">
      <fileset dir="${osbuild.dir}/examples/osgi"/>
    </copy>

    <!-- Builds examples.jar -->
    <jar basedir="${examples.dist.classes.dir}" jarfile="${hiddenlib.dir}/examples_dist.jar"/>

    <mkdir dir="${hidden.dir}/examples/dist/javadocs"/>
    <copy todir="${hidden.dir}/examples/dist/javadocs" preservelastmodified="true">
      <fileset dir="${docs.dir}/examples/dist">
          <exclude name="**/doc-files/*.eps"/>
          <exclude name="**/doc-files/*.ps"/>
          <exclude name="**/doc-files/*.fig"/>
          <exclude name="**/doc-files/*.fig.bak"/>
          <exclude name="**/doc-files/*.pdf"/>
      </fileset>
    </copy>

    <copy todir="${hidden.dir}/examples" preservelastmodified="true">
      <fileset dir="${osbuild.dir}/examples">
          <exclude name="**/*64/**"/>
          <exclude name="**/*.ilk"/>
          <exclude name="**/*.o"/>
          <exclude name="**/*.obj"/>
          <exclude name="**/*.pdb"/>
          <exclude name="**/dbq/**"/>
      </fileset>
    </copy>

    <copy todir="${hidden.dir}/examples" preservelastmodified="true">
      <fileset dir="${basedir}/examples">
          <include name="README-dist.html"/>
          <include name="EnvSetup.html"/>
          <include name="dist/flashcache/README.html"/>
          <include name="dist/clientServerConfigs/README.html"/>
          <include name="dist/clientAPI/README.html"/>
          <include name="dist/haOverflow/README.html"/>
          <include name="dist/cacheRunner/README.html"/>
          <include name="dist/cacheOverflow/README.html"/>
          <include name="dist/regionQueue/README.html"/>
          <include name="dist/wan/README.html"/>
          <include name="dist/wanActiveActive/README.html"/>
          <include name="dist/delta/README.html"/>
          <include name="dist/transaction/README.html"/>
          <include name="dist/portableDataExchange/README.html"/>
          <include name="dist/partitionedPersistence/README.html"/>
          <include name="dist/partitionedRegionQuerying/README.html"/>
      </fileset>
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles sendsigbreak                                               -->
  <!-- =================================================================== -->
  <target name="compile-sendsigbreak" depends="props">
    <antcall target="compile-sendsigbreak32"> </antcall>
    <antcall target="compile-sendsigbreak64"> </antcall>
  </target>
  <target name="compile-sendsigbreak32" depends="props" if="do32bit">
    <antcall target="sendsigbreak-make">
      <param name="cPointerModel" value="32bit"/>
    </antcall>
  </target>
  <!-- The use of only64 is deliberate here, only build the 64bit version if you cannot build the 32bit one because you selected only64. -->
  <target name="compile-sendsigbreak64" depends="props" if="do64bit">
    <antcall target="sendsigbreak-make">
      <param name="cPointerModel" value="64bit"/>
    </antcall>
  </target>
  <target name="sendsigbreak-make" depends="props">
    <mkdir dir="${tests.out.dir}/classes/sendsigbreak"/>
    <echo message="osbuild.dir=${osbuild.dir}" level="info"/>
    <exec dir="${tests.src.dir}/sendsigbreak" executable="${ant.make}" failonerror="true">
      <arg value="all"/>
      <env key="GFLIB_MODEL" value="${cPointerModel}"/>
      <env key="base" value="${basedir}"/>
      <env key="OSBUILDDIR" value="${osbuild.dir}"/>
      <env key="OSNAME" value="${os.name}"/>
      <env key="product" value="${product.dir}"/>
    </exec>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the quickstart examples                                    -->
  <!-- =================================================================== -->
  <target name="compile-quickstart" depends="props">
    <description>
    Compiles the GemFire quickstart example code and creates the
    quickstart directory.  It does not build any GemFire product code.
    </description>

<!-- Remove this from the product for v6.5 until it can be updated
    <unzip src="${quickstart.src.dir}/metadata.zip" dest="${product.dir}"/>
-->

    <copy file="${quickstart.src.dir}/quickstart.classpath" tofile="${quickstart.hidden.dir}/.classpath"/>
    <copy file="${quickstart.src.dir}/quickstart.project" tofile="${quickstart.hidden.dir}/.project"/>

    <mkdir dir="${quickstart.hidden.dir}/classes"/>
    <mkdir dir="${quickstart.hidden.dir}/overflowData1"/>
    <mkdir dir="${quickstart.hidden.dir}/persistData1"/>

    <copy todir="${quickstart.hidden.dir}" overwrite="yes">
      <fileset dir="${quickstart.src.dir}">
        <include name="**/*.*"/>
        <exclude name="metadata.zip"/>
        <exclude name="quickstart.classpath"/>
        <exclude name="quickstart.project"/>
        <exclude name=".svn/**/*.*"/>
      </fileset>
    </copy>
    <copy todir="${quickstart.hidden.dir}/xml">
      <fileset dir="${templates.dir}/security">
          <include name="authz5_5.dtd"/>
      </fileset>
      <fileset dir="${tests.src.dir}/lib">
          <include name="authz-ldap.xml"/>
      </fileset>
    </copy>

    <javac executable="${javac.primary}/bin/javac"
           source="1.7"
           fork="yes"
           memoryMaximumSize="${max.memory}m"
           debug="on"
           destdir="${quickstart.hidden.dir}/classes"
           includeAntRuntime="true"
           deprecation="on"
           optimize="off"
           srcdir="${quickstart.src.dir}"
           encoding="UTF-8">
      <compilerarg value="-Werror"/>
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${product.lib.dir}/${gfSecurityImpl.jar.name}"/>
      </classpath>
    </javac>

    <!--- compile the hello world example -->
    <mkdir dir="${helloworld.hidden.dir}/classes"/>
    <copy todir="${helloworld.hidden.dir}" overwrite="yes">
      <fileset dir="${helloworld.src.dir}">
        <include name="**/*.*"/>
      </fileset>
    </copy>

    <javac executable="${javac.primary}/bin/javac"
           source="1.7"
           fork="yes"
           memoryMaximumSize="${max.memory}m"
           debug="on"
           destdir="${helloworld.hidden.dir}/classes"
           includeAntRuntime="true"
           deprecation="on"
           optimize="off"
           srcdir="${helloworld.src.dir}"
           encoding="UTF-8">
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
      </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the tutorial                                               -->
  <!-- =================================================================== -->
  <target name="compile-tutorial" depends="props">
    <description>
    Compiles the GemFire tutorial code and creates the
    quickstart directory.  It does not build any GemFire product code.
    </description>

<!-- Remove this from the product for v6.5 until it can be updated
    <unzip src="${quickstart.src.dir}/metadata.zip" dest="${product.dir}"/>
-->

    <mkdir dir="${tutorial.hidden.dir}"/>

    <copy todir="${tutorial.hidden.dir}" overwrite="yes">
      <fileset dir="${tutorial.src.dir}">
        <include name="**/*.*"/>
        <exclude name=".svn/**/*.*"/>
      </fileset>
    </copy>

    <subant antfile="build.xml" target="compile" buildpath="${tutorial.hidden.dir}">
      <property name="gemfire.dir" value="${product.dir}"/>
    </subant>

  </target>

  <!-- ====================  Building Javadocs  ========================== -->

  <!-- Builds the javadocs for the external API -->
  <target name="external-javadocs" depends="props, compile-gemfire" unless="skip.external.jdocs">
    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${docs.dir}/external"/>
    <javadoc additionalparam="-breakiterator -Xwerror -XDignore.symbol.file" 
             maxmemory="${max.memory}M"
             locale="en_US" author="false"
             encoding="UTF-8"
             docencoding="UTF-8"
             destdir="${docs.dir}/external" failonerror="true" nohelp="yes"
             overview="${src.dir}/external-overview.html" public="true"
             sourcepath="${src.dir}" splitindex="yes" use="yes" version="false"
             windowtitle="GemFire Java API Documentation">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <fileset dir="${hiddenlib.dir}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${product.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <link href="http://java.sun.com/javase/7/docs/api/"
            offline="true"
            packagelistLoc="${javadocs.api.dir}"/>

      <package name="com/gemstone/gemfire/**/"/>
      <excludepackage name="com/gemstone/gemfire/internal/**/"/>
      <excludepackage name="com/gemstone/gemfire/**/internal/**/"/>
      <excludepackage name="com/gemstone/gemfire/**/xml/**/"/>
      <excludepackage name="com/gemstone/gemfire/distributed/**/util/**/"/>

      <tag description="&lt;I&gt;Note: Early Access. Please consult GemStone technical support for assistance with this functionality.&lt;/I&gt;" name="early.Access" enabled="false"/>
      <doctitle>&lt;h1&gt;GemFire ${gemfire.version} Java API &lt;/h1&gt;</doctitle>
      <header>&lt;i&gt;GemFire ${gemfire.version}&lt;/i&gt;</header>
      <bottom>&lt;i&gt;Copyright &amp;copy; 1997-2015 Pivotal Software, Inc. All rights reserved.&lt;/i&gt;</bottom>
    </javadoc>
    <!-- Copy files referenced by javadocs -->
    <copy todir="${docs.dir}/external">
      <fileset dir="${src.dir}">
        <include name="com/gemstone/gemfire/**/*.gif"/>
        <exclude name="com/gemstone/gemfire/**/internal/**"/>
      </fileset>
    </copy>

    <!-- Generate the HTML description of the JMX MBeans -->
    <property name="xmlFile"
              value="${src.dir}/com/gemstone/gemfire/admin/jmx/mbeans-descriptors.xml"/>
    <property name="htmlDir"
              value="${docs.dir}/external/com/gemstone/gemfire/admin/jmx/doc-files"/>
    <mkdir dir="${htmlDir}"/>
    <property name="htmlFile" value="${htmlDir}/mbeans-descriptions.html"/>
    <java classname="com.gemstone.gemfire.admin.jmx.internal.GenerateMBeanHTML"
          failonerror="true" fork="true">
      <classpath>
        <pathelement path="${classes.dir}"/>
      </classpath>
      <arg value="${xmlFile}"/>
      <arg value="${htmlFile}"/>
    </java>
    <echo message="Sweeping ${docs.dir}/external for internal references..."
          level="info"/>
    <checkjavadoc dir="${docs.dir}/external" debug="false">
      <docFiles dir="${docs.dir}/external">
        <exclude name="**/overview-tree.html"/>
        <exclude name="com/gemstone/gemfire/admin/jmx/doc-files/mbeans-descriptions.html"/>
        <exclude name="**/*.fig"/>
      </docFiles>
    </checkjavadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Instruments up to 10 product classes for testing with JavaConTest   -->
  <!-- =================================================================== -->
  <target name="contest-instrument" depends="props, compile-gemfire" >
    <echo message="JavaConTest will instrument up to 10 of the following classes: ${contest.instrument}" level="warning"/>

    <java classname="com.ibm.contest.instrumentation.Instrument">
      <!--arg value="-nobackup"/-->
      <arg value="${contest.instrument}"/>
      <classpath>
        <pathelement location="${contest.dir}/Lib/cfparse.jar"/>
        <pathelement location="${contest.dir}/Lib/ConTest.jar"/>
      </classpath>
    </java>

    <java classname="com.ibm.contest.instrumentation.Instrument">
      <arg value="-isinst"/>
      <arg value="${classes.dir}"/>
      <classpath>
        <pathelement location="${contest.dir}/Lib/cfparse.jar"/>
        <pathelement location="${contest.dir}/Lib/ConTest.jar"/>
      </classpath>
    </java>

    <!-- rebuild gemfire.jar and pack it into product tree -->
    <antcall target="rebuild-gemfire"/>
  </target>

  <!-- Builds the javadocs for the internal API -->
  <target name="internal-javadocs" depends="props, compile-gemfire" unless="skip.internal.jdocs">
    <delete dir="${docs.dir}/internal" failonerror="false"/>
    <delete dir="${docs.dir}/third-party" failonerror="false"/>

    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${docs.dir}/internal"/>
    <mkdir dir="${docs.dir}/third-party"/>

    <echo message="Generating third party javadocs" level="info"/>
    <!-- Javadoc for third party packages -->
    <javadoc additionalparam="-breakiterator -Xwerror -XDignore.symbol.file" 
             locale="en_US" author="true"
             encoding="UTF-8"
             docencoding="UTF-8"
             destdir="${docs.dir}/third-party" failonerror="true"
             maxmemory="${max.memory}M"
             nohelp="yes" overview="${src.dir}/internal-overview.html"
             private="true" splitindex="yes" use="yes" verbose="no"
             sourcepath="${src.dir}"
             version="true"
             windowtitle="Third Party GemFire ${gemfire.version} API">

      <package name="com/gemstone/com/**/"/>
      <package name="com/gemstone/edu/**/"/>
      <package name="com/gemstone/**/org/**/"/>
      <package name="com/gemstone/**/jdbm/**/"/>

      <classpath>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${findbugs-annotation.jar}"/>
        <!-- NOTE: inclusion of tests.classes.dir to avoid bsh (beanshell) warnings -->
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <fileset dir="${hiddenlib.dir}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${product.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <link href="http://docs.oracle.com/javase/6/docs/api/"
            offline="true"
            packagelistLoc="${javadocs.api.dir}"/>
      <link href="http://mx4j.sourceforge.net/docs/api/index.html"
            offline="true"
            packagelistLoc="${mx4j.api.dir}"/>
      <link href="http://jakarta.apache.org/commons/modeler/docs/api/index.html"
            offline="true"
            packagelistLoc="${commons-modeler.api.dir}"/>
      <doctitle>&lt;h1&gt;Third Party GemFire ${gemfire.version} API &lt;/h1&gt;</doctitle>
      <header>&lt;i&gt;GemFire ${gemfire.version}&lt;/i&gt;</header>
    </javadoc>

    <echo message="Generating internal javadocs" level="info"/>
    <!-- Internal API docs -->
    <javadoc additionalparam="-breakiterator -Xwerror -XDignore.symbol.file"
             locale="en_US" author="true"
             encoding="UTF-8"
             docencoding="UTF-8"
             destdir="${docs.dir}/internal" failonerror="true" maxmemory="${max.memory}M"
             nohelp="yes" overview="${src.dir}/internal-overview.html"
             private="true" splitindex="yes" use="yes" verbose="no"
             version="true"
             windowtitle="GemFire ${gemfire.version} Internal API Documentation">

      <packageset defaultexcludes="yes" dir="${src.dir}">
        <include name="com/gemstone/gemfire/**"/>
        <exclude name="com/gemstone/**/doc-files"/>
        <exclude name="com/gemstone/gemfire/pdx/internal/unsafe/**"/>
        <exclude name="com/gemstone/gemfire/management/internal/cli/shell/unsafe/**"/>
        <exclude name="com/gemstone/gemfire/internal/concurrent/unsafe/**"/>
        <exclude name="com/gemstone/gemfire/internal/shared/unsafe/**"/>
      </packageset>

<!--
      <packageset defaultexcludes="yes" dir="${src.out.dir}/xdoclet"/>
-->
      <tag description="&lt;B&gt;GuardedBy:&lt;/B&gt;" name="guarded.By"/>
      <tag description="&lt;B&gt;Concurrency:&lt;/B&gt;" name=".concurrency"/>
      <tag description="&lt;I&gt;Note: Early Access. Please consult GemStone technical support for assistance with this functionality.&lt;/I&gt;" name="early.Access" enabled="false"/>

      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${javac.primary}/lib/tools.jar"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${spring-aop.jar}"/>
        <pathelement location="${spring-aspects.jar}"/>
        <pathelement location="${spring-beans.jar}"/>
        <pathelement location="${spring-context.jar}"/>
        <pathelement location="${spring-context-support.jar}"/>
        <pathelement location="${spring-core.jar}"/>
        <pathelement location="${spring-expression.jar}"/>
        <pathelement location="${spring-shell.jar}"/>
        <pathelement location="${spring-test.jar}"/>
        <pathelement location="${spring-transaction.jar}"/>
        <pathelement location="${spring-web.jar}"/>
        <pathelement location="${spring-web-servlet.jar}"/>
        <pathelement location="${tests.classes.dir}"/>
        <fileset dir="${hiddenlib.dir}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${product.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>

      <link href="file://${docs.dir}/third-party" offline="true"
            packagelistLoc="${docs.dir}/third-party"/>
      <link href="http://docs.oracle.com/javase/6/docs/api/"
            offline="true"
            packagelistLoc="${javadocs.api.dir}"/>
      <link href="http://docs.oracle.com/javase/6/docs/jdk/api/attach/spec/"
            offline="true"
            packagelistLoc="${attach.api.dir}"/>
      <link href="file://${ant.home}/docs/manual/api"
            offline="true"
            packagelistLoc="${ant.home}/docs/manual/api"/>
      <link href="http://mx4j.sourceforge.net/docs/api/index.html"
            offline="true"
            packagelistLoc="${mx4j.api.dir}"/>
      <link href="http://jakarta.apache.org/commons/modeler/docs/api/index.html"
            offline="true"
            packagelistLoc="${commons-modeler.api.dir}"/>
      <link href="http://static.springsource.org/spring/docs/3.1.x/javadoc-api/" offline="false"/>
      <doctitle>&lt;h1&gt;GemFire ${gemfire.version} Internal Java API &lt;/h1&gt;</doctitle>
      <header>&lt;i&gt;GemFire ${gemfire.version}&lt;/i&gt;</header>
    </javadoc>

    <!-- Copy files referenced by javadocs -->
    <copy todir="${docs.dir}/internal">
      <fileset dir="${src.dir}">
        <include name="com/gemstone/gemfire/**/*.gif"/>
        <include name="com/gemstone/com/incors/**/*.gif"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="com/gemstone/gemfire/**/*.pdf"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="com/gemstone/gemfire/internal/cache/doc-files/properties.html"/>
      </fileset>
    </copy>

    <!-- Generate the HTML description of the JMX MBeans -->
    <property name="xmlFile"
              value="${src.dir}/com/gemstone/gemfire/admin/jmx/mbeans-descriptors.xml"/>
    <property name="htmlDir"
              value="${docs.dir}/internal/com/gemstone/gemfire/admin/jmx/doc-files"/>
    <mkdir dir="${htmlDir}"/>
    <property name="htmlFile" value="${htmlDir}/mbeans-descriptions.html"/>
    <java classname="com.gemstone.gemfire.admin.jmx.internal.GenerateMBeanHTML"
          failonerror="true" fork="true">
      <classpath>
        <pathelement path="${classes.dir}"/>
      </classpath>
      <arg value="${xmlFile}"/>
      <arg value="${htmlFile}"/>
    </java>
  </target>

  <!-- Builds the javadocs for the GemFire tests -->
  <target name="tests-javadocs" depends="props, compile-tests">
    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${docs.dir}/tests"/>
    <javadoc additionalparam="-breakiterator -Xwerror" 
          locale="en_US"
          encoding="UTF-8"
          docencoding="UTF-8"
          maxmemory="${max.memory}M" noindex="false"
          author="true" destdir="${docs.dir}/tests" failonerror="false"
          nohelp="yes" package="true" sourcepath="${tests.src.dir}"
          splitindex="yes" use="yes" verbose="no" version="true"
          windowtitle="GemFire Tests API">

      <package name="com.gemstone.gemfire.cache30.*"/>
      <package name="com.gemstone.gemfire.admin.*"/>
      <package name="batterytest.*"/>
      <package name="smoketest.*"/>
      <package name="hydra.*"/>
      <package name="perffmwk.*"/>
      <package name="util.*"/>
      <package name="xform.*"/>
      <package name="junit.*"/>
      <package name="gui.*"/>
      <package name="jfcunitext.*"/>
      <package name="cacheperf.*"/>
      <package name="distcache.*"/>
      <package name="objects.*"/>
      <package name="dunit.*"/>
      <package name="regions.validate.*"/>

      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${quickstart.hidden.dir}"/>
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
      </classpath>

      <link href="${docs.dir}/internal" offline="true"
            packagelistLoc="${docs.dir}/internal"/>
      <!-- This links is bad. Need to fix -->
      <link href="http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet"
            offline="true" packagelistLoc="docs/doclet"/>
      <link href="http://java.sun.com/javase/6/docs/api/"
            offline="true"
            packagelistLoc="${javadocs.api.dir}"/>
      <link href="file://${ant.home}/docs/manual/api"/>
    </javadoc>

    <copy file="${tests.src.dir}/hydra/hydra_grammar.txt" todir="${docs.dir}/tests/hydra"/>

  </target>

  <!-- Builds the javadocs for the GemFire examples -->
  <target name="examples-javadocs" depends="props" unless="skip.examples.jdocs">
    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${docs.dir}/examples"/>

    <echo message="building javadocs for examples/dist" level="info"/>
    <mkdir dir="${docs.dir}/examples/dist"/>
    <javadoc additionalparam="-breakiterator -Xwerror" 
        locale="en_US"
        encoding="UTF-8"
        docencoding="UTF-8"
        author="true"
        destdir="${docs.dir}/examples/dist"
        failonerror="true"
        nohelp="yes"
        overview="${examples.src.dir}/dist/overview.html"
        package="true"
        splitindex="yes"
        sourcepath="${examples.dist.src.dir}"
        use="yes"
        verbose="no"
        version="true"
        maxmemory="${max.memory}M"
        windowtitle="vFabric GemFire Example API">

      <package name="cacheRunner.*"/>
      <package name="cacheOverflow.*"/>
      <package name="clientAPI.*"/>
      <package name="flashcache.*"/>
      <package name="haOverflow.*"/>
      <package name="wan.*"/>
      <package name="delta.*"/>
      <package name="transaction.*"/>
      <package name="portableDataExchange.*"/>
      <package name="partitionedPersistence.*"/>
      <package name="partitionedRegionQuerying.*"/>

      <classpath>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${examples.dist.classes.dir}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <fileset dir="${product.lib.dir}">
          <include name="**/mx4j*.jar"/>
        </fileset>
      </classpath>

      <link href="../../../../docs/japi" offline="true"
            packagelistLoc="${docs.dir}/external"/>
      <link href="http://java.sun.com/javase/6/docs/api/"
            offline="true"
            packagelistLoc="${javadocs.api.dir}"/>
      <doctitle>&lt;h1&gt;GemFire Example API &lt;/h1&gt;</doctitle>
      <bottom>&lt;i&gt;Copyright &amp;copy; 1997-2015 Pivotal Software, Inc. All rights reserved.&lt;/i&gt;</bottom>

    </javadoc>

    <echo message="Sweeping ${docs.dir}/examples for internal references..."
          level="info"/>
    <checkjavadoc dir="${docs.dir}/examples" debug="false">
      <docFiles dir="${docs.dir}/examples">
        <exclude name="**/overview-tree.html"/>
        <exclude name="**/*.fig"/>
      </docFiles>
    </checkjavadoc>
  </target>

  <target name="unit-tests-summary" depends="props, compile-tests">
    <description>Uses a custom-build Doclet to generate a summary of the GemFire Unit Tests</description>

    <mkdir dir="${docs.dir}"/>
    <delete dir="${docs.dir}/unit-tests-summary"/>
    <mkdir dir="${docs.dir}/unit-tests-summary"/>

    <javadoc author="false" package="true" maxmemory="${max.memory}M"
          sourcepath="${tests.src.dir}" version="false">
      <doclet name="com.gemstone.gemfire.UnitTestDoclet"
            path="${tests.classes.dir}">
        <param name="-output"
            value="${docs.dir}/unit-tests-summary/summary.txt"/>
      </doclet>

      <packageset defaultexcludes="yes" dir="${tests.src.dir}">
        <include name="com/gemstone/gemfire/**"/>
      </packageset>

      <classpath>
        <pathelement location="${ant.core.lib}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${tests.classes.dir}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
      </classpath>
    </javadoc>
  </target>

  <!-- shared library -->
  <target name="shared-library32" depends="props">
    <antcall target="shared-lib32"> </antcall>
  </target>

  <target name="shared-library64" depends="props">
    <antcall target="shared-lib64"> </antcall>
  </target>

  <target name="clean-gemfire-library" depends="props">
    <conditional if="do32bit">
      <delete dir="${src.out.dir}/objects"/>
      <delete dir="${src.out.dir}/objects_g"/>
    </conditional>
    <conditional if="do64bit">
      <delete dir="${src.out.dir}/objects64"/>
      <delete dir="${src.out.dir}/objectsi64_g"/>
    </conditional>
  </target>

  <target name="test-shared-library32" depends="props">
    <antcall target="test-shared-lib32"> </antcall>
  </target>

  <target name="test-shared-library64" depends="props">
    <antcall target="test-shared-lib64"> </antcall>
  </target>

  <target name="clean-test-library" depends="props">
    <conditional if="do32bit">
      <delete dir="${tests.out.dir}/objects"/>
      <delete dir="${tests.out.dir}/objects_g"/>
      <delete dir="${tests.out.dir}/generated"/>
    </conditional>
    <conditional if="do64bit">
      <delete dir="${tests.out.dir}/objects64"/>
      <delete dir="${tests.out.dir}/objectsi64_g"/>
      <delete dir="${tests.out.dir}/generated"/>
    </conditional>
  </target>

  <target name="clean-shared-libraries" depends="clean-gemfire-library"/>

  <target name="rebuild-shared-library32" depends="clean-gemfire-library, shared-library32, pack-core">
    <description>Rebuilds native library and packs it into product tree</description>
  </target>

  <target name="rebuild-shared-library64" depends="clean-gemfire-library, shared-library64, pack-core">
    <description>Rebuilds native library and packs it into product tree</description>
  </target>

  <target name="rebuild-test-shared-library32" depends="clean-test-library, test-shared-library32">
    <description>Rebuilds native test library and packs it into product tree</description>
  </target>

  <target name="rebuild-test-shared-library64" depends="clean-test-library, test-shared-library64">
    <description>Rebuilds native test library and packs it into product tree</description>
  </target>

  <target name="shared-lib32" depends="props" if="do32bit">
    <condition property="ant.make" value="${basedir}/bin/vcvars.bat">
      <os family="windows"/>
    </condition>
    <antcall target="shared-library-make">
      <param name="makeTarget" value="${sharedLibraryTargets}"/>
      <param name="cPointerModel" value="32bit"/>
    </antcall>
  </target>

  <target name="shared-lib64" depends="props" if="do64bit">
    <condition property="ant.make" value="${basedir}/bin/vcvars64.bat">
      <os family="windows"/>
    </condition>
    <antcall target="shared-library-make">
      <param name="makeTarget" value="${sharedLibraryTargets}"/>
      <param name="cPointerModel" value="64bit"/>
    </antcall>
  </target>

  <!-- This is a windows platform only target -->
  <target name="test-shared-lib32" depends="props" if="do32bit">
    <property name="ant.make" value="${basedir}/bin/vcvars.bat"/>
    <antcall target="test-library-make">
      <param name="makeTarget" value="${sharedLibraryTargets}"/>
      <param name="cPointerModel" value="32bit"/>
    </antcall>
  </target>

  <!-- This is a windows platform only target, requires -Donly64=true -->
  <target name="test-shared-lib64" depends="props" if="do64bit">
    <property name="ant.make" value="${basedir}/bin/vcvars64.bat"/>
    <antcall target="test-library-make">
      <param name="makeTarget" value="${sharedLibraryTargets}"/>
      <param name="cPointerModel" value="64bit"/>
    </antcall>
  </target>

  <!-- shared-library-make should be invoked with antcall ,
                       takes two args   makeTarget , cPointerModel  -->
  <target name="shared-library-make" depends="props">

    <property file="${build.dir}/build.number"/>

    <!-- gnumake to create shared library -->
    <exec dir="${src.dir}/com/gemstone/gemfire/internal" executable="${ant.make}" failonerror="true">
      <arg value="${makeTarget}"/>
      <env key="OSNAME" value="${os.name}"/>
      <env key="GFLIB_MODEL" value="${cPointerModel}"/>
      <env key="GEMFIRE_VERSION" value="${native.version}"/>
      <env key="GEMFIRE_BUILDID" value=""/>
      <env key="GEMFIRE_BUILDDATE" value="${build.time}"/>
      <env key="GEMFIRE_BUILDOS" value="${os.arch} ${os.name} ${os.version}"/>
      <env key="base" value="${basedir}"/>
      <env key="OSBUILDDIR" value="${osbuild.dir}"/>
    </exec>
  </target>

  <!-- This is a windows platform only target -->
  <target name="test-library-make" depends="props">
    <!-- gnumake to create shared library -->
    <exec dir="${tests.src.dir}/hydra" executable="${ant.make}" failonerror="true">
      <arg value="${sharedLibraryTargets}"/>
      <env key="OSNAME" value="${os.name}"/>
      <env key="GFLIB_MODEL" value="${cPointerModel}"/>
      <env key="base" value="${basedir}"/>
      <env key="OSBUILDDIR" value="${osbuild.dir}"/>
    </exec>
  </target>

  <!-- slow shared library targets for interactive use -->
  <target name="slow-shared-lib32" depends="props">
    <antcall target="shared-library-make">
      <param name="makeTarget" value="makeslow"/>
      <param name="cPointerModel" value="32bit"/>
    </antcall>
  </target>

  <target name="slow-shared-lib64" depends="props">
    <antcall target="shared-library-make">
      <param name="makeTarget" value="makeslow"/>
      <param name="cPointerModel" value="64bit"/>
    </antcall>
  </target>

  <!-- ==========================  Clean  =========================== -->

  <!-- Removes osbuild.dir which now contains all artifacts of building
       Excludes save past performance results in saved-results dir -->
  <target name="clean" depends="props">
    <echo message="Cleaning osbuild.dir excludes=saved-results" level="info"/>

    <!-- Remove osbuild.dir now with exclude -->
    <delete includeEmptyDirs="true">
      <fileset dir="${osbuild.dir}" defaultexcludes="false" excludes="**/saved-results/**"/>
    </delete>
  </target>

  <!-- Removes all byproducts of building the tests -->
  <target name="clean-tests" depends="props, clean-versioned-tests">
    <delete dir="${tests.classes.dir}"/>
    <delete dir="${version1.tests.out.dir}"/>
    <delete dir="${version2.tests.out.dir}"/>
    <delete dir="${extraJars.dir}"/>
  </target>

  <!-- =======================  Glimpse  ======================== -->

  <!-- Builds a glimpse database for the source code -->
  <target name="glimpse"  depends="props">
    <delete dir="${glimpse.dir}" quiet="true"/>
    <mkdir dir="${glimpse.dir}"/>

    <!-- What kinds of files do we not include in the glimpse DB -->
    <echo file="${glimpse.dir}/.glimpse_exclude" level="info">
/CVS/
/.svn/
/glimpsefiles/
/build-artifacts/
/results/
/results64/
/objects/
/objects_g/
/objects64/
/objects64_g/
/defaultSystem/
/lib/
/classes/
/docs/
~$
/.#
/MANIFEST.MF
.cvsignore$
.class$
.exe$
.gif$
.gz$
.lib$
.log$
.log10$
.log50$
.o$
.s$
.so$
.zip$
.gfs$
.pdf$
.checkin.data$
.checkin.data.bak$
    </echo>

    <exec executable="glimpseindex">
      <!-- use a bigger hash table while building the index -->
      <arg line="-B"/>

      <!-- use 32 Mb of memory for temporary tables -->
      <arg line="-M 32"/>

      <!-- build a larger index, for faster searches -->
      <arg line="-b"/>

      <!-- update existing index -->
      <!-- <arg line="-f"/> -->

      <!-- index numerals as well as words -->
      <arg line="-n"/>

      <!-- allocate more space for tables? -->
      <arg line="-o"/>

      <!-- order files reverse-sorted by date -->
      <arg line="-t"/>

      <!-- Put the index in ${glimpse.dir} -->
      <arg line="-H ${glimpse.dir}"/>

      <!-- Where to start looking for files to index -->
      <arg line="${basedir}/src ${basedir}/tests ${basedir}/bin ${basedir}/examples ${basedir}/makefiles ${basedir}/quickstart ${basedir}/release ${basedir}/src/com/gemstone/gemfire/internal/cache/PartitionedRegion.java ${basedir}/src/com/gemstone/gemfire/internal/cache/LocalRegion.java ${basedir}/src/com/gemstone/gemfire/internal/DSFIDFactory.java ${basedir}/src/com/gemstone/gemfire/internal/cache/execute/DistributedSystemResultSender.java ${basedir}/tests/objects"/>

    </exec>
  </target>

  <!-- =====================  Run Tests  ========================= -->
  <!--  do not execute the *tests_impl targets directly, they do not
      check for failure status -->
  <target name="precheckin" depends="update-git, gemfirexd-build, gemfirexd-precheckin-tests">
  </target>

  <target name="precheckin-parallel" depends="update-git, gemfirexd-build, gemfirexd-precheckin-tests-parallel">
  </target>

  <target name="gemfirexd-build" depends="clean, build-all-gfe, gfxd-clean, gfxd-build-all-sanity">
  </target>

  <target name="quick-gemfirexd-build" depends="clean, gfxd-sane-clean, gfxd-build-all"/>
  
  <target name="wan-precheckin" depends="update-git, clean, build-all, gemfirexd-wan-precheckin-tests">
  </target>
 
  <target name="gemfirexd-precheckin-tests" depends="run-all-gemfirexd-tests"/>
  <target name="gemfirexd-precheckin-tests-parallel" depends="make-last-update, run-all-gemfirexd-tests-parallel"/>
  <target name="gemfirexd-wan-precheckin-tests" depends="run-wan-dunit-tests, gfxd-run-wan-dunit-tests"/>

  <!-- begin targets for interactive execution of specific parts of the tests -->
  <target name="run-all-gfe-tests" depends="props, define-test-groups, run-dunit-tests, parallel-junit, run-smoke-tests, run-container-tests, run-quickstart-tests"/>

  <target name="run-all-gemfirexd-tests" depends="run-all-gemfirexd-gfe-tests, gfxd-run-all-tests"/>
  <target name="run-all-gemfirexd-gfe-tests" depends="props, define-test-groups, run-gemfirexd-dunit-tests, parallel-junit"/>
  <target name="run-all-gemfirexd-gfe-tests64" depends="props, define-test-groups, run-gemfirexd-dunit-tests64, parallel-junit64"/>

  <!-- splitting GFE dunits+junits into two for parallel run -->
  <target name="-run-gemfirexd-tests-parallel1" depends="props, define-test-groups, -keep-going">
    <parallel threadCount="1">
      <antcall target="run-gemfirexd-dunit-tests">
        <param name="dunit.tests.outdir" value="dunit1"/>
        <param name="dunitUptoTestClass" value="com.gemstone.gemfire.internal.cache.PartitionedRegionRedundancyZoneDUnitTest"/>
      </antcall>
      <antcall target="parallel-junit"/>
    </parallel>
  </target>

  <target name="-run-gemfirexd-tests-parallel2" depends="props, define-test-groups, -keep-going">
    <antcall target="run-gemfirexd-dunit-tests">
      <param name="dunit.tests.outdir" value="dunit2"/>
      <param name="dunitFromTestClass" value="com.gemstone.gemfire.internal.cache.PartitionedRegionRedundancyZoneDUnitTest"/>
    </antcall>
  </target>

  <!-- splitting GFE WAN dunits into two for parallel run - one run independently and other with GFXD WAN dunit -->
  <target name="-run-gemfirexd-wan-dunit-tests-parallel1" depends="props, define-test-groups, -keep-going">
    <parallel threadCount="1">
      <antcall target="gfxd-run-wan-dunit-tests"/>
      <antcall target="run-wan-dunit-tests">
        <param name="wan.tests.outdir" value="wan-dunit1"/>
        <param name="dunitUptoTestClass" value="com.gemstone.gemfire.internal.cache.wan.offheap.ParallelGatewaySenderQueueOverflowOffHeapDUnitTest"/>
      </antcall>
    </parallel>
  </target>

  <target name="-run-gemfirexd-wan-dunit-tests-parallel2" depends="props, define-test-groups, -keep-going">
    <antcall target="run-wan-dunit-tests">
      <param name="wan.tests.outdir" value="wan-dunit2"/>
      <param name="dunitFromTestClass" value="com.gemstone.gemfire.internal.cache.wan.offheap.ParallelGatewaySenderQueueOverflowOffHeapDUnitTest"/>
    </antcall>
  </target>

  <target name="run-all-gemfirexd-tests-parallel">
    <parallel>
      <antcall target="-run-gemfirexd-tests-parallel1"/>
      <antcall target="-run-gemfirexd-tests-parallel2"/>
      <antcall target="-run-gemfirexd-wan-dunit-tests-parallel1"/>
      <antcall target="-run-gemfirexd-wan-dunit-tests-parallel2"/>
      <antcall target="gfxd-run-all-tests-nowan-parallel"/>
    </parallel>
  </target>

  <!-- splitting GFE dunits+junits into two for parallel run -->
  <target name="-run-gemfirexd-tests64-parallel1" depends="props, define-test-groups, -keep-going">
    <parallel threadCount="1">
      <antcall target="run-gemfirexd-dunit-tests64">
        <param name="dunit.tests.outdir" value="dunit1"/>
        <param name="dunitUptoTestClass" value="com.gemstone.gemfire.internal.cache.PartitionedRegionRedundancyZoneDUnitTest"/>
      </antcall>
      <antcall target="parallel-junit64"/>
    </parallel>
  </target>

  <target name="-run-gemfirexd-tests64-parallel2" depends="props, define-test-groups, -keep-going">
    <antcall target="run-gemfirexd-dunit-tests64">
      <param name="dunit.tests.outdir" value="dunit2"/>
      <param name="dunitFromTestClass" value="com.gemstone.gemfire.internal.cache.PartitionedRegionRedundancyZoneDUnitTest"/>
    </antcall>
  </target>

  <!-- splitting GFE WAN dunits into two for parallel run - one run independently and other with GFXD WAN dunit -->
  <target name="-run-gemfirexd-wan-dunit-tests64-parallel1" depends="props, define-test-groups, -keep-going">
    <parallel threadCount="1">
      <antcall target="gfxd-run-wan-dunit-tests64"/>
      <antcall target="run-wan-dunit-tests64">
        <param name="wan.tests.outdir" value="wan-dunit1"/>
        <param name="dunitUptoTestClass" value="com.gemstone.gemfire.internal.cache.wan.offheap.ParallelGatewaySenderQueueOverflowOffHeapDUnitTest"/>
      </antcall>
    </parallel>
  </target>

  <target name="-run-gemfirexd-wan-dunit-tests64-parallel2" depends="props, define-test-groups, -keep-going">
    <antcall target="run-wan-dunit-tests64">
      <param name="wan.tests.outdir" value="wan-dunit2"/>
      <param name="dunitFromTestClass" value="com.gemstone.gemfire.internal.cache.wan.offheap.ParallelGatewaySenderQueueOverflowOffHeapDUnitTest"/>
    </antcall>
  </target>

  <target name="run-all-gemfirexd-tests64-parallel">
    <parallel>
      <antcall target="-run-gemfirexd-tests64-parallel1"/>
      <antcall target="-run-gemfirexd-tests64-parallel2"/>
      <antcall target="-run-gemfirexd-wan-dunit-tests64-parallel1"/>
      <antcall target="-run-gemfirexd-wan-dunit-tests64-parallel2"/>
      <antcall target="gfxd-run-all-tests64-nowan-parallel"/>
    </parallel>
  </target>

  <!-- These targets are specifically used for running tests on sanctioned builds
       They include more tests than are run by a regular gemfirexd  precheckin -->
  <target name="run-all-gemfirexd-tests32" depends="props, define-test-groups, run-gemfirexd-dunit-tests, parallel-junit, run-smoke-tests, run-quickstart-tests, gfxd-run-harness-tests, gfxd-parallel-junit, gfxd-run-dunit-tests, gfxd-run-integration-dunit-tests, gfxd-run-wan-dunit-tests, gfxd-run-smoke-tests"/>

  <target name="win-run-all-gemfirexd-tests32" depends="props, define-test-groups, run-gemfirexd-dunit-tests, parallel-junit, run-smoke-tests, run-quickstart-tests, gfxd-run-harness-tests, gfxd-parallel-junit, gfxd-run-dunit-tests, gfxd-run-integration-dunit-tests, gfxd-run-smoke-tests"/>

  <target name="run-all-gemfirexd-tests64" depends="props, define-test-groups, run-gemfirexd-dunit-tests64, parallel-junit64, run-smoke-tests64, run-quickstart-tests64, gfxd-run-harness-tests64, gfxd-parallel-junit64, gfxd-run-dunit-tests64, gfxd-run-integration-dunit-tests64, gfxd-run-wan-dunit-tests64, gfxd-run-smoke-tests64"/>

  <target name="run-all-gf-unit-tests32" depends="props, define-test-groups, run-dunit-tests, run-java-tests, run-smoke-tests, run-container-tests, gfxd-run-smoke-tests, run-quickstart-tests"/>

  <target name="run-all-gf-unit-tests64" depends="props, define-test-groups, run-dunit-tests64, run-java-tests64, run-container-tests64, run-smoke-tests64, gfxd-run-smoke-tests, run-quickstart-tests64"/>

  <!-- Regular run targets below here -->
  <target name="run-quickstart-tests" depends="props, define-test-groups, -keep-going">
    <run-junit testGroup="${quickstart.testlist}" results="${tests.results.dir}/quickstart" suite="quickstart" extra-classpath-ref="quickstart.classpath" threshold="${threshold.quickstart}"/>
  </target>

  <target name="run-quickstart-tests64" depends="props, define-test-groups, -keep-going">
    <run-junit testGroup="${quickstart.testlist}" results="${tests.results64.dir}/quickstart" suite="quickstart" jvm="${unittest.java64}" dprop="${d64prop}" extra-classpath-ref="quickstart.classpath" threshold="${threshold.quickstart}"/>
  </target>

  <target name="run-java-tests" depends="props, define-test-groups, -keep-going">
    <run-junit results="${tests.results.dir}/java" threshold="${threshold.java}"/>
  </target>

  <target name="run-java-tests64" depends="props, define-test-groups, -keep-going">
    <run-junit results="${tests.results64.dir}/java" jvm="${unittest.java64}" dprop="${d64prop}" threshold="${threshold.java}"/>
  </target>
  <target name="run-admin-tests" depends="define-admin-tests, props, run-dunit-tests, run-java-tests"/>
  <target name="run-core-tests" depends="props, define-core-gemfire-tests, run-java-tests"/>
  <target name="run-compression-tests" depends="define-compression-tests, props, run-dunit-tests, run-java-tests"/>
  <target name="run-dls-tests" depends="define-dls-tests, props, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-launcher-tests" depends="define-launcher-tests, props, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-licensing-tests" depends="define-licensing-tests, props, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-management-tests" depends="define-management-tests, props, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-memscale-unit-tests" depends="define-memscale-tests, props, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-memscale-dunit-tests" depends="define-memscale-tests, props, run-dunit-tests"/>
  <target name="run-memscale-tests" depends="define-memscale-tests, props, run-memscale-suite-tests, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-restapi-tests" depends="props, define-restapi-gemfire-tests, run-java-tests"/>
  <target name="run-statistics-tests" depends="define-statistics-tests, props, run-statssmoke-tests, run-dunit-tests, run-java-tests, run-quickstart-tests"/>
  <target name="run-tx-tests" depends="run-tx-junit-tests, run-tx-dunit-tests, -keep-going"/>
  <target name="run-tx-junit-tests" depends="props, define-txteam-tests, run-java-tests, -keep-going"/>
  <target name="run-tx-dunit-tests" depends="props, define-txteam-tests, run-dunit-tests, -keep-going"/>
  <target name="run-persist-tests" depends="run-persist-junit-tests, run-persist-dunit-tests, -keep-going"/>
  <target name="run-persist-junit-tests" depends="props, define-persist-tests, run-java-tests, -keep-going"/>
  <target name="run-persist-dunit-tests" depends="props, define-persist-tests, run-dunit-tests, -keep-going"/>
  <target name="run-hdfs-tests" depends="run-hdfs-junit-tests, run-hdfs-dunit-tests, -keep-going"/>
  <target name="run-hdfs-junit-tests" depends="props, define-hdfs-tests, run-java-tests, -keep-going"/>
  <target name="run-hdfs-dunit-tests" depends="props, define-hdfs-tests, run-dunit-tests, -keep-going"/>
  <!-- end targets for interactive execution of specific parts of the tests -->

  <!-- greplogs support -->

  <property name="default.threshold" value="50"/>
  <property name="threshold.java" value="0"/>
  <property name="threshold.parallelJUnit" value="0"/>
  <property name="threshold.quickstart" value="4"/>
  <property name="threshold.container" value="10"/>
  <condition property="threshold.smoke" value="0">
    <os name="Linux"/>
  </condition>
  <property name="threshold.smoke" value="${default.threshold}"/>
  <property name="threshold.moresmoke" value="${default.threshold}"/>
  <property name="threshold.cruisecontrolbt" value="20"/>
  <condition property="threshold.dunit" value="285">
    <os name="Linux"/>
  </condition>
  <condition property="threshold.dunit" value="5747">
    <os family="windows"/>
  </condition>
  <property name="threshold.dunit" value="${default.threshold}"/>

  <target name="run-error-grep" depends="props, -define-test-macros">
    <echo message="Running error-grep on ${tests.results.dir}" level="info"/>
    <error-grep sourceDir="${tests.results.dir}" threshold="0"/>
  </target>

  <target name="grep-test-results" depends="grep-tests32-results"/>

  <target name="grep-tests32-results" depends="props, -define-test-macros">
    <error-grep sourceDir="${tests.results.dir}/java" threshold="${threshold.java}"/>
    <error-grep sourceDir="${tests.results.dir}/smoke" threshold="${threshold.smoke}"/>
    <error-grep sourceDir="${tests.results.dir}/dunit" threshold="${threshold.dunit}"/>
    <error-grep sourceDir="${tests.results.dir}/quickstart" threshold="${threshold.quickstart}"/>
  </target>

  <target name="grep-tests64-results" depends="props, -define-test-macros">
    <error-grep sourceDir="${tests.results64.dir}/java" threshold="${threshold.java}"/>
    <error-grep sourceDir="${tests.results64.dir}/smoke" threshold="${threshold.smoke}"/>
    <error-grep sourceDir="${tests.results64.dir}/dunit" threshold="${threshold.dunit}"/>
    <error-grep sourceDir="${tests.results64.dir}/quickstart" threshold="${threshold.quickstart}"/>
  </target>

  <macrodef name="dunit-generate-hydra-config">
    <attribute name="dunitOutDir" default="${tests.results.dir}/dunit"/>
    <attribute name="dunit.testlist" default="${dunit.testlist}"/>
    <attribute name="dunit.classes.dir" default="${tests.classes.dir}"/>
    <attribute name="dunit-classpath-ref" default="dunit.classpath"/>
    <attribute name="extra-classpath-ref" default="empty.classpath"/>
    <attribute name="extra-dunit-jvm-args" default=""/>

    <attribute name="btFile" default="@{dunitOutDir}/dunit-tests.bt"/>
    <attribute name="confFile" default="@{dunitOutDir}/dunit-tests.conf"/>
    <attribute name="includeFile" default="$JTESTS/dunit/impl/dunitN.inc"/>
    <attribute name="systemCount" default="2"/>
    <sequential>
      <echo message="ConTest is ${contest.dir}/Lib/ConTest.jar" level="info"/>
      <echo message="jvm.jrockit is ${jvm.jrockit}" level="info"/>

      <mkdir dir="@{dunitOutDir}"/>

      <conditional if="myenv.JPROBE_HOME">
        <property name="jprobe.home" value="${myenv.JPROBE_HOME}"/>
      </conditional>
      <conditional unless="jprobe.home">
        <property name="jprobe.home" value="/dummyjprobedir"/>
      </conditional>

      <echo message="Running dunit tests in @{dunitOutDir}..." level="info"/>

      <!-- Load the DUnit config task. -->
      <taskdef name="dunitconfig" classname="dunit.impl.DUnitConfigAntTask">
        <classpath>
          <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
          <pathelement location="${tests.classes.dir}"/>
        </classpath>
      </taskdef>

      <conditional if="jvm.jrockit">
        <property name="dunit-jvm-args" value=""/>
      </conditional>
      <conditional unless="jvm.jrockit">
        <property name="dunit-jvm-args" value="-XX:MaxDirectMemorySize=256M"/>
      </conditional>

      <property name="dunitconfig.classes.dir" value="@{dunit.classes.dir}"/>
      <property name="dunitLogPerTest" value="false" />
      <property name="dunitRecordResults" value="false"/>
      <property name="dunitFromTestClass" value="" />
      <property name="dunitUptoTestClass" value="" />
      <property name="ldapServer" value="${myenv.LDAP_SERVER_FQDN}" />
      <property name="useHTTP" value="false"/>

      <dunitconfig btFile="@{btFile}"
           confFile="@{confFile}"
           includeFile="@{includeFile}"
           debugJavaGroups="false"
           logLevel="${logLevel}"
           dunitSites="${dunitSites}"
           systemCount="@{systemCount}"
           verbose="${dmVerbose}"
           useIPv6="${useIPv6}"
           extraVMArgs="-ea -Xms512m -Xmx512m -XX:MaxPermSize=256M ${dunit-jvm-args} @{extra-dunit-jvm-args} ${jacoco-agent.config}
           -Dgemfire.DEFAULT_MAX_OPLOG_SIZE=10 -Dp2p.defaultConcurrencyLevel=6 -DBridgeServer.SELECTOR=false
           -DBridgeServer.SELECTOR_POOL_SIZE=10 -DDUNIT.MAX_PUTTERS=100 -DDUNIT.MAX_PUT_OPS=50000 -DDUNIT.PUT_SIZE=1
           -DDUNIT.PUT_TIMEOUT=10000 -DBridgeServer.MAX_INCOMING_DATA=-1 -DBridgeServer.MAX_INCOMING_MSGS=-1
           -Dgemfire.disable-event-old-value=false -Dgemfire.enable-time-statistics=true -Dgemfire.ack-wait-threshold=60 -Dgemfire.FREE_OFF_HEAP_MEMORY=true
           -DJUnitTestSuite.maxRunSecs=${junit.timeout} -Dack-threshold-exception=false
           -Xdebug -Xrunjdwp:transport=dt_socket,suspend=n,server=y -DBridgeServer.handShakeTimeout=3000
           -Dgemfire.statsDisabled=false
           -DDistributionManager.DISCONNECT_WAIT=20000 -Dgemfire.disable-locator-discovery=true -Dgemfire.disallowMcastDefaults=true -Dgf.ldap.server=ldap
           -Dgf.ldap.basedn=ou=ldapTesting,dc=pune,dc=gemstone,dc=com -DdunitLogPerTest=${dunitLogPerTest}
           -DdunitRecordResults=${dunitRecordResults} -DdunitFromTestClass=${dunitFromTestClass}
           -DdunitUptoTestClass=${dunitUptoTestClass} -DuseHTTP=${useHTTP}
           -DRELEASE_DIR=${gcm.dir}/where/gemfire/releases
           -Dhttp.proxyHost=${http.proxyHost} -Dhttp.proxyPort=${http.proxyPort}
           -Djava.awt.headless=true
           -DDISABLE_SYNC_WRITES_FOR_TESTS=true">
      <!--    -Dcom.gemstone.gemfire.internal.cache.PartitionedRegionDataStore-logging=true  -->

        <extraLocatorClasspath>
          <path refid="@{extra-classpath-ref}"/>
          <path refid="@{dunit-classpath-ref}"/>
          <pathelement location="@{dunit.classes.dir}"/>
        </extraLocatorClasspath>

        <extraControllerClasspath>
          <path refid="@{extra-classpath-ref}"/>
          <path refid="batterytest.classpath"/>
        </extraControllerClasspath>

        <extraClientClasspath>
          <path refid="@{extra-classpath-ref}"/>
          <path refid="@{dunit-classpath-ref}"/>
          <pathelement location="@{dunit.classes.dir}"/>
        </extraClientClasspath>

        <tests dir="@{dunit.classes.dir}">
          <patternset refid="@{dunit.testlist}"/>
        </tests>
      </dunitconfig>
    </sequential>
  </macrodef>

  <target name="run-perf-tests" depends="props, -define-test-macros">
    <description>Runs perf tests.</description>
    <execute-perf reportName="perf" type="perf" bt.file="${perf.bt}"/>
  </target>

  <target name="run-perf-tests64" depends="props, -define-test-macros">
    <description>Runs perf tests.</description>
    <execute-perf64 reportName="perf" type="perf" bt.file="${perf.bt}"/>
  </target>

  <target name="run-gfxd-perf-tests" depends="props, -define-test-macros">
    <description>Runs perf tests.</description>
    <execute-perf reportName="perf" type="perf" bt.file="${gfxdperf.bt}"/>
  </target>

  <target name="run-gfxd-perf-tests64" depends="props, -define-test-macros">
    <description>Runs perf tests.</description>
    <execute-perf64 reportName="perf" type="perf64" bt.file="${gfxdperf.bt}"/>
  </target>

  <target name="run-mem-tests" depends="props, -define-test-macros">
    <description>Runs mem tests.</description>
    <execute-perf reportName="mem" type="mem" bt.file="${mem.bt}"/>
  </target>

  <target name="run-mem-tests64" depends="props, -define-test-macros">
    <description>Runs mem tests.</description>
    <execute-perf64 reportName="mem" type="mem" bt.file="${mem.bt}"/>
  </target>

  <target name="run-dunit-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the distributed unit tests. </description>
    <delete dir="${tests.results.dir}/dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <dunit-generate-hydra-config/>
    <property name="bt.removePassedTest" value="true"/>
    <unitTest-battery type="dunit" bt.file="${tests.results.dir}/dunit/dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-dunit-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs the 64bit distributed unit tests. </description>
    <delete dir="${tests.results64.dir}/dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <dunit-generate-hydra-config dunitOutDir="${tests.results64.dir}/dunit"/>
    <unitTest-battery type="dunit" bt.file="${tests.results64.dir}/dunit/dunit-tests.bt" skipHydraClean="true" resultsDir="${tests.results64.dir}" jvm="${unittest.java64}" dprop="${d64prop}" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-gemfirexd-dunit-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the distributed unit tests related to gemfirexd. </description>
    <property name="dunit.tests.outdir" value="gfxd-dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <delete dir="${tests.results.dir}/${dunit.tests.outdir}"/>
    <dunit-generate-hydra-config dunitOutDir="${tests.results.dir}/${dunit.tests.outdir}" dunit.testlist="${gemfirexd.dunit.testlist}" btFile="${tests.results.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.bt" confFile="${tests.results.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.conf"/>
    <unitTest-battery type="${dunit.tests.outdir}" bt.file="${tests.results.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-gemfirexd-dunit-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs the 64bit distributed unit tests related to gemfirexd. </description>
    <property name="dunit.tests.outdir" value="gfxd-dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <delete dir="${tests.results64.dir}/${dunit.tests.outdir}"/>
    <dunit-generate-hydra-config dunitOutDir="${tests.results64.dir}/${dunit.tests.outdir}" dunit.testlist="${gemfirexd.dunit.testlist}" btFile="${tests.results64.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.bt" confFile="${tests.results64.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.conf"/>
    <unitTest-battery type="${dunit.tests.outdir}" bt.file="${tests.results64.dir}/${dunit.tests.outdir}/gemfirexd-dunit-tests.bt" skipHydraClean="true" resultsDir="${tests.results64.dir}" jvm="${unittest.java64}" dprop="${d64prop}" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-custom-dunit-tests" depends="props">
    <loadfile srcFile="custom-dunits" property="custom.dunit.src">
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="\.java$" replace=""/>
          <replacestring from="." to="${file.separator}"/>
          <replaceregex pattern="[\\/]class$" replace=""/>
          <replaceregex pattern="^tests[\\/]" replace=""/>
        </tokenfilter>
        <suffixlines suffix=".class"/>
      </filterchain>
    </loadfile>

    <pathconvert property="custom.dunit.paths" pathsep=",">
      <filelist dir="/" files="${custom.dunit.src}"/>
      <map from="/" to=""/>
    </pathconvert> 
    <patternset id="dunit.custom.testlist" includes="${custom.dunit.paths}"/>
    <property name="dunit.testlist" value="dunit.custom.testlist"/>
    <antcall target="run-dunit-tests" inheritRefs="true"/>
  </target>

  <target name="run-wan-dunit-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the WAN 7.0 distributed unit tests. </description>
    <property name="wan.tests.outdir" value="wan-dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <delete dir="${tests.results.dir}/${wan.tests.outdir}"/>
    <dunit-generate-hydra-config dunitOutDir="${tests.results.dir}/${wan.tests.outdir}" dunit.testlist="${wan.dunit.testlist}" btFile="${tests.results.dir}/${wan.tests.outdir}/wan-dunit-tests.bt" confFile="${tests.results.dir}/${wan.tests.outdir}/wan-dunit-tests.conf" includeFile="$JTESTS/dunit/impl/dunitWan.inc"  systemCount="3"/>
    <unitTest-battery type="${wan.tests.outdir}" bt.file="${tests.results.dir}/${wan.tests.outdir}/wan-dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-wan-dunit-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs the WAN 7.0 distributed unit tests on 64bit JVM. </description>
    <property name="wan.tests.outdir" value="wan-dunit"/>
    <property name="bt.removePassedTest" value="true"/>
    <delete dir="${tests.results64.dir}/${wan.tests.outdir}"/>
    <dunit-generate-hydra-config dunitOutDir="${tests.results64.dir}/${wan.tests.outdir}" dunit.testlist="${wan.dunit.testlist}" btFile="${tests.results64.dir}/${wan.tests.outdir}/wan-dunit-tests.bt" confFile="${tests.results64.dir}/${wan.tests.outdir}/wan-dunit-tests.conf" includeFile="$JTESTS/dunit/impl/dunitWan.inc"  systemCount="3"/>
    <unitTest-battery type="${wan.tests.outdir}" bt.file="${tests.results64.dir}/${wan.tests.outdir}/wan-dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-failed-dunit-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs any dunit tests that failed in the previous run.</description>
    <property name="dunit.rerun.dir" location="${tests.results.dir}/dunit-rerun"/>
    <delete dir="${dunit.rerun.dir}"/>
    <pathconvert property="dunit.failedtests" pathsep=",">
      <fileset dir="${tests.results.dir}/dunit" casesensitive="false">
        <include name="**/failures/*.txt"/>
      </fileset>
      <chainedmapper>
        <unpackagemapper from="*.txt" to="*.class"/>
        <regexpmapper handledirsep="true" from="^.*/failures/(.*)$" to="\1"/>
      </chainedmapper>
    </pathconvert>
    <patternset id="dunit.failedtests.pattern" includes="${dunit.failedtests}"/>
    <echo>Failed test list is ${dunit.failedtests}</echo>
    <dunit-generate-hydra-config dunitOutDir="${dunit.rerun.dir}" dunit.testlist="dunit.failedtests.pattern"/>
    <unitTest-battery type="dunit-rerun" bt.file="${dunit.rerun.dir}/dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="run-failed-dunit-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs any dunit results64 tests that failed in the previous run.</description>
    <property name="dunit.rerun.dir" location="${tests.results64.dir}/dunit-rerun"/>
    <delete dir="${dunit.rerun.dir}"/>
    <pathconvert property="dunit.failedtests" pathsep=",">
      <fileset dir="${tests.results64.dir}/dunit" casesensitive="false">
        <include name="**/failures/*.txt"/>
      </fileset>
      <chainedmapper>
        <unpackagemapper from="*.txt" to="*.class"/>
        <regexpmapper handledirsep="true" from="^.*/failures/(.*)$" to="\1"/>
      </chainedmapper>
    </pathconvert>
    <patternset id="dunit.failedtests.pattern" includes="${dunit.failedtests}"/>
    <echo>Failed test list is ${dunit.failedtests}</echo>
    <dunit-generate-hydra-config dunitOutDir="${dunit.rerun.dir}" dunit.testlist="dunit.failedtests.pattern"/>
    <unitTest-battery type="dunit-rerun" bt.file="${dunit.rerun.dir}/dunit-tests.bt" skipHydraClean="true" threshold="${threshold.dunit}"/>
  </target>

  <target name="find-hung-dunit-tests" depends="-keep-going">
    <description>Finds any dunit hangs and translates them into xml files that cruisecontrol can use for reporting</description>
    <!--<mkdir dir="${tests.results.dir}/hangs"/>-->
    <copy todir="${tests.results.dir}">
      <fileset dir="${tests.results.dir}" includes="**/HungDUnitTest.txt"/>
      <globmapper from="*/failures/HungDUnitTest.txt" to="*/../xml-reports/HungDUnitTest.xml"/>
    </copy>
    <replaceregexp>
      <regexp pattern="^(.*)$"/>
      <substitution expression="&lt;dunithang&gt;\1 &lt;/dunithang&gt;"/>
      <fileset dir="${tests.results.dir}">
        <include name="**/HungDUnitTest.xml"/>
      </fileset>
    </replaceregexp>
  </target>

  <target name="find-hung-dunit-tests64" depends="-keep-going">
    <description>Finds any dunit hangs and translates them into xml files that cruisecontrol can use for reporting</description>
    <!--<mkdir dir="${tests.results64.dir}/hangs"/>-->
    <copy todir="${tests.results64.dir}">
      <fileset dir="${tests.results64.dir}" includes="**/HungDUnitTest.txt"/>
      <globmapper from="*/failures/HungDUnitTest.txt" to="*/../xml-reports/HungDUnitTest.xml"/>
    </copy>
    <replaceregexp>
      <regexp pattern="^(.*)$"/>
      <substitution expression="&lt;dunithang&gt;\1 &lt;/dunithang&gt;"/>
      <fileset dir="${tests.results64.dir}">
        <include name="**/HungDUnitTest.xml"/>
      </fileset>
    </replaceregexp>
  </target>

  <target name="run-statssmoke-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the stats smoke tests. </description>
    <delete dir="${tests.results.dir}/statssmoke"/>
    <unitTest-battery type="statssmoke" bt.file="${stats.smoke.bt}" resultsDir="${tests.results.dir}"/>
  </target>
    
  <target name="run-smoke-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the smoke tests. </description>
    <delete dir="${tests.results.dir}/smoke"/>
    <property name="bt.removePassedTest" value="true"/>
    <property name="provideXMLReport" value="true"/>
    <unitTest-battery type="smoke" bt.file="${smoketest.bt}" resultsDir="${tests.results.dir}"/>
  </target>

  <target name="run-smoke-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs the 64bit smoke tests. </description>
    <delete dir="${tests.results64.dir}/smoke"/>
    <property name="bt.removePassedTest" value="true"/>
    <property name="provideXMLReport" value="true"/>
    <unitTest-battery type="smoke" bt.file="${smoketest.bt}" resultsDir="${tests.results64.dir}" jvm="${unittest.java64}" dprop="${d64prop}"/>
  </target>

  <target name="run-moresmoke-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the moresmoke tests. </description>
    <delete dir="${tests.results.dir}/moresmoke"/>
    <property name="bt.removePassedTest" value="true"/>
    <property name="provideXMLReport" value="true"/>
    <unitTest-battery type="moresmoke" bt.file="${moresmoke.bt}" resultsDir="${tests.results.dir}" threshold="${threshold.moresmoke}"/>
  </target>

  <target name="run-moresmoke-tests64" depends="props, define-test-groups, -keep-going">
    <description>Runs the 64bit moresmoke tests. </description>
    <delete dir="${tests.results64.dir}/moresmoke"/>
    <property name="bt.removePassedTest" value="true"/>
    <property name="provideXMLReport" value="true"/>
    <unitTest-battery type="moresmoke" bt.file="${moresmoke.bt}" resultsDir="${tests.results64.dir}" jvm="${unittest.java64}" dprop="${d64prop}" threshold="${threshold.moresmoke}"/>
  </target>

  <target name="run-memscale-suite-tests" depends="props, define-test-groups, -keep-going">
    <description>Runs the memscale tests (memscale.bt). </description>
    <delete dir="${tests.results.dir}/memscale-suite"/>
    <unitTest-battery type="memscale-suite" bt.file="${memscale-suite.bt}" resultsDir="${tests.results.dir}"/>
  </target>

  <target name="setbat" unless="bat">
    <!--windows config -->
    <condition property="shell" value="cmd">
       <os family="windows"/>
    </condition>
    <condition property="shell.arg" value="/c">
       <os family="windows"/>
    </condition>
    <condition property="bat" value=".bat">
       <os family="windows"/>
    </condition>
    <condition property="ant.noconfig.arg" value="">
      <os family="windows"/>
    </condition>
    <!-- non-windows defaults -->
    <property name="bat" value=""/>
    <property name="shell" value="bash"/>
    <property name="shell.arg" value="--norc"/>
    <property name="ant.noconfig.arg" value="--noconfig"/>
  </target>

  <target name="update-svn" depends="props">
    <description>Updates the current gemfire checkout revision.</description>

    <property name="svn.logfile" value="update-svn.log"/>
    <property name="svn.hist.logfile" value=".svn-history.log"/>
    <property name="git.branch" value=".git/.git-branch.log"/>
    <delete file="${svn.logfile}" quiet="true"/>

    <!-- Need finally block for svn update because it may actually
         perform a lot of updates before failing, and we want to capture
         those in .svn-history.log -->
    <trycatch>
      <try>
        <exec executable="svn" failonerror="true" output="${svn.logfile}">
          <arg value="update"/>
          <arg value="--accept"/>
          <arg value="postpone"/>
        </exec>
      </try>
      <finally>
        <exec executable="svn" append="true" output="${svn.logfile}">
          <arg value="status"/>
        </exec>
      </finally>
    </trycatch>

    <antcall inheritAll="true" target="make-last-update"/>

    <concat append="true" fixlastline="true" destfile="${svn.hist.logfile}" >
==============================
</concat>  <!-- Leave the two lines above as is so they concat properly -->

    <concat append="true" fixlastline="true" destfile="${svn.hist.logfile}">
      <filelist dir="${basedir}" files="build-artifacts/build.number"/>
      <filelist dir="${basedir}" files="${svn.logfile}"/>
    </concat>

    <echo message="Checking for update conflicts in ${svn.logfile}" level="info"/>

    <exec executable="grep" resultproperty="grepExitStatus">
      <arg value="^C "/>
      <arg value="${svn.logfile}"/>
    </exec>
    <condition property="grepFailed">
      <equals arg1="${grepExitStatus}" arg2="0"/>
    </condition>

    <fail if="grepFailed" message="SVN update conflicts detected."/>
  </target>

  <target name="update-git" depends="props">
    <description>Updates the sources to latest revision.</description>

    <property name="git.logfile" value="update-git.log"/>
    <property name="git.hist.logfile" value=".git-history.log"/>
    <property name="git.branch" value=".git/.git-branch.log"/>
    <delete file="${git.logfile}" quiet="true"/>

    <!-- Need finally block for git pull because it may actually
         perform a lot of updates before failing, and we want to capture
         those in .git-history.log -->
    <trycatch>
      <try>
        <exec executable="git" resultproperty="gitpullExitStatus" output="${git.logfile}">
          <arg value="pull"/>
        </exec>
      </try>
      <finally>
        <exec executable="git" append="true" output="${git.logfile}">
          <arg value="status"/>
        </exec>
      </finally>
    </trycatch>

    <condition property="gitpullFailed">
      <equals arg1="${gitpullExitStatus}" arg2="1"/>
    </condition>
    <if>
      <isset property="gitpullFailed"/>
      <then>
        <exec executable="cat" >
          <arg value="${git.logfile}"/>
        </exec>
        <fail if="gitpullFailed" message="git pull failed. See ${git.logfile} for details."/>
      </then>
    </if>

    <delete file="${build.dir}/${last.update.file}" quiet="true"/>
    <antcall inheritAll="true" target="make-last-update"/>

    <concat append="true" fixlastline="true" destfile="${git.hist.logfile}" >
==============================
</concat>  <!-- Leave the two lines above as is so they concat properly -->

    <concat append="true" fixlastline="true" destfile="${git.hist.logfile}">
      <filelist dir="${basedir}" files="build-artifacts/build.number"/>
      <filelist dir="${basedir}" files="${git.logfile}"/>
    </concat>
  </target>

  <target name="rcs-init">
    <available file=".git" type="dir" property="git.present"/>
    <available file=".svn" type="dir" property="svn.present"/>
  </target>

  <target name="make-last-update" depends="rcs-init" unless="skipLastUpdate">
    <description>Creates a file that contains the time at which the
         GemFire checkout was last updated</description>

    <mkdir dir="${build.dir}"/>

    <!-- Make Last Update File with SVN workspace -->
    <if>
      <isset property="svn.present"/>
      <then>
        <delete file="${build.dir}/${last.update.file}" quiet="true"/>
        <echo level="info" message="Querying SVN Workspace Information" />
        <svnSetting client="cli" dateformatter="MM/dd/yyyy HH:mm:ss z" id="svn.settings"/>
          <!-- Get svn info of the SVN workspace -->
          <svn refid="svn.settings">
            <info target="."/>
          </svn>
          <propertyregex property="source.branch"
            input="${svn.info.url}"
            regexp="^https\:\/\/svn\.gemstone\.com\/repos\/"
            replace=""
            casesensitive="false" />
        </then>
        <elseif>
          <isset property="git.present"/>
          <then>
            <property name="git.status" value="${basedir}/.git/.git-status.log"/>
            <echo level="info" message="Querying GIT Workspace Information..." />

            <exec executable="git" failonerror="false" output="${git.status}">
              <arg value="log"/>
              <arg value="--grep=git-svn-id"/>
              <arg value="-1"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.branch">
              <arg value="rev-parse"/>
              <arg value="--abbrev-ref"/>
              <arg value="HEAD"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.revision">
              <arg value="rev-parse"/>
              <arg value="HEAD"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="GIT.source.date">
              <arg value="show"/>
              <arg value="-s"/>
              <arg value="--format=%cD"/>
              <arg value="${GIT.source.revision}"/>
            </exec>

            <exec executable="git" failonerror="false" outputproperty="TEMPGIT.build.number">
              <arg value="rev-list"/>
              <arg value="origin/${GIT.source.branch}"/>
              <arg value="--count"/>
            </exec>

          </then>
        </elseif>
        <else>
          <echo level="info" message="No revision control information found"/>
        </else>
    </if>

    <!-- If git version is old then dash-dash-count switch doesn't work so use date string instead -->
    <if>
      <contains string="${TEMPGIT.build.number}" substring="usage" />
      <then>
        <tstamp>
          <format property="GIT.build.number" pattern="MMddyy"/>
        </tstamp>
        <echo message="Falling back to date string for build.number due to older git version." level="info"/>
      </then>
      <else>
        <property name="GIT.build.number" value="${TEMPGIT.build.number}"/>
      </else>
    </if>

    <!-- Load lastUpdate.txt properties with prefix to avoid setting -->
    <property file="${build.dir}/${last.update.file}" prefix="PROP" prefixValues="true"/> 

    <if>
      <equals arg1="${GIT.source.revision}" arg2="${PROP.source.revision}" />
      <then>
        <echo message="Source revision hasn't changed. Skipping property file update..." />
      </then>
    <else>
      <!-- Create LastUpdate Property File -->
      <echo message="Updating build-artifacts property files..." level="info"/>

      <property name="git.status" value="${basedir}/.git/.git-status.log"/>
      <delete file="${git.status}" quiet="true"/>
      <delete file="${build.dir}/${last.update.file}" quiet="true"/>

      <propertyfile comment="Information about a checkout" file="${build.dir}/${last.update.file}">
        <entry key="source.branch" value="${GIT.source.branch}"/>
        <entry key="source.date" value="${GIT.source.date}"/>
        <entry key="source.revision" value="${GIT.source.revision}"/>
      </propertyfile>

      <delete file="${build.dir}/build.number" quiet="true"/>
      <propertyfile comment="Build Number File" file="${build.dir}/build.number">
        <entry key="build.number" value="${GIT.build.number}"/>
      </propertyfile>
    </else>
   </if>

   <!-- Load lastUpdate.txt to set properties and print banner -->
   <property file="${build.dir}/${last.update.file}"/> 
   <property file="${build.dir}/build.number"/>
   <echo message="" level="info"/>
   <echo message="=========================================" level="info"/>
   <echo message="GemFire Version: ${gemfire.version} ${user.name} ${build.number}" level="info"/>
   <echo message="GemFireXD Version: ${gemfirexd.version} ${user.name} ${build.number}" level="info"/>
   <echo message="Source-branch: ${source.branch}" level="info"/>
   <echo message="Source-Date: ${source.date}" level="info"/>
   <echo message="Source-Revision: ${source.revision}" level="info"/>
   <echo message="=========================================" level="info"/>

  </target>

  <!-- dsmith - This target is called by the eclipse build in bin/eclipse_alt.
        If you change/remove it, let me or someone else know that maintains
        that eclipse setup. The eclipse launcher passes in two properties:
        hidden.dir and classes.dir. This task will output the license keys
        and GemFireVersion.properties to the eclipse output directory.  -->
  <target name="generate-eclipse-resources" depends="-generate-hidden-licenses, props">
    <property name="output.dir" location="${classes.dir}"/>
    <generateVersionResourceFile 
        resourcefile="GemFireVersion.properties"
        resourcepath="com/gemstone/gemfire/internal"
        productname="GemFire"
        productversion="${gemfire.version}"
        classesdir="${output.dir}"/>

    <generateVersionResourceFile
          resourcefile="GemFireXDVersion.properties"
          resourcepath="com/pivotal/gemfirexd/internal"
          productname="GemFireXD"
          productversion="${gemfirexd.version}"
          gemfireversion="${gemfire.version}"
          classesdir="${output.dir}"/>

    <subant buildpath="gemfirexd" antfile="build.xml">
        <property name="sanity" value="true"/>
        <property name="dontAutosetProps" value="true"/>
        <property name="out.dir" value="${output.dir}"/>
        <target name="setInitialProperties"/>
        <target name="versioninfo"/>
    </subant>

  </target>

  <target name="-generate-hidden-licenses">
    <description>
         Stores serial numbers for internal testing under the hidden directory.
         These are totally unrestricted permanent licenses which should never
         be given to a customer.
    </description>
    <echo>hidden.dir=${hidden.dir}</echo>
    <mkdir dir="${hidden.dir}"/>
    <echo file="${hidden.dir}/vf.gf.acn-serial-numbers.txt">----- license-vf-gf-66-t1-201105 (VMware vFabric GemFire Cache v5.0) -----${line.separator}VJ54K-DTD9L-M8JFP-0XXHZ-Q07FG  [quantity=65535, expiration=Permanent ]${line.separator}</echo>
    <echo file="${hidden.dir}/vf.gf.dmn-serial-numbers.txt">----- license-vf-gf-66-t2-201105 (VMware vFabric GemFire Data Management v5.0) -----${line.separator}Y150V-00XD3-08J8Z-04YUV-Z4PFV [quantity=65535, expiration=Permanent]${line.separator}----- license-vf-gf-66-t2-201105 (VMware vFabric GemFire Data Management Node v5.0) -----${line.separator}4H65K-FUH9Q-H8J90-01396-CJQKG [quantity=0, expiration=Permanent , addon=2]${line.separator}----- license-vf-gf-66-t2-201105 (VMware vFabric GemFire Data Management Node v5.0) -----${line.separator}156DH-AN0D7-M8R10-0J2F6-3TZHG [quantity=0, expiration=Permanent , addon=3]${line.separator}</echo>
    <echo file="${hidden.dir}/vf.sf-serial-numbers.txt">----- license-vf-sf-10-t1-201105 (VMware vFabric GemFireXD v5.0) -----${line.separator}Y550V-40GEL-M8H8P-0PP9T-Z4FFZ [quantity=65535, expiration=Permanent , addon=2]${line.separator}</echo>
  </target>

  <target name="build-product" depends="props, src, build-templates, pack-core, compile-quickstart, external-javadocs, compile-examples, compile-tutorial, generate-default-configs, pack-noncore, create-version-file, -generate-hidden-licenses"/>

  <target name="build-product-nodocs" depends="-skip-javadocs, build-product"/>

  <target name="-skip-javadocs" depends="props">
    <property name="skip.examples.jdocs" value="true"/>
    <property name="skip.internal.jdocs" value="true"/>
    <property name="skip.external.jdocs" value="true"/>
    <mkdir dir="${docs.dir}/internal"/>
    <mkdir dir="${docs.dir}/external"/>
    <mkdir dir="${docs.dir}/examples/dist"/>
  </target>

  <target name="pack-RNotes" depends="props">
    <delete file="${product.dir}/ReleaseNotes.txt" quiet="true"/>
    <property file="${build.dir}/build.number"/>
    <copy file="${basedir}/release/docfiles/gfxd-ReleaseNotes.txt"
            tofile="${product.dir}/ReleaseNotes.txt"/>

    <concat append="true" fixlastline="true" destfile="${product.dir}/ReleaseNotes.txt" >
--------------------------------
 Changes in ${gemfirexd.version} ${user.name} ${build.number}
--------------------------------
</concat>

    <concat append="true" fixlastline="true" destfile="${product.dir}/ReleaseNotes.txt">
      <filelist dir="${basedir}" files="RNDeltaChanges.txt"/>
    </concat>

    <!-- Place updates of files with intention they can be checked in -->
    <replace file="${product.dir}/ReleaseNotes.txt">
      <replacetoken><![CDATA[#]]></replacetoken>
      <replacevalue><![CDATA[]]></replacevalue>
    </replace>

    <replace file="${product.dir}/ReleaseNotes.txt">
      <replacetoken><![CDATA[
 Please keep text to 78 char width - no wider than this 
]]></replacetoken>
      <replacevalue><![CDATA[]]></replacevalue>
    </replace>

    <replace file="${product.dir}/ReleaseNotes.txt">
      <replacetoken><![CDATA[
 Use format Fixed Ticket 12345: description of changes

]]></replacetoken>
      <replacevalue><![CDATA[]]></replacevalue>
    </replace>

    <copy file="${product.dir}/ReleaseNotes.txt"
       tofile="${basedir}/release/docfiles/gfxd-ReleaseNotes.txt.UPDATE"/>

    <copy file="${basedir}/RNDeltaChanges.txt"
       tofile="${basedir}/RNDeltaChanges.txt.UPDATE"/>
  </target>

  <target name="quick-build-product" depends="pack-core, pack-noncore, create-version-file"/>

  <target name="pack-docs" depends="props">
    <!-- includes everything from the export of gemfireDocs repos -->
    <path id="misc.docfiles">
      <fileset id="misc.docfiles.1" dir="${build.dir}/packDocs"/>
      <fileset id="misc.docfiles.2" dir="${basedir}/release/images" includes="watermark.gif,VMwareLogo.png"/>
      <fileset id="misc.docfiles.3" dir="${basedir}/release/docfiles"
        includes="copyright.html,support.html,DocIndex.css,index.html"/>
    </path>

    <copy preservelastmodified="true" overwrite="true" todir="${packTargetDir}/docs">
      <fileset refid="misc.docfiles.1"/>
      <fileset refid="misc.docfiles.2"/>
      <fileset refid="misc.docfiles.3"/>
    </copy>
  </target>

  <target name="pack-noncore" depends="props">
    <mkdir dir="${packTargetDir}/docs"/>
    <mkdir dir="${packTargetDir}/docs/japi"/>

    <copy preservelastmodified="true" todir="${packTargetDir}/docs/japi">
      <fileset dir="${docs.dir}/external">
      </fileset>
    </copy>

    <copy todir="${hidden.dir}/examples/dist/clientServerConfigs/server">
      <fileset dir="${templates.dir}/security">
          <include name="authz5_5.dtd"/>
      </fileset>
      <fileset dir="${tests.src.dir}/lib">
          <include name="authz-*.xml"/>
      </fileset>
    </copy>

    <copy todir="${packTargetDir}/templates" preservelastmodified="true">
      <fileset dir="${templates.dir}"/>
    </copy>

    <!-- Pack Sample Code to product -->
    <mkdir dir="${packTargetDir}/SampleCode"/>
    <copy preservelastmodified="true" todir="${packTargetDir}/SampleCode/examples">
      <fileset dir="${hidden.dir}/examples"> 
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${packTargetDir}/SampleCode/quickstart">
      <fileset dir="${quickstart.hidden.dir}"> 
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${packTargetDir}/SampleCode/tutorial">
      <fileset dir="${tutorial.hidden.dir}"> 
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${packTargetDir}/SampleCode/helloworld">
      <fileset dir="${helloworld.hidden.dir}"> 
      </fileset>
    </copy>
    <copy file="${basedir}/release/images/VMwareLogo.png"
      todir="${packTargetDir}/SampleCode"/>
    <copy file="${basedir}/release/docfiles/DocIndex.css"
      todir="${packTargetDir}/SampleCode"/>
    <copy file="${basedir}/release/docfiles/SampleCode_index.html"
      todir="${packTargetDir}/SampleCode"/>

    <!-- Add 3rd Party license file to product-->
    <copy file="${basedir}/release/3rdparty_licenses/open_source_licenses-VMware_vFabric_GemFire_7.0.1.txt"
      todir="${product.lib.dir}"/>

    <copy file="${basedir}/release/installer/vf_EULA.txt"
            tofile="${product.dir}/EULA.txt"/>

    <mkdir dir="${packTargetDir}/tools"/>
    <copy todir="${packTargetDir}/tools/vsd" preservelastmodified="true">
      <fileset dir="${vsd.dir}"/>
    </copy>

    <chmod perm="a+x">
      <fileset dir="${product.dir}/tools/vsd">
        <include name="bin/vsd*"/>
      </fileset>
    </chmod>

    <unzip src="${DiskConverter.zip}" dest="${product.dir}/tools/DiskConverterPre65to65"/>
      <chmod perm="a+x">
        <fileset dir="${product.dir}/tools/DiskConverterPre65to65">
          <include name="bin/DiskFileConverter.sh"/>
        </fileset>
      </chmod>
  </target>

  <target name="pack-core" depends="props, pack-native-libraries">
    <description>Packs corefiles to the gemfire product tree</description>
    <mkdir dir="${packTargetDir}"/>
    <mkdir dir="${packTargetDir}/bin"/>
    <mkdir dir="${packTargetDir}/lib"/>
    <mkdir dir="${packTargetDir}/dtd"/>

    <copy preservelastmodified="true" todir="${packTargetDir}/bin">
      <fileset dir="${scripts.dir}"
        includes="agent.bat,gemfire.bat,cacheserver.bat,agent,gemfire,cacheserver,gfsh.bat,gfsh"/>
    </copy>

    <chmod perm="a+x">
      <fileset dir="${packTargetDir}/bin">
        <include name="*.bat"/>
        <include name="agent"/>
        <include name="cacheserver"/>
        <include name="gemfire"/>
        <include name="gfsh"/>
      </fileset>
    </chmod>

    <fileset id="dtd.files" dir="${src.dir}/com/gemstone/gemfire">
      <include name="statisticsType.dtd"/>
      <include name="admin/doc-files/ds5_0.dtd"/>
      <include name="cache/doc-files/cache*.dtd"/>
    </fileset>

    <copy todir="${packTargetDir}/dtd" flatten="true"
      preservelastmodified="true">
      <fileset refid="dtd.files"/>
    </copy>
  </target>

  <target name="pack-native-libraries" depends="props">
    <property name="nativelibraries.dir" value="${basedir}/src/lib"/>
    <fileset id="lib.files" dir="${nativelibraries.dir}"
      includes="gemfire.dll,gemfire64.dll,libgemfire.so,libgemfire64.so,libgemfire_sol.so,libgemfire_sol64.so"/>
    <copy preservelastmodified="true" todir="${packTargetDir}/lib">
      <fileset refid="lib.files"/>
      <!-- Disabling the use of the hadoop native library because
           It segv's on platforms with older glibc versions (2.4 and 2.5) 
           definitely don't work. See bug 48178 -->
      <!--<fileset file="${libhadoop.so}"/>-->
    </copy>
    <fileset id="snappy.files" dir="${snappy.dir}/linux"/>
    <copy preservelastmodified="true" todir="${packTargetDir}/lib">
      <fileset refid="snappy.files"/>
    </copy>
    <fileset id="snappy.files" dir="${snappy.dir}/windows"/>
    <copy preservelastmodified="true" todir="${packTargetDir}/lib">
      <fileset refid="snappy.files"/>
    </copy>
    <chmod perm="a+x">
      <fileset dir="${packTargetDir}/lib" includes="*.dll,*.so*"/>
    </chmod>
  </target>

  <target name="create-version-file" depends="props">
    <delete file="${product.lib.dir}/GemFireVersion.properties" quiet="true"/>
    <exec dir="${basedir}" executable="${product.dir}/bin/gemfire${bat}"
          failifexecutionfails="true">
      <env key="GF_JAVA" value="${javac.primary}/bin/java"/>
      <arg value="version"/>
      <arg line="CREATE"/>
      <env key="EXTRA_CLASSPATH" value="${contest.dir}/Lib/ConTest.jar"/>
    </exec>
  </target>

  <target name="generate-default-configs" depends="props">
    <description>Packs the defaultsConfigs directory into the gemfire product tree</description>

    <delete dir="${product.dir}/defaultConfigs" quiet="true"/>
    <mkdir dir="${product.dir}/defaultConfigs"/>
    <java classname="com.gemstone.gemfire.distributed.internal.DistributionConfigImpl" failonerror="true" fork="true" dir="${product.dir}/defaultConfigs">
      <classpath>
        <pathelement path="${classes.dir}"/>
        <pathelement location="${contest.dir}/Lib/ConTest.jar"/>
      </classpath>
    </java>
    <java classname="com.gemstone.gemfire.internal.cache.xmlcache.CacheXmlGenerator" failonerror="true" fork="true" dir="${product.dir}/defaultConfigs">
      <classpath>
        <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
        <pathelement location="${contest.dir}/Lib/ConTest.jar"/>
      </classpath>
    </java>

  </target>

  <!-- Execute a hydra test (single .conf file) -->
  <target name="execute-hydra-test" depends="execute-battery" description="run a hydra test conf specified by property -Dhydra.conf"/>

  <target name="clean-hydra-results" depends="props">
    <if>
      <istrue value="${skip.hydra.clean}"/>
    <then>
    </then>
    <else>
      <property location="${tests.results.dir}/battery" name="bt.result.dir"/>
      <delete dir="${bt.result.dir}"/>
    </else>
    </if>
  </target>

  <!-- Execute a hydra battery test (single .bt file) -->
  <target name="execute-battery" depends="clean-hydra-results, compile-tests, execute-battery-nobuild"/>
  <!-- clean-hydra-results is redundent hear, but I (Matt) want it to
        fail fast on windows in case I'm still sitting in the result directory
        from the previous run...  ant will combine the dependencies anyway...
     -->

  <!-- Execute a hydra battery test (single .bt file) without repacking confs and compiling tests -->
  <target name="execute-battery-nobuild" depends="clean-hydra-results, define-classpath-refs, -gfxd-props, -gfxd-define-classpath-refs, -keep-going">
    <description>
    Runs a bt file specified by property -Dbt.file or -Dhydra.conf, the default result directory is .../tests/results/battery, this may be overridden with -Dbt.result.dir, extra arguments to battery test may be specified with -Dbt.args"
    </description>

    <property name="bt.result.dir" location="${tests.results.dir}/battery"/>
    <mkdir dir="${bt.result.dir}"/>
    <conditional if="hydra.conf">
      <echo message="Executing Hydra conf ${hydra.conf}" level="info"/>
      <!--<property name="bt.file" value="current.bt"/>-->
      <echo file="${bt.result.dir}/${bt.file}" message="${hydra.conf}" level="info"/>
    </conditional>
    <echo message="Executing .bt file  ${bt.file}" level="info"/>
    <conditional if="local.conf">
      <copy file="${local.conf}" tofile="${bt.result.dir}/local.conf"/>
    </conditional>

    <if><equals arg1="${mergeLogFiles}" arg2="true"/>
      <then>
        <echo append="true" file="${bt.result.dir}/local.conf"
          message="hydra.log.LogPrms-mergeLogFiles = true;" level="info"/>
      </then>
      <else>
        <if><not><equals arg1="${mergeLogFiles}" arg2="false"/></not>
          <then>
            <conditional unless="local.conf">
              <echo append="true" file="${bt.result.dir}/local.conf" message="hydra.log.LogPrms-mergeLogFiles = onFailure;" level="info"/>
            </conditional>
          </then>
        </if>
      </else>
    </if>

    <conditional if="bt.args">
      <property name="extra.bt.args" value="${bt.args}"/>
    </conditional>
    <conditional unless="bt.args">
      <property name="extra.bt.args" value=""/>
    </conditional>
    <conditional if="myenv.JPROBE_HOME">
      <property name="jprobe.home" value="${myenv.JPROBE_HOME}"/>
    </conditional>
    <conditional unless="jprobe.home">
      <property name="jprobe.home" value="/dummyjprobedir"/>
    </conditional>
    <conditional unless="regression.extra.path">
      <property name="regression.extra.path" value=""/>
    </conditional>
    <conditional unless="bt.nukeHungTest">
      <property name="bt.nukeHungTest" value="true"/>
    </conditional>
    <property name="bt.log" location="${bt.result.dir}/batterytest.log"/>
    <property name="oneliner.txt" location="${bt.result.dir}/oneliner.txt"/>
    <property name="bt.numTimesToRun" value="1"/>
    <property name="bt.removePassedTest" value="false"/>
    <property name="bt.grepLogs" value="false"/>
    <property name="moveRemoteDirs" value="false"/>
    <property name="masterHeapMB" value="256"/>
    <property name="extra.jtests.dir" value=""/>
    <property name="bt.provideRegressionSummary" value="true"/>
    <property name="bt.provideBugReportTemplate" value="false"/>
    <property name="provideXMLReport" value="false"/>
    <property name="bt.release.dir" value="/export/gcm/where/${product}/releases"/>
    <dirname property="testJVM.dir" file="${testJVM}"/>

    <!-- FIX FOR BUG 48110 & 41184 -->
    <!-- Check test.type for gfxd-smoke or product for gemfirexd -->
    <!-- If gfxd-smoke test or product is gemfirexd, add gemfirexd.jar to classpath -->
    <!-- Else use default batterytest.classpath -->
    <if>
      <or>
        <equals arg1="${product}" arg2="gemfireXD" casesensitive="true"/>
        <equals arg1="${unittest.type}" arg2="gfxd-smoke" casesensitive="true"/>
      </or>
      <then>
        <path id="final.batterytest.classpath">
          <pathelement location="${gemfirexd.jar}"/>
          <path refid="batterytest.classpath"/>
        </path>
      </then>
      <else>
        <path id="final.batterytest.classpath">
          <path refid="batterytest.classpath"/>
        </path>
      </else>
    </if>

    <parallel>
      <sequential>
        <java classname="batterytest.BatteryTest" jvm="${testJVM}" fork="true" dir="${bt.result.dir}" failonerror="false" resultProperty="${bt.result.status}">
          <classpath>
            <!-- FIX FOR BUG 48110 & 41184 -->
            <path refid="final.batterytest.classpath"/>
          </classpath>

          <env key="GEMFIRE" value="${product.dir}"/>
          <env key="GEMFIREXD" value="${gemfirexd.product.dir}"/>
          <env key="JUNIT_JAR" value="${junit.jar}"/>
          <env key="ODBCSYSINI" value="${gemfirexd.odbc.testdir}"/>
          <env key="ODBCINI" value="${gemfirexd.odbc.testdir}"/>
          <env key="${library.path}" value="${product.lib.dir}:${hiddenlib.dir}"/>
          <env key="PATH" path="${product.dir}/bin;${hiddenlib.dir};${testJVM.dir};${env.path}"/>
          <env key="TEST_MODE_NON_TX" value="${test-mode-non-tx}"/>

          <sysproperty key="GEMFIRE" value="${product.dir}"/>
          <sysproperty key="JPROBE" value="${jprobe.home}"/>
          <sysproperty key="JTESTS" value="${tests.classes.dir}"/>
          <sysproperty key="GEMFIREXD" value="${gemfirexd.product.dir}"/>
          <sysproperty key="EXTRA_JTESTS" value="${extra.jtests.dir}"/>
          <sysproperty key="osbuild.dir" value="${osbuild.dir}"/>
          <sysproperty key="REGRESSION_EXTRA_PATH" value="${regression.extra.path}"/>
          <sysproperty key="RELEASE_DIR" value="${bt.release.dir}" />
          <sysproperty key="testFileName" value="${bt.file}"/>
          <sysproperty key="resultDir" value="${bt.result.dir}"/>
          <sysproperty key="numTimesToRun" value="${bt.numTimesToRun}"/>
          <sysproperty key="removePassedTest" value="${bt.removePassedTest}"/>
          <sysproperty key="grepLogs" value="${bt.grepLogs}"/>
          <sysproperty key="provideRegressionSummary" value="${bt.provideRegressionSummary}"/>
          <sysproperty key="provideBugReportTemplate" value="${bt.provideBugReportTemplate}"/>
          <sysproperty key="nukeHungTest" value="${bt.nukeHungTest}"/>
          <sysproperty key="provideXMLReport" value="${provideXMLReport}"/>
          <sysproperty key="moveRemoteDirs" value="${bt.moveRemoteDirs}"/>
          <sysproperty key="moveHadoopData" value="${bt.moveHadoopData}"/>
          <sysproperty key="masterHeapMB" value="${bt.masterHeapMB}"/>
          <sysproperty key="useSSH" value="${useSSH}"/>
          <sysproperty key="test.use-odbc-bridge" value="${gemfirexd.odbc.testrun}"/>
          <sysproperty key="http.proxyHost" value="${http.proxyHost}"/>
          <sysproperty key="http.proxyPort" value="${http.proxyPort}"/>
          <sysproperty key="codeCoverage" value="${jacoco-agent.config}"/>

          <jvmarg line="${jacoco-agent.config}"/>

          <arg line="${extra.bt.args}"/>
        </java>
        <!-- find the output and determine if we failed. -->
        <loadfile property="bt.log.content" srcFile="${bt.log}"/>
        <condition property="bt.test.failed">
          <contains string="${bt.log.content}" substring="runbattery() returned false"/>
        </condition>
        <loadfile property="oneliner.txt.content" srcFile="${oneliner.txt}"/>
        <echo message="${oneliner.txt.content}" level="info"/>
        <if>
          <contains string="${unittest.type}" substring="dunit" />
          <then>
            <conditional if="bt.test.failed">
              <echo message="FAILED: ${unittest.type} tests failures in ${bt.result.dir}" level="error"/>
              <echo append="true" file="${bt.result.dir}/dunitTestFailures"
                    message="FAILED: ${unittest.type} test failures in ${bt.result.dir}" level="error"/>
              <fail message="FAILED: ${unittest.type} tests failed"/>
            </conditional>
            <conditional unless="bt.test.failed">
              <echo level="info" message="Info: dunit tests ran successfully."/>
            </conditional>
          </then>
          <elseif>
            <or>
              <equals arg1="${unittest.type}" arg2="smoke" />
              <equals arg1="${unittest.type}" arg2="gfxd-smoke" />
            </or>
            <then>
              <conditional if="bt.test.failed">
                <echo message="FAILED: Smoke unit tests failures in ${bt.result.dir}" level="error"/>
                <echo append="true" file="${bt.result.dir}/smokeTestFailures"
                      message="FAILED: Smoke unit test failures in ${bt.result.dir}" level="error"/>
                <fail message="FAILED: Smoke unit tests failed"/>
                </conditional>
              <conditional unless="bt.test.failed">
                <echo level="info" message="Info: Smoke tests ran successfully."/>
              </conditional>
            </then>
          </elseif>
          <elseif>
            <equals arg1="${unittest.type}" arg2="cruisecontrolbt" />
            <then>
              <conditional if="bt.test.failed">
                <echo message="FAILED: cruisecontrolbt tests failures in ${bt.result.dir}" level="error"/>
                <echo append="true" file="${bt.result.dir}/cruisecontrolbtTestFailures"
                      message="FAILED: cruisecontrolbt test failures in ${bt.result.dir}" level="error"/>
                <fail message="FAILED: ${unittest.type} tests failed"/>
              </conditional>
              <conditional unless="bt.test.failed">
                <echo level="info" message="Info: cruisecontrolbt tests ran successfully."/>
              </conditional>
            </then>
          </elseif>
          <elseif>
            <equals arg1="${unittest.type}" arg2="moresmoke" />
            <then>
              <conditional if="bt.test.failed">
                <echo message="FAILED: moresmoke tests failures in ${bt.result.dir}" level="error"/>
                <fail message="FAILED: moresmoke tests failed"/>
              </conditional>
              <conditional unless="bt.test.failed">
                <echo level="info" message="Info: moresmoke tests ran successfully."/>
              </conditional>
            </then>
          </elseif>
          <!-- special condition for perfs to not fail so archiving happens -->
          <elseif>
            <equals arg1="${unittest.type}" arg2="perf" />
            <then>
              <echo level="info" message="Info: perf tests done. Archiving results..."/>
            </then>
          </elseif>
          <else>
            <fail if="bt.test.failed"/>
          </else>
        </if>
      </sequential>
      <sequential>
        <waitfor maxwait="30" maxwaitunit="second">
          <available file="${bt.log}"/>
        </waitfor>
        <echo message="Started batterytest, see log ${bt.log}" level="info"/>
      </sequential>
    </parallel>
  </target>

  <!-- START OF TARGETS: GemFire Tools -->
  <target name="build-gfmodules" depends="props">
    <!-- If ${gfmodules.release} is set, use the release binary, else build new -->
    <if>
      <isset property="gfmodules.release"/>
      <then>
        <if>
          <equals arg1="${gfmodules.release}" arg2=""/>
          <then>
            <fail message="gfmodules.release property is empty"/>
          </then>
        </if>
        <delete dir="${product.dir}/tools/Modules"/>
        <echo level="info" message="Copying GemFire Modules Release from ${gfmodules.release}"/>
        <copy todir="${product.dir}/tools/Modules" preservelastmodified="true">
          <fileset dir="${gfmodules.release}"/>
        </copy>
      </then>
      <else>
        <property name="gfmodules.skipTest" value="false"/>

        <delete dir="${osbuild.dir}/GFModules_tmp" quiet="true"/>
        <delete dir="${product.dir}/tools/Modules" quiet="true"/>
        <echo level="info" message="Checking out GemFireModules/Trunk..."/>
        <svnSetting client="cli" dateformatter="MM/dd/yyyy HH:mm:ss z" id="svn.settings"/>
        <svn refid="svn.settings">
          <checkout url="https://svn.gemstone.com/repos/gemfireModules/trunk" destPath="${osbuild.dir}/GFModules_tmp"/>
        </svn>
        <echo level="info" message="Checkout Complete"/>

        <!-- Build modules through maven ant task -->
        <record name="${osbuild.dir}/GFModules_tmp/buildGFModules.log" action="start"/>
        <artifact:mvn pom="${osbuild.dir}/GFModules_tmp/pom.xml" mavenHome="${gcm.dir}/where/maven/apache-maven-2.2.0" fork="true">
          <arg value="clean"/>
          <arg value="install"/>
          <arg value="-Dmaven.test.skip=${gfmodules.skipTest}"/>
        </artifact:mvn>
        <record name="${osbuild.dir}/GFModules_tmp/buildGFModules.log" action="stop"/>
    
        <!-- Get Test Results -->
        <concat fixlastline="yes" destfile="${osbuild.dir}/GFModules_tmp/GFModules_testresults.txt">
          <header>${line.separator}${line.separator}</header>
          <fileset dir="${osbuild.dir}/GFModules_tmp"
                   includes="**/target/surefire-reports/*.txt"/>
        </concat>

        <!-- Copy output to product tree -->
        <copy todir="${product.dir}/tools/Modules">
          <fileset dir="${osbuild.dir}/GFModules_tmp/gemfire-modules-assembly/target">
            <include name="*.zip"/>
            <include name="*.gz"/>
          </fileset>
        </copy>
      </else>
    </if>
  </target>

  <target name="build-databrowser" depends="props,-define-test-macros">
    <!-- If ${databrowser.release} is set, use the release binary, else build new -->
    <if>
      <isset property="databrowser.release"/>
      <then>
        <if>
          <equals arg1="${databrowser.release}" arg2=""/>
          <then>
            <fail message="databrowser.release property is empty"/>
          </then>
        </if>
        <delete dir="${product.dir}/tools/DataBrowser"/>
        <echo level="info" message="Copying DataBrowser Release from ${databrowser.release}"/>
        <copy todir="${product.dir}/tools/DataBrowser" preservelastmodified="true">
          <fileset dir="${databrowser.release}"/>
        </copy>
        <!-- Ant/Java copy does not preserve permissions -->
        <chmod perm="a+x">
          <fileset dir="${product.dir}/tools/DataBrowser/bin">
            <include name="*"/>
          </fileset>
        </chmod>
      </then>
      <else>
        <delete dir="${osbuild.dir}/DataBrowser_tmp" quiet="true"/>
        <delete dir="${product.dir}/tools/DataBrowser" quiet="true"/>
        <echo level="info" message="Checking out DataBrowser/Trunk..."/>
        <svnSetting client="cli" dateformatter="MM/dd/yyyy HH:mm:ss z" id="svn.settings"/>
        <svn refid="svn.settings">
          <checkout url="https://svn.gemstone.com/repos/tools/DataBrowser/trunk" destPath="${osbuild.dir}/DataBrowser_tmp"/>
        </svn>
        <echo level="info" message="Checkout Complete"/>
        <!-- Build DataBrowser through ant -->
        <record name="${osbuild.dir}/DataBrowser_tmp/buildDataBrowser.log" action="start"/>
        <ant inheritAll="false" dir="${osbuild.dir}/DataBrowser_tmp" target="build-all">
          <property name="gemfire.dir" value="${osbuild.dir}"/>
        </ant>
        <ant inheritAll="false" dir="${osbuild.dir}/DataBrowser_tmp" target="run-dunit-tests">
          <property name="gemfire.dir" value="${osbuild.dir}"/>
        </ant>
        <record name="${osbuild.dir}/DataBrowser_tmp/buildDataBrowser.log" action="stop"/>
        <!-- Currently DataBrowser only runs DUnit tests -->
        <error-grep sourceDir="${osbuild.dir}/DataBrowser_tmp/build-artifacts/${gf.os}/tests/results/dunit" threshold="${threshold.dunit}" />

        <!-- Copy output to product tree -->
        <copy todir="${product.dir}/tools/DataBrowser">
          <fileset dir="${osbuild.dir}/DataBrowser_tmp/build-artifacts/${gf.os}/product/"/>
        </copy>

        <chmod perm="a+x">
          <fileset dir="${product.dir}/tools/DataBrowser/bin">
            <include name="*"/>
          </fileset>
        </chmod>
      </else>
    </if>
  </target>

  <target name="build-gemfire-webapp" depends="props">
    <echo level="info" message="Building Web Application WAR file for GemFire's REST interface..."/>

    <!-- setup the Web Application Archive (WAR file) directory structure -->
    <mkdir dir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/classes"/>
    <mkdir dir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib"/>

    <!-- copy the web deployment descriptor (web.xml) and Spring Web MVC Beans configuration files to the WAR -->
    <copy todir="${osbuild.dir}/Web_tmp/target/gemfire" overwrite="true" force="true">
      <fileset dir="${src.dir}/main/webapp/gemfire"/>
    </copy>

    <!-- compile the GemFire Spring Bean @Controller classes in src/com/gemstone/gemfire/management/internal/web to the WAR file (/WEB-INF/classes directory). -->
    <javac executable="${javac.primary}/bin/javac" fork="yes" includeAntRuntime="true" memoryMaximumSize="${max.memory}m"
           srcdir="${src.dir}/com/gemstone/gemfire/management/internal/web" destdir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/classes"
           encoding="UTF-8" source="1.7" target="1.7"
           debug="on" deprecation="${compile-gemfire.deprecation}" nowarn="off" optimize="off" verbose="off">
      <compilerarg value="-Werror"/>
      <classpath>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="${findbugs-annotations.jar}"/>
        <pathelement location="${spring-aop.jar}"/>
        <pathelement location="${spring-aspects.jar}"/>
        <pathelement location="${spring-beans.jar}"/>
        <pathelement location="${spring-context.jar}"/>
        <pathelement location="${spring-context-support.jar}"/>
        <pathelement location="${spring-core.jar}"/>
        <pathelement location="${spring-expression.jar}"/>
        <pathelement location="${spring-shell.jar}"/>
        <pathelement location="${spring-web.jar}"/>
        <pathelement location="${spring-web-servlet.jar}"/>
      </classpath>
    </javac>

    <!-- copy lib (JAR) dependencies to the WAR file (/WEB-INF/lib) -->
    <copy file="${spring-aop.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-aspects.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-beans.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-context.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-context-support.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-core.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-expression.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-oxm.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-web.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${spring-web-servlet.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>
    <copy file="${commons-fileupload.jar}" todir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/lib" force="true"/>

    <!-- create new gemfire-web.jar file -->
    <jar file="${product.lib.dir}/${gemfire-web.jar.name}" basedir="${osbuild.dir}/Web_tmp/target/gemfire/WEB-INF/classes"/>

    <!-- create the gemfire WAR file -->
    <jar file="${osbuild.dir}/Web_tmp/target/${gemfire.war.name}" basedir="${osbuild.dir}/Web_tmp/target/gemfire"/>

    <!-- copy the WAR file to the product tree -->
    <mkdir dir="${product.dir}/tools/Extensions"/>

    <copy file="${osbuild.dir}/Web_tmp/target/${gemfire.war.name}"
          tofile="${product.dir}/tools/Extensions/${gemfire.war.name}"
          overwrite="true"
          force="true"/>
  </target>

  <target name="build-pulse" depends="props,gfxd-props">
    <!-- If ${pulse.release} is set, use the release WAR file, else build new -->
    <if>
      <isset property="pulse.release"/>
      <then>
        <if>
          <equals arg1="${pulse.release}" arg2=""/>
          <then>
            <fail message="pulse.release property is empty"/>
          </then>
        </if>
        <delete dir="${product.dir}/tools/Pulse" quiet="true"/>
        <delete dir="${gemfirexd.product.dir}/tools/Pulse" quiet="true"/>
        <echo level="info" message="Copying GemFire Pulse Release from ${pulse.release}"/>

        <!-- Copy to GemFire and GemFireXD product trees, if available -->
        <if>
          <available type="dir" file="${product.dir}"/>
          <then>
            <copy todir="${product.dir}/tools/Pulse" preservelastmodified="true">
              <fileset dir="${pulse.release}"/>
            </copy>
          </then>
        </if>
      
        <if>
          <available type="dir" file="${gemfirexd.product.dir}"/>
          <then>
            <copy todir="${gemfirexd.product.dir}/tools/Pulse" preservelastmodified="true">
              <fileset dir="${pulse.release}"/>
            </copy>
          </then>
        </if>
      </then>
      <else>
        <delete dir="${osbuild.dir}/Pulse_tmp" quiet="true"/>
        <delete dir="${product.dir}/tools/Pulse" quiet="true"/>
        <delete dir="${gemfirexd.product.dir}/tools/Pulse" quiet="true"/>

        <property name="pulse-branch" value="141X_maint"/>
        <svnSetting client="cli" dateformatter="MM/dd/yyyy HH:mm:ss z" id="svn.settings"/>
        <exec executable="git" failonerror="true">
          <arg value="clone"/>
          <arg value="ssh://git@stash.eng.pivotal.io:2222/gemfire/pulse.git"/>
          <arg value="--branch"/>
          <arg value="${pulse-branch}"/>
          <arg value="${osbuild.dir}/Pulse_tmp"/>
        </exec>

        <echo level="info" message="Checkout Complete"/>
        <!-- Build Pulse through ant -->
        <record name="${osbuild.dir}/Pulse_tmp/buildPulse.log" action="start"/>
        <ant inheritAll="false" dir="${osbuild.dir}/Pulse_tmp" target="all"/>
        <record name="${osbuild.dir}/Pulse_tmp/buildPulse.log" action="stop"/>

        <!-- Copy output to GemFire and GemFireXD product trees, if available -->
        <loadproperties prefix="pulseprops">
          <file file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/target/WEB-INF/classes/pulseversion.properties"/>
        </loadproperties>
        <!-- Check for local release notes which need to be copied if exist -->
        <available file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/dist/Pulse_${pulseprops.pulse.version}_ReleaseNotes.txt" property="Pulse.RN.exists"/>
        <if>
          <available type="dir" file="${product.dir}"/>
          <then>
            <copy file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/dist/pulse-${pulseprops.pulse.version}.war" tofile="${product.dir}/tools/Pulse/pulse.war"/>
            <conditional if="Pulse.RN.exists">
              <copy file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/dist/Pulse_${pulseprops.pulse.version}_ReleaseNotes.txt" todir="${product.dir}/tools/Pulse"/>
            </conditional>
          </then>
        </if>

        <if>
          <available type="dir" file="${gemfirexd.product.dir}"/>
          <then>
            <copy file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/dist/pulse-${pulseprops.pulse.version}.war" tofile="${gemfirexd.product.dir}/tools/Pulse/pulse.war"/>
            <conditional if="Pulse.RN.exists">
              <copy file="${osbuild.dir}/Pulse_tmp/build-artifacts/${gf.os}/dist/Pulse_${pulseprops.pulse.version}_ReleaseNotes.txt" todir="${gemfirexd.product.dir}/tools/Pulse"/>
            </conditional>
          </then>
        </if>
      </else>
    </if>
  </target>
  
  <!-- END OF TARGETS: GemFire Tools -->
  <!--  =================  Sanctioned Build  ======================= -->

  <macrodef name="execute-perf">
    <attribute name="reportName"/>
    <attribute name="type"/>
    <attribute name="bt.file"/>
    <attribute name="resultsDir" default="${tests.results.dir}/@{type}"/>
    <attribute name="jvm" default="${testJVM}"/>
    <attribute name="manager.vmtype" default="server"/>
    <attribute name="perf.threshold" default="0"/>
    <sequential>
      <!-- Try and save old perf results to saved-results directory
      we use the perf.iteration file in the result directory
      to keep track of the number of perf runs on a single
      build.number so that we can rename perf results each
      time it's run.  -->

      <property name="savedresults.dir" value="${tests.out.dir}/saved-results"/>
      <echo message="savedresults.dir is ${savedresults.dir}" level="info"/>

      <delete dir="@{resultsDir}"/>
      <mkdir dir="@{resultsDir}"/>

      <conditional if="hosts.perf">
        <echo file="@{resultsDir}/local.conf" level="info">
hydra.VmPrms-type = @{manager.vmtype};
hydra.HostPrms-hostNames = fcn "hydra.TestConfigFcns.pool(\"${hosts.perf}\", 50)" ncf;
      </echo>
      </conditional>
      <conditional unless="hosts.perf">
        <echo file="@{resultsDir}/local.conf" level="info">
hydra.VmPrms-type = @{manager.vmtype};
        </echo>
      </conditional>

      <!-- Run the perf tests here and it can't fail -->
      <!-- Need to return from execute-battery-nobuild target to do archiving-->

      <antcall target="execute-battery-nobuild">
        <param name="skip.hydra.clean" value="true"/>
        <param name="testJVM" value="@{jvm}"/>
        <param name="bt.file" value="@{bt.file}"/>
        <param name="bt.result.dir" value="@{resultsDir}"/>
        <param name="bt.nukeHungTest" value="${NukeHungTests}"/>
        <param name="unittest.type" value="perf"/>
      </antcall>

      <property file="${build.dir}/build.number"/>

      <mkdir dir="${savedresults.dir}"/>
      <copy failonerror="false" preservelastmodified="true"
            todir="${savedresults.dir}/${build.number}/@{reportName}">
        <fileset dir="@{resultsDir}">
          <include name="*-*-*/**"/>
          <exclude name="**/core.**"/>
          <exclude name="**/**.hprof"/>
          <exclude name="**/**.crf"/>
          <exclude name="**/**.krf"/>
          <exclude name="**/**.drf"/>
        </fileset>
      </copy>

      <copy failonerror="false" tofile="${savedresults.dir}/${build.number}/@{reportName}/summary.txt">
        <fileset dir="@{resultsDir}">
          <include name="summ-*.txt"/>
        </fileset>
      </copy>

      <error-grep sourceDir="@{resultsDir}" threshold="@{perf.threshold}"/>

    </sequential>
  </macrodef>

  <macrodef name="execute-perf64">
    <attribute name="reportName"/>
    <attribute name="type"/>
    <attribute name="bt.file"/>
    <attribute name="resultsDir" default="${tests.results64.dir}/@{type}"/>
    <sequential>
    <execute-perf reportname="@{reportName}64" type="@{type}" bt.file="@{bt.file}" resultsDir="@{resultsDir}" jvm="${unittest.java64}" manager.vmtype="d64"/>
  </sequential>
  </macrodef>

  <target name="oql-gen-parser" depends="props">
    <java classname="antlr.Tool" failonerror="true" fork="true"
          dir="${src.dir}/com/gemstone/gemfire/cache/query/internal/parse">
      <classpath>
        <pathelement path="${product.lib.dir}/${antlr.jar.name}"/>
      </classpath>
      <arg value="oql.g"/>
    </java>
  </target>
  <target name="run-query-tests" depends="props, define-test-groups, -keep-going">
    <run-junit testGroup="junit-query-tests" results="${tests.results.dir}/query" suite="query" threshold="${threshold.java}"/>
  </target>
  <target name="run-query-dunit-tests" depends="props, define-query-tests, run-dunit-tests, -keep-going"/>

  <!-- Run CacheRunner example. Input must be provided in a file named
       "queryPortfolios.in" in the the cacheRunner source directory -->
  <target name="run-cache" depends="props">
    <java classname="cacheRunner.CacheRunner" fork="true" input="${examples.dist.src.dir}/cacheRunner/queryPortfolios.in">
        <arg value="${examples.dist.src.dir}/cacheRunner/queryPortfolios.xml"/>
        <!-- <arg value="false"/> -->
        <classpath>
          <pathelement location="${product.lib.dir}/${gemfire.jar.name}"/>
          <pathelement location="${product.lib.dir}/${antlr.jar.name}"/>
          <pathelement location="${product.lib.dir}/${jna.jar.name}"/>
          <pathelement location="${examples.dist.classes.dir}"/>
          <pathelement location="${contest.dir}/Lib/ConTest.jar"/>
        </classpath>
    </java>
  </target>

  <target name="build-maven-dist" depends="props">
    <mkdir dir="${maven_dist.dir}"/>
    <fileset id="JavaDocJar.files" dir="${docs.dir}/external">
    </fileset>
    <jar jarfile="${maven_dist.dir}/gemfire-${gemfire.version}-javadoc.jar" compress="false">
      <fileset refid="JavaDocJar.files"/>
    </jar>

    <copy file="${product.lib.dir}/${gemfire.jar.name}"
            tofile="${maven_dist.dir}/gemfire-${gemfire.version}.jar"/>

    <copy file="${basedir}/release/installer/gemfire.pom"
          tofile="${maven_dist.dir}/gemfire-${gemfire.version}.pom"/>
    <replace file="${maven_dist.dir}/gemfire-${gemfire.version}.pom"
             token="__MAVEN_GEMFIRE_VERSION__"
             value="${gemfire.version}" summary="yes"/>
    <replace file="${maven_dist.dir}/gemfire-${gemfire.version}.pom"
             token="__MAVEN_ANTLR_VERSION__"
             value="${antlr.version}" summary="yes"/>

    <checksum fileext=".md5">
      <fileset dir="${maven_dist.dir}">
        <include name="*.jar"/>
        <include name="*.pom"/>
      </fileset>
    </checksum>

    <checksum algorithm="sha1" fileext=".sha1">
      <fileset dir="${maven_dist.dir}">
        <include name="*.jar"/>
        <include name="*.pom"/>
      </fileset>
    </checksum>

    <if>
      <equals arg1="${user.name}" arg2="build"/>
      <then>
        <copy file="${basedir}/release/installer/gemfire.pom"
              tofile="${maven_dist.dir}/gemfire-${gemfire.version}-SNAPSHOT.pom"/>
        <replace file="${maven_dist.dir}/gemfire-${gemfire.version}-SNAPSHOT.pom"
                 token="__MAVEN_GEMFIRE_VERSION__"
                 value="${gemfire.version}-SNAPSHOT" summary="yes"/>
        <replace file="${maven_dist.dir}/gemfire-${gemfire.version}-SNAPSHOT.pom"
                 token="__MAVEN_ANTLR_VERSION__"
                 value="${antlr.version}" summary="yes"/>

        <artifact:install-provider artifactId="wagon-http" version="1.0-beta-2">
          <remoteRepository url="http://nexus.gemstone.com:8081/nexus/content/repositories/central">
            <authentication username="admin" password="admin123"/>
          </remoteRepository>
        </artifact:install-provider>
        <artifact:pom id="gemfire.pom" file="${maven_dist.dir}/gemfire-${gemfire.version}-SNAPSHOT.pom"/>
        <artifact:deploy file="${maven_dist.dir}/gemfire-${gemfire.version}.jar">
          <remoteRepository url="http://nexus.gemstone.com:8081/nexus/content/repositories/snapshots">
            <authentication username="deployment" password="deployment123"/>
            <snapshots enabled="true"/>
          </remoteRepository>
          <pom refid="gemfire.pom"/>
        </artifact:deploy>
      </then>
      <else>
        <echo level="info" message="Not deploying to NEXUS Maven Repository. Deploy to NEXUS only as user build"/>
      </else>
    </if>
  </target>

  <target name="build-pvtl-installer" depends="props,-define-installer-macro">
    <property file="${build.dir}/build.number"/>
    <installer prefix="vf_"
               product="${product.formalname}"
               version="${gemfire.version}"
               product.dir="${product.dir}"
               bnumber="${build.number}"
               installer.classname="GemFireZipSelfExtractor"
               installer.size="37"/>
  </target>

  <target name="build-pvtl-rpm" depends="props">

    <property name="vf_installer.dir" value="vf_installer"/>
    <property name="rpm.dir" value="${vf_installer.dir}_rpm"/>
    <property name="rpmbuild.dir" value="${vf_installer.dir}_rpmbuild"/>

    <!-- Clean current RPM installer directory -->
    <delete dir="${osbuild.dir}/${rpm.dir}"/>
    <mkdir dir="${osbuild.dir}/${rpm.dir}"/>
    <delete dir="${osbuild.dir}/${rpmbuild.dir}"/>
    <mkdir dir="${osbuild.dir}/${rpmbuild.dir}"/>

    <mkdir dir="${osbuild.dir}/${rpmbuild.dir}/BUILD"/>
    <mkdir dir="${osbuild.dir}/${rpmbuild.dir}/SOURCES"/>
    <mkdir dir="${osbuild.dir}/${rpmbuild.dir}/SPECS"/>
    <mkdir dir="${osbuild.dir}/${rpmbuild.dir}/RPMS"/>

    <propertyregex property="gfversion"
                   input="${gemfire.version}"
                   regexp="\."
                   replace=""/>
    <property name="rpminstall.dir" value="${product.formalname}_${gfversion}"/>
 
    <if>
      <available type="dir" file="${product.dir}"/>
      <then>
        <echo level="info" message="Found ${product.dir}"/>
        <copy todir="${osbuild.dir}/${rpmbuild.dir}/SOURCES/${rpminstall.dir}">
          <fileset dir="${product.dir}"/>
        </copy>
      </then>
      <else>
        <fail message="${product.dir} not found. Please run build-product target"/>
      </else>
    </if>

    <!-- Copy files to SOURCES directory -->
    <copy todir="${osbuild.dir}/${rpmbuild.dir}/BUILD">
      <fileset dir="release/installer/rpm">
        <include name="cacheserver.conf"/>
        <include name="cacheserver.sysconfig"/>
      </fileset>
    </copy>
 
    <if>
      <antversion property="ant.version" atleast="1.8"/>
      <then>
        <foreach inheritall="true" list="el5,el6" target="build-rpm-os" param="os" delimiter=","/>
      </then>
      <else>
        <fail message="RPM installer must run with Ant Version >= 1.8.0. Currently running Ant Version: ${ant.version}. Exiting build..."/>
      </else>
    </if>
  </target>

  <!-- Target must be run with ANT >= 1.8.0 -->
  <target name="build-rpm-os">

    <!-- Copy files to SOURCES directory -->
    <copy todir="${osbuild.dir}/${rpmbuild.dir}/BUILD">
      <fileset dir="release/installer/rpm">
        <include name="cacheserver.${os}.init"/>
      </fileset>
    </copy>

    <!-- Copy RPM SPEC file to RPM SPECS directory -->
    <copy todir="${osbuild.dir}/${rpmbuild.dir}/SPECS">
      <fileset dir="release/installer/rpm">
        <include name="gemfire.${os}.spec"/>
      </fileset>
    </copy>
  
    <!-- Update RPM files with current version -->
    <replace dir="${osbuild.dir}/${rpmbuild.dir}" token="@VERSION@"
             value="${gemfire.version}" summary="yes"/>
    <replace dir="${osbuild.dir}/${rpmbuild.dir}" token="@JARNAME@"
             value="${rpminstall.dir}" summary="yes"/>

    <!-- Build RPM -->
    <rpm specFile="gemfire.${os}.spec"
         topDir="${osbuild.dir}/${rpmbuild.dir}"
         cleanBuildDir="true"
         failOnError="true"/>

    <!-- Copy RPM to RPM output directory -->
    <copy todir="${osbuild.dir}/${rpm.dir}">
      <fileset dir="${osbuild.dir}/${rpmbuild.dir}/RPMS/noarch">
        <include name="*.rpm"/>
      </fileset>
    </copy>

    <delete dir="${osbuild.dir}/${rpmbuild.dir}/RPMS/noarch"/>
  </target>

  <target name="build-installer" depends="props,-define-installer-macro">
    <installer prefix="gf_"
               product="GemFire"
               version="${gemfire.version}"
               product.dir="${product.dir}"
               installer.classname="GemFireZipSelfExtractor"
               installer.size="37"/>
  </target>

  <target name="build-pvtl-dist" depends="props, -define-zipdist-macro">
    <property file="${build.dir}/build.number"/>
    <zipdist prefix="vf_"
             product="${product.formalname}"
             version="${gemfire.version}"
             bnumber="${build.number}"
             product.dir="${product.dir}"/>
  </target>

  <target name="-define-zipdist-macro" depends="props">
    <macrodef name="zipdist">
      <attribute name="prefix"/>
      <attribute name="product"/>
      <attribute name="version"/>
      <attribute name="bnumber"/>
      <attribute name="product.dir"/>
      <attribute name="dist.dir" default="${osbuild.dir}/@{prefix}distribution"/>
      <attribute name="dist.tmp" default="${osbuild.dir}/@{prefix}distribution_tmp"/>
      <attribute name="installer.oss.zip" default="OSS.zip"/>

      <sequential>
        <property file="${build.dir}/build.number" prefix="@{prefix}dist."/>
        <!-- basic clean up and setup -->
        <delete dir="@{dist.dir}" quiet="true"/>
            <mkdir dir="@{dist.tmp}/opensource"/>
            <mkdir dir="@{dist.tmp}/opensource/modified_src"/>
            <copy file="${basedir}/release/installer/build.xml"
                  todir="@{dist.tmp}/opensource/modified_src"/>

        <mkdir dir="@{dist.dir}"/>
        <delete dir="@{dist.tmp}" quiet="true"/>
        <mkdir dir="@{dist.tmp}"/>

        <condition property="plat" value="Windows">
          <os family="windows"/>
        </condition>

        <condition property="plat" value="Linux">
          <os name="Linux"/>
        </condition>

        <property name="@{prefix}distrib.vernum" value="@{dist.tmp}/vernum.properties"/>
        <touch file="${@{prefix}distrib.vernum}"/>
        <echo file="${@{prefix}distrib.vernum}" level="info">@{prefix}distrib_vernum=@{product}_@{version}_b@{bnumber}_${plat}
        </echo>
        <echo append="true" file="${@{prefix}distrib.vernum}" level="info">@{prefix}distrib_vernum_oss=@{product}_@{version}_b@{bnumber}
        </echo>
        <echo append="true" file="${@{prefix}distrib.vernum}" level="info">@{prefix}distrib_vernum_odbc=@{product}_@{version}_b@{bnumber}_ODBC
        </echo>
        <replace file="${@{prefix}distrib.vernum}" token="." value=""/>

        <property file="${@{prefix}distrib.vernum}"/>
        <property name="@{prefix}distrib.name" value="${@{prefix}distrib.vernum}"/>
        <property name="@{prefix}distrib.zip" value="${@{prefix}distrib.name}.zip"/>

        <!-- use separate filesets to allow setting permissions on bin scripts 
             if new dirs are added to product trees this need to be updated -->
        <echo message="Creating ${@{prefix}distrib_vernum} ZIP file" level="info"/>
        <!-- GemfireXD product directories and files -->
        <if>
          <equals arg1="${plat}" arg2="Linux"/>
          <then>
            
            <zip destfile="@{dist.dir}/${@{prefix}distrib_vernum}.zip">
              <zipfileset dir="@{product.dir}/bin" filemode="775" prefix="${@{prefix}distrib_vernum}/bin"/>
              <zipfileset dir="@{product.dir}/docs" prefix="${@{prefix}distrib_vernum}/docs"/>
              <zipfileset dir="@{product.dir}/examples" excludes="mapreduce/scripts/*.sh" prefix="${@{prefix}distrib_vernum}/examples"/>
              <zipfileset dir="@{product.dir}/examples" includes="mapreduce/scripts/*.sh" filemode="775" prefix="${@{prefix}distrib_vernum}/examples"/>
              <zipfileset dir="@{product.dir}/ext-lib" prefix="${@{prefix}distrib_vernum}/ext-lib"/>
              <zipfileset dir="@{product.dir}/lib" prefix="${@{prefix}distrib_vernum}/lib"/>
              <zipfileset dir="@{product.dir}/quickstart" prefix="${@{prefix}distrib_vernum}/quickstart"/>
              <zipfileset dir="@{product.dir}/tools" prefix="${@{prefix}distrib_vernum}/tools"/>
              <zipfileset dir="@{product.dir}" includes="EULA.txt" prefix="${@{prefix}distrib_vernum}"/>
            </zip>

            <!-- GemfireXD tar dist --> 
            <echo message="Creating ${@{prefix}distrib_vernum} TAR file" level="info"/>
            <tar destfile="@{dist.dir}/${@{prefix}distrib_vernum}.tar.gz" longfile="gnu" compression="gzip">
              <zipfileset src="@{dist.dir}/${@{prefix}distrib_vernum}.zip"/>
              <tarfileset dir="@{product.dir}" prefix="${@{prefix}distrib_vernum}">
                <include name="ext-lib/**"/>
              </tarfileset>
            </tar>

            <!-- GemfireXD odbc driver zip and tar file --> 
            <zip destfile="@{dist.dir}/${@{prefix}distrib_vernum_odbc}.zip">
              <zipfileset dir="${odbc.product.dir}" prefix="${@{prefix}distrib_vernum_odbc}"/>
            </zip> 

            <tar destfile="@{dist.dir}/${@{prefix}distrib_vernum_odbc}.tar.gz" longfile="gnu" compression="gzip">
              <zipfileset src="@{dist.dir}/${@{prefix}distrib_vernum_odbc}.zip"/>
            </tar>

            <!-- GemfireXD OSS tarball -->
            <echo message="Creating opensource tarball " level="info"/>
            <mkdir dir="@{dist.tmp}/opensource"/>
            <mkdir dir="@{dist.tmp}/opensource/modified_src"/>
            <copy file="${basedir}/release/installer/build.xml"
                  todir="@{dist.tmp}/opensource/modified_src"/>
            <copy todir="@{dist.tmp}/opensource/original_src">
              <fileset dir="${gcm.dir}/where/GF_OSS_SRC/@{product}">
                <include name="*.zip"/>
                <include name="*.gz"/>
                <include name="*.tar"/>
                <include name="*.jar"/>
              </fileset>
            </copy>

            <zip destfile="@{dist.dir}/${@{prefix}distrib_vernum_oss}_@{installer.oss.zip}">
              <zipfileset dir="${src.dir}/com/gemstone/org/jgroups" prefix="${@{prefix}distrib_vernum_oss}/modified_src/jgroups/com/gemstone/org/jgroups"/>
              <zipfileset dir="@{dist.tmp}/opensource/original_src" prefix="${@{prefix}distrib_vernum_oss}/original_src"/>
              <zipfileset dir="${src.dir}/com/gemstone/gnu/trove" prefix="${@{prefix}distrib_vernum_oss}/modified_src/trove/com/gemstone/gnu/trove"/>
              <zipfileset dir="@{dist.tmp}/opensource/modified_src" prefix="${@{prefix}distrib_vernum_oss}/modified_src">
                <include name="build.xml"/>
              </zipfileset>
            </zip>
          </then>
          <!-- Make separate ZIP dist for Windows  -->
          <else>
            <zip destfile="@{dist.dir}/${@{prefix}distrib_vernum}.zip">
              <zipfileset dir="@{product.dir}/bin" filemode="775" prefix="${@{prefix}distrib_vernum}/bin"/>
              <zipfileset dir="@{product.dir}/docs" prefix="${@{prefix}distrib_vernum}/docs"/>
              <zipfileset dir="@{product.dir}/examples" excludes="mapreduce/scripts/*.sh" prefix="${@{prefix}distrib_vernum}/examples"/>
              <zipfileset dir="@{product.dir}/examples" includes="mapreduce/scripts/*.sh" filemode="775" prefix="${@{prefix}distrib_vernum}/examples"/>
              <zipfileset dir="@{product.dir}/ext-lib" prefix="${@{prefix}distrib_vernum}/ext-lib"/>
              <zipfileset dir="@{product.dir}/lib" prefix="${@{prefix}distrib_vernum}/lib"/>
              <zipfileset dir="@{product.dir}/quickstart" prefix="${@{prefix}distrib_vernum}/quickstart"/>
              <zipfileset dir="@{product.dir}/tools" prefix="${@{prefix}distrib_vernum}/tools"/>
              <zipfileset dir="@{product.dir}" includes="EULA.txt" prefix="${@{prefix}distrib_vernum}"/>
            </zip>
          </else>
        </if>
 
      </sequential>
    </macrodef>
  </target>

  <target name="-define-installer-macro" depends="props">
    <macrodef name="installer">
      <attribute name="prefix"/>
      <attribute name="product"/>
      <attribute name="version"/>
      <attribute name="bnumber"/>
      <attribute name="product.dir"/>
      <attribute name="installer.classname"/>
      <attribute name="installer.size"/>
      <attribute name="installer.dir" default="${osbuild.dir}/@{prefix}installer"/>
      <attribute name="installer.tmp" default="${osbuild.dir}/@{prefix}installer_tmp"/>
      <attribute name="installer.oss.zip" default="OSS.zip"/>

      <sequential>
        <property file="${build.dir}/build.number" prefix="@{prefix}installer."/>
        <!-- basic clean up and setup -->
        <delete dir="@{installer.dir}" quiet="true"/>
        <delete dir="@{installer.tmp}" quiet="true"/>
        <mkdir dir="@{installer.dir}"/>
        <mkdir dir="@{installer.tmp}"/>
        <copy todir="@{installer.tmp}">
          <fileset dir="${basedir}/release/installer">
            <include name="i18n*.properties"/>
          </fileset>
        </copy>

        <mkdir dir="@{installer.tmp}/opensource"/>
        <mkdir dir="@{installer.tmp}/opensource/modified_src"/>
        <copy file="${basedir}/release/installer/build.xml"
              todir="@{installer.tmp}/opensource/modified_src"/>

        <copy file="${basedir}/release/installer/@{prefix}EULA.txt"
              tofile="@{installer.tmp}/EULA.txt"/>
        <copy file="${basedir}/release/installer/@{prefix}INSTALL.txt"
              tofile="@{installer.tmp}/INSTALL.txt"/>

        <property name="@{prefix}installer.vernum" value="@{installer.tmp}/vernum.properties"/>
        <touch file="${@{prefix}installer.vernum}"/>
        <echo file="${@{prefix}installer.vernum}" level="info">@{prefix}installer_vernum=@{product}_@{version}_b@{bnumber}
        </echo>
        <replace file="${@{prefix}installer.vernum}" token="." value=""/>

        <property file="${@{prefix}installer.vernum}"/>
        <property name="@{prefix}installer.name" value="${@{prefix}installer_vernum}_Installer"/>
        <property name="@{prefix}installer.jar" value="${@{prefix}installer.name}.jar"/>

        <replace file="@{installer.tmp}/INSTALL.txt" token="__JAR_NAME__"
                 value="${@{prefix}installer.jar}" summary="yes"/>
        <replace file="@{installer.tmp}/INSTALL.txt" token="__VERSION__"
                 value="@{version} build ${@{prefix}installer.build.number}" summary="yes"/>
        <replace file="@{installer.tmp}/INSTALL.txt" token="__SIZE__"
                 value="@{installer.size}" summary="yes"/>
        <replace file="@{installer.tmp}/INSTALL.txt" token="__PRODUCT_DIR__"
                 value="${@{prefix}installer_vernum}" summary="yes"/>
        <replace file="@{installer.tmp}/i18n.properties" token="__PRODUCT_DIR__"
                 value="${@{prefix}installer_vernum}" summary="yes"/>
        <replace file="@{installer.tmp}/i18n.properties" token="__PRODUCT_NAME__"
                 value="@{product}" summary="yes"/>

        <copy todir="@{product.dir}/docs" file="@{installer.tmp}/INSTALL.txt"/>
        <copy file="@{installer.tmp}/INSTALL.txt" tofile="@{installer.dir}/${@{prefix}installer_vernum}_INSTALL.txt"/>

        <javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes"
               memoryMaximumSize="${max.memory}m" debug="on" destdir="@{installer.tmp}"
               includeAntRuntime="false" optimize="off"
               srcdir="${basedir}/release/installer" >
          <include name="ZipSelfExtractor.java"/>
          <include name="@{installer.classname}.java"/>
          <classpath/>
        </javac>

        <jar destfile="@{installer.dir}/${@{prefix}installer.jar}">
          <manifest>
            <attribute name="Main-Class" value="@{installer.classname}"/>
          </manifest>
          <zipfileset dir="@{product.dir}" prefix="${@{prefix}installer_vernum}"/>
          <fileset dir="@{installer.tmp}">
            <include name="**.class"/>
            <include name="i18n*.properties"/>
            <include name="EULA.txt"/>
          </fileset>
        </jar>

        <mkdir dir="@{installer.tmp}/${@{prefix}installer_vernum}/opensource"/>
        <mkdir dir="@{installer.tmp}/${@{prefix}installer_vernum}/opensource/original_src"/>
        <copy todir="@{installer.tmp}/${@{prefix}installer_vernum}/opensource/original_src">
          <fileset dir="${gcm.dir}/where/GF_OSS_SRC/@{product}">
            <include name="*.zip"/>
            <include name="*.gz"/>
            <include name="*.tar"/>
          </fileset>
        </copy>

        <mkdir dir="@{installer.tmp}/${@{prefix}installer_vernum}/opensource/modified_src"/>
        <zip destfile="@{installer.dir}/${@{prefix}installer_vernum}_@{installer.oss.zip}">
          <zipfileset dir="${src.dir}/com/gemstone/org/jgroups" prefix="${@{prefix}installer_vernum}/modified_src/jgroups/com/gemstone/org/jgroups"/>
          <zipfileset dir="@{installer.tmp}/${@{prefix}installer_vernum}/opensource/original_src" prefix="${@{prefix}installer_vernum}/original_src"/>
          <zipfileset dir="${src.dir}/com/gemstone/gnu/trove" prefix="${@{prefix}installer_vernum}/modified_src/trove/com/gemstone/gnu/trove"/>
          <zipfileset dir="@{installer.tmp}/opensource/modified_src" prefix="${@{prefix}installer_vernum}/modified_src">
            <include name="build.xml"/>
          </zipfileset>
        </zip>
      </sequential>
    </macrodef>
  </target>

  <target name="pack-snap" depends="props">
    <delete file="${build.dir}/snap.zip"/>
    <zip zipfile="${build.dir}/snap.zip" compress="true">
      <fileset dir="${osbuild.dir}">
        <include name="product/**"/>
        <include name="hidden/**"/>
        <include name="tests/classes/**"/>
        <include name="tests/extraJars/**"/>
        <include name="tests/lib/**"/>
        <include name="tests/other/**"/>
        <include name="tests100/**"/>
        <include name="tests130/**"/>
        <include name="tests131/**"/>
        <include name="product-gfxd/**"/>
        <include name="gemfirexd/classes/**"/>
        <include name="gemfirexd/jars/**"/>
        <include name="GemFireXDTests/**"/>
        <include name="testsVersions/**"/>
        <exclude name="vf_distribution/**"/>
        <exclude name="vf_distribution_tmp/**"/>
        <exclude name="vf_installer_rpm/**"/>
        <exclude name="vf_installer_rpmbuild/**"/>
        <exclude name="DataBrowser_tmp/**"/>
        <exclude name="GFModules_tmp/**"/>
        <exclude name="Web_tmp/**"/>
        <exclude name="examples/**"/>
        <exclude name="javadocs/**"/>
        <exclude name="maven_dist/**"/>
        <exclude name="templates/**"/>
      </fileset>
    </zip>
  </target>

  <target name="unpack-snap" depends="props">
    <unzip src="${snapZip.dir}/snap.zip" dest="${osbuild.dir}"/>
    <chmod perm="a+x">
      <fileset dir="${osbuild.dir}">
        <include name="product/**"/>
        <include name="hidden/**"/>
        <include name="tests/extraJars/**"/>
        <include name="tests/classes/cacheperf/poc/citi2/run.sh"/>
        <include name="tests/classes/bin/testManagerLogWriter.sh"/>
        <include name="tests/classes/bin/scaleperf/run.sh"/>
        <include name="tests/classes/bin/scaleperf/compareperf.sh"/>
        <include name="tests/classes/hydratest/hydracheck/grep.sh"/>
        <include name="tests/lib/**"/>
        <include name="tests/other/**"/>
        <include name="tests100/**"/>
        <include name="tests130/**"/>
        <include name="tests131/**"/>
        <include name="product-gfxd/**"/>
        <include name="gemfirexd/classes/**"/>
        <include name="gemfirexd/jars/**"/>
        <include name="GemFireXDTests/**"/>
        <include name="testsVersions/**"/>
      </fileset>
    </chmod>
  </target>

  <target name="wrapper-props" depends="props">
    <property name="wrapper-zip.prefix" value="gemfire-server-${gemfire.version}" />
    <property name="wrapper-zip.file" value="${wrapper-zip.prefix}.zip" />
    <property name="wrapper-build.dir" value="${osbuild.dir}/wrapper" />
    <property name="wrapper-classes.dir" value="${wrapper-build.dir}/classes" />
    <property name="wrapper-jars.dir" value="${wrapper-build.dir}/jars" />
    <property name="wrapper-stage.dir" value="${wrapper-build.dir}/stage" />
    <property name="wrapper-dist.dir" value="${wrapper-build.dir}/wrapper-delta-pack-3.3.1" />
  </target>

  <target name="unpack-wrapper" depends="wrapper-props">
    <mkdir dir="${wrapper-build.dir}" />
    <untar src="${wrapper-delta-pack.tar.gz}" dest="${wrapper-build.dir}" compression="gzip"/>
  </target>

  <target name="compile-gemfire-wrapper" depends="build-product,unpack-wrapper">
    <mkdir dir="${wrapper-classes.dir}" />

    <javac executable="${javac.primary}/bin/javac"
           srcdir="${basedir}/service-wrapper/src"
           destdir="${wrapper-classes.dir}"
           deprecation="${compile-gemfire.deprecation}"
           memoryMaximumSize="${max.memory}m"
           fork="yes" debug="on" nowarn="off" optimize="off" verbose="off">
      <classpath>
        <fileset dir="${product.lib.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${wrapper-dist.dir}/lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="build-gemfire-wrapper-jar" depends="compile-gemfire-wrapper">
    <mkdir dir="${wrapper-jars.dir}" />

    <jar destfile="${wrapper-jars.dir}/gemfire-wrapper.jar"
         basedir="${wrapper-classes.dir}" />
  </target>

  <target name="run-findbugs">
    <if>
      <equals arg1="${product}" arg2="gemfireXD"/>
      <then>
        <antcall target="-gfxd-findbugs" inheritAll="false"/>
      </then>
      <else>
        <antcall target="gf-findbugs" inheritAll="false"/>
      </else>
    </if>
  </target>
  
  <target name="gf-findbugs" depends="props">
    <property name="findbugs.sourcePath" value="${src.dir}"/>
    <property name="findbugs.class" value="${product.lib.dir}/${gemfire.jar.name}"/>
    
    <if>
      <not>
        <available file="${product.lib.dir}/${gemfire.jar.name}"/>
      </not>
      <then>
        <echo level="info" message="Unable to locate ${product.lib.dir}/${gemfire.jar.name}, will compile first before scanning..."/>
        <antcall target="src"/>
      </then>
    </if>
    <antcall target="findbugs" inheritAll="true"/>
  </target>

  <target name="create-wrapper-scripts" depends="wrapper-props">
    <macrodef name="mutate-script">
      <attribute name="template"/>
      <attribute name="script"/>
      <attribute name="shortname"/>
      <attribute name="longname"/>
      <sequential>
        <copy file="${basedir}/service-wrapper/@{template}"
              tofile="${wrapper-stage.dir}/@{script}">
          <filterset>
            <filter token="SHORTNAME" value="@{shortname}"/>
            <filter token="LONGNAME" value="@{longname}"/>
          </filterset>
        </copy>
      </sequential>
    </macrodef>

    <!-- Windows Service Install scripts -->
    <mutate-script template="bin/template-Install.bat"
                   script="bin/InstallGemFireJMXAgentService-NT.bat"
                   longname="GemFire Enterprise JMX Agent"
                   shortname="jmx-agent"/>
    <mutate-script template="bin/template-Install.bat"
                   script="bin/InstallGemFireCacheServerService-NT.bat"
                   longname="GemFire Enterprise Cache Server"
                   shortname="cache-server"/>
    <mutate-script template="bin/template-Install.bat"
                   script="bin/InstallGemFireLocatorService-NT.bat"
                   longname="GemFire Enterprise Locator"
                   shortname="locator"/>

    <!-- Windows Service Uninstall scripts -->
    <mutate-script template="bin/template-Uninstall.bat"
                   script="bin/UninstallGemFireJMXAgentService-NT.bat"
                   longname="GemFire Enterprise JMX Agent"
                   shortname="jmx-agent"/>
    <mutate-script template="bin/template-Uninstall.bat"
                   script="bin/UninstallGemFireCacheServerService-NT.bat"
                   longname="GemFire Enterprise Cache Server"
                   shortname="cache-server"/>
    <mutate-script template="bin/template-Uninstall.bat"
                   script="bin/UninstallGemFireLocatorService-NT.bat"
                   longname="GemFire Enterprise Locator"
                   shortname="locator"/>

    <!-- Windows Service scripts -->
    <mutate-script template="bin/template-Console-NT.bat"
                   script="bin/GemFireJMXAgentConsole-NT.bat"
                   longname="GemFire Enterprise JMX Agent"
                   shortname="jmx-agent"/>
    <mutate-script template="bin/template-Console-NT.bat"
                   script="bin/GemFireCacheServerConsole-NT.bat"
                   longname="GemFire Enterprise Cache Server"
                   shortname="cache-server"/>
    <mutate-script template="bin/template-Console-NT.bat"
                   script="bin/GemFireLocatorConsole-NT.bat"
                   longname="GemFire Enterprise Locator"
                   shortname="locator"/>

    <!-- *NIX Service scripts -->
    <mutate-script template="bin/template-console"
                   script="bin/gemfire-jmx-agent"
                   longname="GemFire Enterprise JMX Agent"
                   shortname="jmx-agent"/>
    <mutate-script template="bin/template-console"
                   script="bin/gemfire-cache-server"
                   longname="GemFire Enterprise Cache Server"
                   shortname="cache-server"/>
    <mutate-script template="bin/template-console"
                   script="bin/gemfire-locator"
                   longname="GemFire Enterprise Locator"
                  shortname="locator"/>
  </target>

  <target name="create-gemfire-server-zip" depends="build-gemfire-wrapper-jar, create-wrapper-scripts">

    <delete file="${product.dir}/${wrapper-zip.file}" quiet="true"/>

    <!-- This is the only way I know of to add empty directories to the zip file... -->
    <mkdir dir="${wrapper-stage.dir}" />
    <mkdir dir="${wrapper-stage.dir}/logs" />
    <mkdir dir="${wrapper-stage.dir}/pidfiles" />

    <zip destfile="${product.dir}/${wrapper-zip.file}">
      <zipfileset filemode="644" prefix="${wrapper-zip.prefix}" dir="${wrapper-stage.dir}" />
      <zipfileset filemode="644" prefix="${wrapper-zip.prefix}/conf" dir="${basedir}/service-wrapper/conf" />
      <zipfileset filemode="555" prefix="${wrapper-zip.prefix}/lib" dir="${product.lib.dir}" />
      <zipfileset filemode="555" prefix="${wrapper-zip.prefix}/wrapper/lib" dir="${wrapper-jars.dir}" />
      <zipfileset filemode="555" prefix="${wrapper-zip.prefix}/wrapper/lib" dir="${wrapper-dist.dir}/lib" />
      <zipfileset filemode="555" prefix="${wrapper-zip.prefix}/wrapper/bin" dir="${wrapper-dist.dir}/bin" includes="wrapper-*" />
    </zip>

    <chmod file="${product.dir}/${wrapper-zip.file}" perm="0444" />
  </target>

  <target name="echo-test-classpath" depends="define-classpath-refs">
    <property name="output.text" refid="batterytest.classpath"/>
    <echo message="CLASSPATH:${output.text}"/>
  </target>
  <target name="generate-eclipse-classpath" depends="-custom-deps">
    <if><not><isset property="eclipse.classpath.file"/></not>
      <then>
      <fail message="You must set eclipse.classpath.file to the name of a file to hold the new classpath XML"/>
      </then>
    </if>
    <property name="temp.file" value="eclipse.classpath.tmp"/>
    <echo file="${temp.file}">&lt;?xml version="1.0" encoding=&quot;UTF-8&quot;?&gt;
&lt;classpath&gt;
    &lt;classpathentry kind=&quot;output&quot; path=&quot;GEMFIRE_OUTPUT/&quot;/&gt;
    &lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot;/&gt;
    &lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.junit.JUNIT_CONTAINER/4&quot;/&gt;
    &lt;!-- SOURCES --&gt;
    &lt;classpathentry excluding=&quot;**/.svn/**|com/gemstone/org/jgroups/**/*1_4*|com/gemstone/org/jgroups/**/obsolete/**&quot; kind=&quot;src&quot; path=&quot;src&quot;/&gt;
    &lt;classpathentry kind=&quot;src&quot; path=&quot;gemfirexd/java/tools&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;templates&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|wan/WANClient.java&quot; kind=&quot;src&quot; path=&quot;examples/dist&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;quickstart&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|**/BshServlet.java|cacheperf/poc/citi/**|com/gemstone/gemfire/cache30/BridgeLoaderTestSerializableImpl.java|com/gemstone/gemfire/internal/cache/CapacityMaintainerImpl.java|com/gemstone/gemfire/internal/cache/UnsharedLRUEntriesMapTestHelper.java|com/gemstone/gemfire/internal/jta/ManagedPoolCacheTest.java|com/gemstone/gemfire/internal/util/SerializableImpl*.java|jfcunit/**|sql/ecotests/**|largeScale/newedge/**|diskRecovery/StartupShutdownTest.java|cacheperf/comparisons/gemfirexd/jpmc/datagen/|wan/query/WANQueryClient.java|com/gemstone/gemfire/distributed/ServerLauncherJUnitTest.java|com/gemstone/gemfire/internal/lang/ThreadUtilsTest.java|com/gemstone/gemfire/internal/util/ArrayUtilsTest.java|com/gemstone/gemfire/internal/util/CollectionUtilsTest.java|com/gemstone/gemfire/internal/util/IOUtilsTest.java&quot; kind=&quot;src&quot; path=&quot;tests&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|**/*169.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/build&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/*169.java|**/*30.java|**/.cvsignore|**/.svn/**|com/pivotal/gemfirexd/internal/client/net/ClientJDBCObjectFactoryImpl.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/client&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|**/*169.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/drda&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/*169.java|**/.cvsignore|**/.svn/**|com/pivotal/gemfirexd/internal/osgi/EmbeddedActivator.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/engine&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|**/*169.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/shared&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|**/*169.java&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/storeless&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/GemFireXDTests/dunit&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/GemFireXDTests/junit&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|com/pivotal/gemfirexd/internal/impl/drda/|org/apache/derbyTesting/functionTests/suites/All.java|org/apache/derbyTesting/functionTests/suites/AllPackages.java|org/apache/derbyTesting/functionTests/tests/demo/|org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationTestRun.java|org/apache/derbyTesting/functionTests/tests/replicationTests/StandardTests.java|gfxdTestReporting/src/&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/testing&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**|examples/jmxmonitor/**|examples/mapreduce/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/GemFireXDPackaging&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/testing/gfxdTestReporting/src&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/ddlutils/src/main/java&quot;/&gt;
    &lt;classpathentry excluding=&quot;**/.cvsignore|**/.svn/**&quot; kind=&quot;src&quot; path=&quot;gemfirexd/java/ddlutils/src/test/java&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/tomcat-jdbc.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/tomcat-juli.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/c3p0-0.9.5-pre6.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/commons-dbcp-1.4.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/commons-pool-1.4.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/mchange-commons-java-0.2.6.3.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/${jdom.jar.name}&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;tests/lib/${vijava.jar.name}&quot;/&gt;
    &lt;classpathentry kind=&quot;var&quot; path=&quot;JDK_DIR/lib/tools.jar&quot;/&gt;
    &lt;!-- ANT --&gt;
    &lt;classpathentry kind=&quot;var&quot; path=&quot;GCM_DIR/where/java/ant/ant-contrib/ant-contrib-1.0b3/ant-contrib-1.0b3.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;var&quot; path=&quot;GCM_DIR/where/java/ant/apache-ant-1.8.4/lib/ant.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;var&quot; path=&quot;GCM_DIR/where/java/ant/apache-ant-1.8.4/lib/ant-junit.jar&quot;/&gt;
    &lt;!-- LIBRARIES FROM buildfiles/dependencies.xml --&gt;</echo>
    <concat destfile="${temp.file}" append="true">
      <filelist dir="." files="${eclipse.classpath.file}"/>
    </concat>
    <!-- TODO: generate the gemfirexd additional libraries by iterating through the directory contents -->
    <echo file="${temp.file}" append="true">
    &lt;!-- GEMFIREXD LIBRARIES NOT IN buildfiles/dependencies.xml --&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/commons-beanutils-1.7.0.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/commons-dbcp-1.2.1.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/commons-digester-1.7.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/commons-pool-1.2.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/dom4j-1.4.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/stax-api-1.0.1.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/java/ddlutils/lib/wstx-asl-3.0.2.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/empty.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/felix.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/geronimo-spec-servlet-2.4-rc4.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/${jakarta-oro.jar.name}&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/javacc.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/serializer.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/xalan.jar&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/tools/java/${thrift.jar.name}&quot;/&gt;
    &lt;classpathentry kind=&quot;lib&quot; path=&quot;gemfirexd/integration/pxf/${pxf.jar.name}&quot;/&gt;
&lt;/classpath&gt;
    </echo>
    <move file="${temp.file}" tofile="${eclipse.classpath.file}"/>
    <echo message="Created new .classpath file for Eclipse named ${eclipse.classpath.file}"/>
  </target>

</project>
