Building and Running Gemfire with Eclipse

This is a work in progress; feel free to edit, make corrections, improvements
and the like.

-----------------------------------------
Principles of Operation:

Although Eclipse has ant support, we do not attempt to use our build.xml in
order to build the product.  The build.xml is too sophisticated to reasonably
and easily be used with Eclipse.

Instead, we use our own customized workspace rules.  Eclipse builds into
its own private area, thereby leaving one's normal builds untouched.  There
are scripts to allow the resulting created class files to be runnable;
simple things like CacheRunner and the junit tests can be run in this mode.

Conversely, we do not (yet) have support to allow hydra to launch executables
in such a mode that they can be controlled by Eclipse, so dunit and hydra
tests are not (yet) directly debuggable.

Since some of the sources needed to build GemFire are generated by
build.xml, it is necessary to first do a complete build 

    bash build.sh clean build-all

before trying to use Eclipse.  If you subsequently do a clean without
a build, it is possible that Eclipse will get upset and allege compilation
errors in your workspace.

Unlike many other SDK's, Eclipse does not have a methodology to allow
its workspace rules to be directly exported and imported.  The rules for
building GemFire are VERY COMPLICATED!  In order to import these workspace
rules, you will run a perl script (details below) that will customize the
workspace rules for your build paths.

In the steps below, we will walk through the process involved for getting
Eclipse started on your GemFire checkout.  Many of the steps are similar
to those needed for building GemFire in general; they are repeated here
for completeness sake.

-----------------------------------------
   1. Get a JDK 1.5 (why not 1.6?)

      Although you can run Eclipse with a JRE, you will miss many of the
      convenient features associated with the JDK, such as being able to step
      into Sun's source classes and having automatic tool-tips with javadocs
      for the Sun classes.

      Get it at http://java.sun.com. Running Eclipse with JRockit is not
      recommended.

      On Windows, save yourself a lot of grief and pick an installation folder
      without any spaces in the name, such as "c:\j2sdk1.5.2_09".

      If you are connected to the GemStone network and you don't want to
      install a JDK you can find many installed JDKs in these places:
          * windows: \\n080-fil01\java\users\java_share\jdk
          * unix: /export/gcm/where/jdk

      Make sure that JAVA_HOME is pointed at the root of your installation
      tree and that $JAVA_HOME/bin is in your path.

      Note that although we currently test GemFire with JDK 1.6, we _build_ it
      with JDK 1.5, so this is the version you should launch Eclipse with.

      These instructions were tested with the Sun JDK 1.5.2_17.
-----------------------------------------
   2. Get a JDK 1.6

      Follow steps similar to above.  This JDK is used for running Eclipse
      itself, although we *still* (yucch) compile with JDK 1.5.

      These instructions were tested with the Sun JDK 1.6.0_3.

-----------------------------------------
   3. Decide how you will run Eclipse...

      Eclipse is a graphical application.  If you are running directly on
      a desktop machine, you can run it in native mode.  However, if your
      Linux machine is a server machine, or you want to use it with multiple
      check-outs or architectures, there are additional complications you
      should consider.

      First of all, we don't have the pieces in place to have architecture
      specific Eclipse workspaces.  Thus, if you wish to use Eclipse on
      multiple architectures, you will need multiple versions of Eclipse
      (see the next step).

      If your source files are on /net/shared_build, will you have Eclipse
      read the files remotely, or will you have Eclipse access your desktop
      directly?

      Jason prefers to run Eclipse on my Linux server machine.  I use an X11
      client to display Eclipse on my local machine.  This has the advantage
      that Eclipse's builds and file searches are faster

      Kirk prefers to run Eclipse locally on his Windows desktop machine,
      employing network mounts to read his source files.  This has the
      advantage that editing and graphic interaction are faster.
      
-----------------------------------------
   4. Download and install Eclipse.

      The official download site for Eclipse is http://www.eclipse.org. Look
      for the Eclipse SDK and download it.

      These instructions were tested with Eclipse 3.3.

-----------------------------------------
   5. (Optional) Install the xmlbuddy plugin

      - EXIT Eclipse.
      - cd to the plugins/ subdirectory of your Eclipse checkout
      - unzip -q /gcm/where/java/xmlbuddy/xmlbuddy_2.0.72.zip 

-----------------------------------------
   6. Create a Subversion checkout on your filesystem.

      Feel free to use TortoiseSVN on Windows or command-line SVN on Solaris or
      Linux. I do not recommend using the subclipse plugin inside of Eclipse
      (we need too much control over the project settings to create the project
      this way).

      Note that Eclipse's project settings will not be platform-independent, so
      you should have a different checkout for each architecture you are going
      to run on.

      TODO: can we do better than this?

      Example command (creates a subdirectory called work):

	svn checkout https://svn.gemstone.com/repos/gemfire/trunk work

-----------------------------------------
   7. Perform a normal build in your checkout

   Make sure you have a buildlinux.properties, buildwin.properties, or
   buildsol.properties file in the root directory of your checkout.  It
   must contain, at a minimum, a line like the following:

      osbuild.dir=/export/frodo2/users/jpenney/gemfire_obj/work

   Then execute "bash build.sh build-all".  Do not proceed until this
   successfully completes!

-----------------------------------------
   8. Unpack the prefab settings files.

      cd to the top directory of your source checkout, and then unzip
      the Eclipse metadata files:

	cd work
	unzip -q bin/eclipse/metadata.zip

     NOTE: At this point these files:
       buildlinux.properties
       buildsol.properties
       buildwin.properties
     all point to Jason's directories. Remove these files or edit as you choose.

-----------------------------------------
   9.  Make sure you have your buildwin.properties, buildlinux.properties,
       and/or your buildsol.properties set properly.

       Run the standard build on the resulting checkout.

           bash build.sh clean build-all
      
-----------------------------------------
   10. Run redirect.pl

      From the top level of your checkout, invoke redirect.pl and follow
      the prompts. We are editing your configuration for your local environment.

 	perl bin/eclipse/redirect.pl

      This script will attempt to infer values from your local .properties
      files and your $JAVA_HOME environment variable.


      ~~~~~~~~~~~~~~~~~~~~~~
      Special notes on Windows:
	- This perl script is very rough in this environment and
          may need some special coaching.
	- Consider modifying &canonicalize to return $in, to bypass
	  odd file remapping that older GemStone Windows environments may
          be using.  If you do this, make sure your directory names
          are absolute, not relative.
	- Filenames should be in mixed-mode format, such as

	    C:/branch_name
	    C:/bin/j2se/j2sdk1.5.2_06

	- Note the capitalized letter in the drive name and the use of
          forward slashes.
      ~~~~~~~~~~~~~~~~~~~~~~

      As well as the essential settings, you will see a number of utility
      scripts created in your top directory:

      clean.sh
          a script to clean your .metadata directory before saving or
          exporting it.

      eclipse.sh
          a script to run eclipse (not needed on Windows; just leave a
          shortcut in a convenient place)

      makeglimpse and jgrep
          the scripts I use for using glimpse (everyone uses glimpse, don't
          they? <grin>)
      copypro.sh
          a script for working around proguard issues (discussed later)
      mergelogs.sh
          Kirk's magic script for combining the logfiles from a dunit run
      dunit.conf
          Kirk's magic configuration for running dunit with "fine" logging
      dunittest.sh
          convenient wrapper for launching dunit
      junittest.sh
          convenient wrapper for launching junit

-----------------------------------------
   11. Start Eclipse

      Use File\Switch Workspace... to set the Eclipse workspace to
      the top directory of your checkout.

-----------------------------------------
   12. Install the SVNkit plugin

	- From Help->Software Updates->Find and Install:

	Select "Search for New features..." and click Next.

	- Click "New Remote Site".

        - Enter

          http://svnkit.com

        - Click OK

	- Click "Finish"

	- At the next window, "Select the Features...", Select all available
	  Subclipse plugins

	- Click "Next" and follow the prompts.

      These instructions were tested with SVNKit Library 1.1.5.

  
-----------------------------------------
   13. Install the SVN plugin

       Proceed as before, and specify

           http://subclipse.tigris.org/update_1.2.x

      as the remote update site.

      WARNING: if you misconfigure subclipse, it will HANG your Eclipse
      executable.  In particular, you need to make sure that svnkit is
      chosen in its preferences instead of javahl. [TBA]

      These instructions were tested with Subclipse 1.2.4.

-----------------------------------------
   14. Attach your SVN folders to the workspace


       IMPORTANT: this must be done *before* you clean the view, or
       an *amazingly* long pause will result, as SVN tries to figure out
       -- without your help -- that there is an SVN checkout.  Perhaps they
       have a bubble sort in there?

       On each project, right-click, choose Team->Share Project->SVN and then
       click "OK".

-----------------------------------------
   15. Install the findbugs plugin

      Following similar steps to installing subversion, add the findbugs
      remote site:

      http://findbugs.cs.umd.edu/eclipse

      These instructions were tested with FindBugs 1.3.1.20071223.

-----------------------------------------
   16. Clean the View

      The unpacked version of Eclipse has stale views and indexes. Select all
      of the projects and press "F5" to refresh the view.

      Select each project one at a time and select Project\Clean... and clean
      the individual project. I know, this sounds like overkill, but this
      seems to help un-confuse Eclipse in certain situations.

-----------------------------------------
   17. Compile the Workspace

      Click Project\Clean..., make sure that all projects are selected and ask
      to start a build immediately.

      Long pause ensues...

      If you get errors, try cleaning and building again (step 11). The
      violence we've done to the Eclipse configuration occasionally requires
      multiple attempts before it is straightened out.

-----------------------------------------

  18. Run Findbugs

      Right-click the "src" project, and select Find Bugs->Clear Bug Markers

      Right-click the "src" project and select Find Bugs->Find Bugs

-----------------------------------------
  19. Install Proguard Files

      Proguard has been removed from GemFire so this step is no longer
      needed.

-----------------------------------------
  20. Launch cacheRunner Configuration (to test)
          * Select Run\Debug...
          * Under Java Application, select cacheRunner
          * Click Debug

      Once cacheRunner has booted up, press F11 to launch a second instance.
      You should see the two instances negotiate with each other in the
      console window.

-----------------------------------------
  21. Congratulations!  What's next?


      Eclipse is a very feature-rich environment.  Jason wrote a simple
      introduction on the portal, but you may also learn a lot by simply
      watching another one of the engineers using it.

      Eclipse seems to occasionally get confused about its class and
      text indexes.  If this happens to you, close your projects in the
      Navigator, then restart eclipse and open them again.


-----------------------------------------

  22. Recommended Plugins:

      checkclipse 

      Specify

         file:/export/frodo1/users/jpenney/checkclipse/

      as a local update site.

         (sorry, you have to unpack it and then point to it)

